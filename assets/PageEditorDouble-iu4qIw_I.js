const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-xBv89qyh.js","assets/_commonjsHelpers-Cpj98o6Y.js","assets/console-O6C2cpfB.js","assets/index-CpzpjJt_.js","assets/index-CmBTtwEY.css","assets/console-DFGfS5gE.css","assets/localforage-Dhl3ziBC.js"])))=>i.map(i=>d[i]);
import{l as localforage}from"./localforage-Dhl3ziBC.js";import{E as EnumTools,l as __vitePreload,d as defineComponent,i as onMounted,w as watch,k as onUnmounted,c as createElementBlock,f as useRoute,o as openBlock}from"./index-CpzpjJt_.js";import{B as Buffer,c as createEditorModel,a as createEditorContainer,i as createEditorInstance,d as addCommandSave,f as addContainer,g as disposeEditorList,e as editorConsole,h as addEditorIntoManageList}from"./console-O6C2cpfB.js";import{g as getDefaultExportFromCjs}from"./_commonjsHelpers-Cpj98o6Y.js";function jsonCompress(E){const T=JSON.parse(E);return JSON.stringify(T)}function jsonFlat(E,T=""){const e=JSON.parse(E),R={};function A(O,S,N){if(typeof O!="object"||O===null){N(S,O);return}for(const n in O)if(Object.prototype.hasOwnProperty.bind(O,n)){const I=S?`${S}.${n}`:n;A(O[n],I,N)}}return A(e,T,(O,S)=>{console.log(O,S),R[O]=S}),console.log("jsonFlat",R),JSON.stringify(R,null,2)}function jsonFormat(E){const T=JSON.parse(E);return JSON.stringify(T,null,2)}function parseJSON(E){if(typeof E=="string"&&(E.startsWith("{")||E.startsWith("[")))try{return parseJSON(JSON.parse(E))}catch(T){return console.error(T),E}else{if(Array.isArray(E))return E.map(T=>parseJSON(T));if(typeof E=="object"&&E!==null){for(const T in E)E[T]=parseJSON(E[T]);return E}else return E}}function jsonParseDeep(E){const T=parseJSON(E);return JSON.stringify(T,null,2)}function sortObject(E){return Object.keys(E).sort().reduce(function(T,e){return T[e]=typeof E[e]=="object"?sortObject(E[e]):E[e],T},{})}function jsonSort(E){return JSON.stringify(sortObject(JSON.parse(E)),null,2)}function sizeofByte(E){let T=0,e=0;for(let R=0,A=E.length;R<A;){const O=E.codePointAt(R);O<=127?T+=1:O<=2047?T+=2:O<=65535?T+=3:T+=4,O<=65535?(e+=2,R++):(e+=4,R+=2)}return JSON.stringify({chars:E.length,utf8Bytes:T,utf16Bytes:e},null,2)}function urlParse(E){var S,N;const T=new URL(E),e={};T.searchParams.forEach((n,I)=>{e[I]=n});const A=T.hash.match(/#(?<path>\/[^\?]*)/),O=T.hash.match(/#.*(?<search>\?.*)/);return console.log(O),JSON.stringify({href:T.href,protocol:T.protocol,host:T.host,hostname:T.hostname,port:T.port,pathname:T.pathname,search:T.search,searchParams:e,hash:T.hash,hashPath:(S=A==null?void 0:A.groups)==null?void 0:S.path,hashSearch:(N=O==null?void 0:O.groups)==null?void 0:N.search},null,2)}function modifyObject(E,T,e){const R=T.split(".");let A=E;return R.forEach((O,S)=>{S===R.length-1?A[O]=e:(A[O]={},A=A[O])}),E}function jsonNesting(E){const T=JSON.parse(E),e={};return Object.keys(T).forEach(R=>{modifyObject(e,R,T[R])}),JSON.stringify(e,null,2)}/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */function isNothing(E){return typeof E>"u"||E===null}function isObject(E){return typeof E=="object"&&E!==null}function toArray(E){return Array.isArray(E)?E:isNothing(E)?[]:[E]}function extend(E,T){var e,R,A,O;if(T)for(O=Object.keys(T),e=0,R=O.length;e<R;e+=1)A=O[e],E[A]=T[A];return E}function repeat(E,T){var e="",R;for(R=0;R<T;R+=1)e+=E;return e}function isNegativeZero(E){return E===0&&Number.NEGATIVE_INFINITY===1/E}var isNothing_1=isNothing,isObject_1=isObject,toArray_1=toArray,repeat_1=repeat,isNegativeZero_1=isNegativeZero,extend_1=extend,common={isNothing:isNothing_1,isObject:isObject_1,toArray:toArray_1,repeat:repeat_1,isNegativeZero:isNegativeZero_1,extend:extend_1};function formatError(E,T){var e="",R=E.reason||"(unknown reason)";return E.mark?(E.mark.name&&(e+='in "'+E.mark.name+'" '),e+="("+(E.mark.line+1)+":"+(E.mark.column+1)+")",!T&&E.mark.snippet&&(e+=`

`+E.mark.snippet),R+" "+e):R}function YAMLException$1(E,T){Error.call(this),this.name="YAMLException",this.reason=E,this.mark=T,this.message=formatError(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}YAMLException$1.prototype=Object.create(Error.prototype);YAMLException$1.prototype.constructor=YAMLException$1;YAMLException$1.prototype.toString=function(T){return this.name+": "+formatError(this,T)};var exception=YAMLException$1;function getLine(E,T,e,R,A){var O="",S="",N=Math.floor(A/2)-1;return R-T>N&&(O=" ... ",T=R-N+O.length),e-R>N&&(S=" ...",e=R+N-S.length),{str:O+E.slice(T,e).replace(/\t/g,"→")+S,pos:R-T+O.length}}function padStart(E,T){return common.repeat(" ",T-E.length)+E}function makeSnippet(E,T){if(T=Object.create(T||null),!E.buffer)return null;T.maxLength||(T.maxLength=79),typeof T.indent!="number"&&(T.indent=1),typeof T.linesBefore!="number"&&(T.linesBefore=3),typeof T.linesAfter!="number"&&(T.linesAfter=2);for(var e=/\r?\n|\r|\0/g,R=[0],A=[],O,S=-1;O=e.exec(E.buffer);)A.push(O.index),R.push(O.index+O[0].length),E.position<=O.index&&S<0&&(S=R.length-2);S<0&&(S=R.length-1);var N="",n,I,r=Math.min(E.line+T.linesAfter,A.length).toString().length,t=T.maxLength-(T.indent+r+3);for(n=1;n<=T.linesBefore&&!(S-n<0);n++)I=getLine(E.buffer,R[S-n],A[S-n],E.position-(R[S]-R[S-n]),t),N=common.repeat(" ",T.indent)+padStart((E.line-n+1).toString(),r)+" | "+I.str+`
`+N;for(I=getLine(E.buffer,R[S],A[S],E.position,t),N+=common.repeat(" ",T.indent)+padStart((E.line+1).toString(),r)+" | "+I.str+`
`,N+=common.repeat("-",T.indent+r+3+I.pos)+`^
`,n=1;n<=T.linesAfter&&!(S+n>=A.length);n++)I=getLine(E.buffer,R[S+n],A[S+n],E.position-(R[S]-R[S+n]),t),N+=common.repeat(" ",T.indent)+padStart((E.line+n+1).toString(),r)+" | "+I.str+`
`;return N.replace(/\n$/,"")}var snippet=makeSnippet,TYPE_CONSTRUCTOR_OPTIONS=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],YAML_NODE_KINDS=["scalar","sequence","mapping"];function compileStyleAliases(E){var T={};return E!==null&&Object.keys(E).forEach(function(e){E[e].forEach(function(R){T[String(R)]=e})}),T}function Type$1(E,T){if(T=T||{},Object.keys(T).forEach(function(e){if(TYPE_CONSTRUCTOR_OPTIONS.indexOf(e)===-1)throw new exception('Unknown option "'+e+'" is met in definition of "'+E+'" YAML type.')}),this.options=T,this.tag=E,this.kind=T.kind||null,this.resolve=T.resolve||function(){return!0},this.construct=T.construct||function(e){return e},this.instanceOf=T.instanceOf||null,this.predicate=T.predicate||null,this.represent=T.represent||null,this.representName=T.representName||null,this.defaultStyle=T.defaultStyle||null,this.multi=T.multi||!1,this.styleAliases=compileStyleAliases(T.styleAliases||null),YAML_NODE_KINDS.indexOf(this.kind)===-1)throw new exception('Unknown kind "'+this.kind+'" is specified for "'+E+'" YAML type.')}var type=Type$1;function compileList(E,T){var e=[];return E[T].forEach(function(R){var A=e.length;e.forEach(function(O,S){O.tag===R.tag&&O.kind===R.kind&&O.multi===R.multi&&(A=S)}),e[A]=R}),e}function compileMap(){var E={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}},T,e;function R(A){A.multi?(E.multi[A.kind].push(A),E.multi.fallback.push(A)):E[A.kind][A.tag]=E.fallback[A.tag]=A}for(T=0,e=arguments.length;T<e;T+=1)arguments[T].forEach(R);return E}function Schema$1(E){return this.extend(E)}Schema$1.prototype.extend=function(T){var e=[],R=[];if(T instanceof type)R.push(T);else if(Array.isArray(T))R=R.concat(T);else if(T&&(Array.isArray(T.implicit)||Array.isArray(T.explicit)))T.implicit&&(e=e.concat(T.implicit)),T.explicit&&(R=R.concat(T.explicit));else throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");e.forEach(function(O){if(!(O instanceof type))throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(O.loadKind&&O.loadKind!=="scalar")throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(O.multi)throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")}),R.forEach(function(O){if(!(O instanceof type))throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.")});var A=Object.create(Schema$1.prototype);return A.implicit=(this.implicit||[]).concat(e),A.explicit=(this.explicit||[]).concat(R),A.compiledImplicit=compileList(A,"implicit"),A.compiledExplicit=compileList(A,"explicit"),A.compiledTypeMap=compileMap(A.compiledImplicit,A.compiledExplicit),A};var schema=Schema$1,str=new type("tag:yaml.org,2002:str",{kind:"scalar",construct:function(E){return E!==null?E:""}}),seq=new type("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(E){return E!==null?E:[]}}),map=new type("tag:yaml.org,2002:map",{kind:"mapping",construct:function(E){return E!==null?E:{}}}),failsafe=new schema({explicit:[str,seq,map]});function resolveYamlNull(E){if(E===null)return!0;var T=E.length;return T===1&&E==="~"||T===4&&(E==="null"||E==="Null"||E==="NULL")}function constructYamlNull(){return null}function isNull(E){return E===null}var _null=new type("tag:yaml.org,2002:null",{kind:"scalar",resolve:resolveYamlNull,construct:constructYamlNull,predicate:isNull,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"});function resolveYamlBoolean(E){if(E===null)return!1;var T=E.length;return T===4&&(E==="true"||E==="True"||E==="TRUE")||T===5&&(E==="false"||E==="False"||E==="FALSE")}function constructYamlBoolean(E){return E==="true"||E==="True"||E==="TRUE"}function isBoolean(E){return Object.prototype.toString.call(E)==="[object Boolean]"}var bool=new type("tag:yaml.org,2002:bool",{kind:"scalar",resolve:resolveYamlBoolean,construct:constructYamlBoolean,predicate:isBoolean,represent:{lowercase:function(E){return E?"true":"false"},uppercase:function(E){return E?"TRUE":"FALSE"},camelcase:function(E){return E?"True":"False"}},defaultStyle:"lowercase"});function isHexCode(E){return 48<=E&&E<=57||65<=E&&E<=70||97<=E&&E<=102}function isOctCode(E){return 48<=E&&E<=55}function isDecCode(E){return 48<=E&&E<=57}function resolveYamlInteger(E){if(E===null)return!1;var T=E.length,e=0,R=!1,A;if(!T)return!1;if(A=E[e],(A==="-"||A==="+")&&(A=E[++e]),A==="0"){if(e+1===T)return!0;if(A=E[++e],A==="b"){for(e++;e<T;e++)if(A=E[e],A!=="_"){if(A!=="0"&&A!=="1")return!1;R=!0}return R&&A!=="_"}if(A==="x"){for(e++;e<T;e++)if(A=E[e],A!=="_"){if(!isHexCode(E.charCodeAt(e)))return!1;R=!0}return R&&A!=="_"}if(A==="o"){for(e++;e<T;e++)if(A=E[e],A!=="_"){if(!isOctCode(E.charCodeAt(e)))return!1;R=!0}return R&&A!=="_"}}if(A==="_")return!1;for(;e<T;e++)if(A=E[e],A!=="_"){if(!isDecCode(E.charCodeAt(e)))return!1;R=!0}return!(!R||A==="_")}function constructYamlInteger(E){var T=E,e=1,R;if(T.indexOf("_")!==-1&&(T=T.replace(/_/g,"")),R=T[0],(R==="-"||R==="+")&&(R==="-"&&(e=-1),T=T.slice(1),R=T[0]),T==="0")return 0;if(R==="0"){if(T[1]==="b")return e*parseInt(T.slice(2),2);if(T[1]==="x")return e*parseInt(T.slice(2),16);if(T[1]==="o")return e*parseInt(T.slice(2),8)}return e*parseInt(T,10)}function isInteger(E){return Object.prototype.toString.call(E)==="[object Number]"&&E%1===0&&!common.isNegativeZero(E)}var int=new type("tag:yaml.org,2002:int",{kind:"scalar",resolve:resolveYamlInteger,construct:constructYamlInteger,predicate:isInteger,represent:{binary:function(E){return E>=0?"0b"+E.toString(2):"-0b"+E.toString(2).slice(1)},octal:function(E){return E>=0?"0o"+E.toString(8):"-0o"+E.toString(8).slice(1)},decimal:function(E){return E.toString(10)},hexadecimal:function(E){return E>=0?"0x"+E.toString(16).toUpperCase():"-0x"+E.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),YAML_FLOAT_PATTERN=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function resolveYamlFloat(E){return!(E===null||!YAML_FLOAT_PATTERN.test(E)||E[E.length-1]==="_")}function constructYamlFloat(E){var T,e;return T=E.replace(/_/g,"").toLowerCase(),e=T[0]==="-"?-1:1,"+-".indexOf(T[0])>=0&&(T=T.slice(1)),T===".inf"?e===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:T===".nan"?NaN:e*parseFloat(T,10)}var SCIENTIFIC_WITHOUT_DOT=/^[-+]?[0-9]+e/;function representYamlFloat(E,T){var e;if(isNaN(E))switch(T){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===E)switch(T){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===E)switch(T){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(common.isNegativeZero(E))return"-0.0";return e=E.toString(10),SCIENTIFIC_WITHOUT_DOT.test(e)?e.replace("e",".e"):e}function isFloat(E){return Object.prototype.toString.call(E)==="[object Number]"&&(E%1!==0||common.isNegativeZero(E))}var float=new type("tag:yaml.org,2002:float",{kind:"scalar",resolve:resolveYamlFloat,construct:constructYamlFloat,predicate:isFloat,represent:representYamlFloat,defaultStyle:"lowercase"}),json=failsafe.extend({implicit:[_null,bool,int,float]}),core=json,YAML_DATE_REGEXP=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),YAML_TIMESTAMP_REGEXP=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function resolveYamlTimestamp(E){return E===null?!1:YAML_DATE_REGEXP.exec(E)!==null||YAML_TIMESTAMP_REGEXP.exec(E)!==null}function constructYamlTimestamp(E){var T,e,R,A,O,S,N,n=0,I=null,r,t,s;if(T=YAML_DATE_REGEXP.exec(E),T===null&&(T=YAML_TIMESTAMP_REGEXP.exec(E)),T===null)throw new Error("Date resolve error");if(e=+T[1],R=+T[2]-1,A=+T[3],!T[4])return new Date(Date.UTC(e,R,A));if(O=+T[4],S=+T[5],N=+T[6],T[7]){for(n=T[7].slice(0,3);n.length<3;)n+="0";n=+n}return T[9]&&(r=+T[10],t=+(T[11]||0),I=(r*60+t)*6e4,T[9]==="-"&&(I=-I)),s=new Date(Date.UTC(e,R,A,O,S,N,n)),I&&s.setTime(s.getTime()-I),s}function representYamlTimestamp(E){return E.toISOString()}var timestamp=new type("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:resolveYamlTimestamp,construct:constructYamlTimestamp,instanceOf:Date,represent:representYamlTimestamp});function resolveYamlMerge(E){return E==="<<"||E===null}var merge=new type("tag:yaml.org,2002:merge",{kind:"scalar",resolve:resolveYamlMerge}),BASE64_MAP=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function resolveYamlBinary(E){if(E===null)return!1;var T,e,R=0,A=E.length,O=BASE64_MAP;for(e=0;e<A;e++)if(T=O.indexOf(E.charAt(e)),!(T>64)){if(T<0)return!1;R+=6}return R%8===0}function constructYamlBinary(E){var T,e,R=E.replace(/[\r\n=]/g,""),A=R.length,O=BASE64_MAP,S=0,N=[];for(T=0;T<A;T++)T%4===0&&T&&(N.push(S>>16&255),N.push(S>>8&255),N.push(S&255)),S=S<<6|O.indexOf(R.charAt(T));return e=A%4*6,e===0?(N.push(S>>16&255),N.push(S>>8&255),N.push(S&255)):e===18?(N.push(S>>10&255),N.push(S>>2&255)):e===12&&N.push(S>>4&255),new Uint8Array(N)}function representYamlBinary(E){var T="",e=0,R,A,O=E.length,S=BASE64_MAP;for(R=0;R<O;R++)R%3===0&&R&&(T+=S[e>>18&63],T+=S[e>>12&63],T+=S[e>>6&63],T+=S[e&63]),e=(e<<8)+E[R];return A=O%3,A===0?(T+=S[e>>18&63],T+=S[e>>12&63],T+=S[e>>6&63],T+=S[e&63]):A===2?(T+=S[e>>10&63],T+=S[e>>4&63],T+=S[e<<2&63],T+=S[64]):A===1&&(T+=S[e>>2&63],T+=S[e<<4&63],T+=S[64],T+=S[64]),T}function isBinary(E){return Object.prototype.toString.call(E)==="[object Uint8Array]"}var binary=new type("tag:yaml.org,2002:binary",{kind:"scalar",resolve:resolveYamlBinary,construct:constructYamlBinary,predicate:isBinary,represent:representYamlBinary}),_hasOwnProperty$3=Object.prototype.hasOwnProperty,_toString$2=Object.prototype.toString;function resolveYamlOmap(E){if(E===null)return!0;var T=[],e,R,A,O,S,N=E;for(e=0,R=N.length;e<R;e+=1){if(A=N[e],S=!1,_toString$2.call(A)!=="[object Object]")return!1;for(O in A)if(_hasOwnProperty$3.call(A,O))if(!S)S=!0;else return!1;if(!S)return!1;if(T.indexOf(O)===-1)T.push(O);else return!1}return!0}function constructYamlOmap(E){return E!==null?E:[]}var omap=new type("tag:yaml.org,2002:omap",{kind:"sequence",resolve:resolveYamlOmap,construct:constructYamlOmap}),_toString$1=Object.prototype.toString;function resolveYamlPairs(E){if(E===null)return!0;var T,e,R,A,O,S=E;for(O=new Array(S.length),T=0,e=S.length;T<e;T+=1){if(R=S[T],_toString$1.call(R)!=="[object Object]"||(A=Object.keys(R),A.length!==1))return!1;O[T]=[A[0],R[A[0]]]}return!0}function constructYamlPairs(E){if(E===null)return[];var T,e,R,A,O,S=E;for(O=new Array(S.length),T=0,e=S.length;T<e;T+=1)R=S[T],A=Object.keys(R),O[T]=[A[0],R[A[0]]];return O}var pairs=new type("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:resolveYamlPairs,construct:constructYamlPairs}),_hasOwnProperty$2=Object.prototype.hasOwnProperty;function resolveYamlSet(E){if(E===null)return!0;var T,e=E;for(T in e)if(_hasOwnProperty$2.call(e,T)&&e[T]!==null)return!1;return!0}function constructYamlSet(E){return E!==null?E:{}}var set=new type("tag:yaml.org,2002:set",{kind:"mapping",resolve:resolveYamlSet,construct:constructYamlSet}),_default=core.extend({implicit:[timestamp,merge],explicit:[binary,omap,pairs,set]}),_hasOwnProperty$1=Object.prototype.hasOwnProperty,CONTEXT_FLOW_IN=1,CONTEXT_FLOW_OUT=2,CONTEXT_BLOCK_IN=3,CONTEXT_BLOCK_OUT=4,CHOMPING_CLIP=1,CHOMPING_STRIP=2,CHOMPING_KEEP=3,PATTERN_NON_PRINTABLE=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,PATTERN_NON_ASCII_LINE_BREAKS=/[\x85\u2028\u2029]/,PATTERN_FLOW_INDICATORS=/[,\[\]\{\}]/,PATTERN_TAG_HANDLE=/^(?:!|!!|![a-z\-]+!)$/i,PATTERN_TAG_URI=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function _class(E){return Object.prototype.toString.call(E)}function is_EOL(E){return E===10||E===13}function is_WHITE_SPACE(E){return E===9||E===32}function is_WS_OR_EOL(E){return E===9||E===32||E===10||E===13}function is_FLOW_INDICATOR(E){return E===44||E===91||E===93||E===123||E===125}function fromHexCode(E){var T;return 48<=E&&E<=57?E-48:(T=E|32,97<=T&&T<=102?T-97+10:-1)}function escapedHexLen(E){return E===120?2:E===117?4:E===85?8:0}function fromDecimalCode(E){return 48<=E&&E<=57?E-48:-1}function simpleEscapeSequence(E){return E===48?"\0":E===97?"\x07":E===98?"\b":E===116||E===9?"	":E===110?`
`:E===118?"\v":E===102?"\f":E===114?"\r":E===101?"\x1B":E===32?" ":E===34?'"':E===47?"/":E===92?"\\":E===78?"":E===95?" ":E===76?"\u2028":E===80?"\u2029":""}function charFromCodepoint(E){return E<=65535?String.fromCharCode(E):String.fromCharCode((E-65536>>10)+55296,(E-65536&1023)+56320)}var simpleEscapeCheck=new Array(256),simpleEscapeMap=new Array(256);for(var i=0;i<256;i++)simpleEscapeCheck[i]=simpleEscapeSequence(i)?1:0,simpleEscapeMap[i]=simpleEscapeSequence(i);function State$1(E,T){this.input=E,this.filename=T.filename||null,this.schema=T.schema||_default,this.onWarning=T.onWarning||null,this.legacy=T.legacy||!1,this.json=T.json||!1,this.listener=T.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=E.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function generateError(E,T){var e={name:E.filename,buffer:E.input.slice(0,-1),position:E.position,line:E.line,column:E.position-E.lineStart};return e.snippet=snippet(e),new exception(T,e)}function throwError(E,T){throw generateError(E,T)}function throwWarning(E,T){E.onWarning&&E.onWarning.call(null,generateError(E,T))}var directiveHandlers={YAML:function(T,e,R){var A,O,S;T.version!==null&&throwError(T,"duplication of %YAML directive"),R.length!==1&&throwError(T,"YAML directive accepts exactly one argument"),A=/^([0-9]+)\.([0-9]+)$/.exec(R[0]),A===null&&throwError(T,"ill-formed argument of the YAML directive"),O=parseInt(A[1],10),S=parseInt(A[2],10),O!==1&&throwError(T,"unacceptable YAML version of the document"),T.version=R[0],T.checkLineBreaks=S<2,S!==1&&S!==2&&throwWarning(T,"unsupported YAML version of the document")},TAG:function(T,e,R){var A,O;R.length!==2&&throwError(T,"TAG directive accepts exactly two arguments"),A=R[0],O=R[1],PATTERN_TAG_HANDLE.test(A)||throwError(T,"ill-formed tag handle (first argument) of the TAG directive"),_hasOwnProperty$1.call(T.tagMap,A)&&throwError(T,'there is a previously declared suffix for "'+A+'" tag handle'),PATTERN_TAG_URI.test(O)||throwError(T,"ill-formed tag prefix (second argument) of the TAG directive");try{O=decodeURIComponent(O)}catch{throwError(T,"tag prefix is malformed: "+O)}T.tagMap[A]=O}};function captureSegment(E,T,e,R){var A,O,S,N;if(T<e){if(N=E.input.slice(T,e),R)for(A=0,O=N.length;A<O;A+=1)S=N.charCodeAt(A),S===9||32<=S&&S<=1114111||throwError(E,"expected valid JSON character");else PATTERN_NON_PRINTABLE.test(N)&&throwError(E,"the stream contains non-printable characters");E.result+=N}}function mergeMappings(E,T,e,R){var A,O,S,N;for(common.isObject(e)||throwError(E,"cannot merge mappings; the provided source object is unacceptable"),A=Object.keys(e),S=0,N=A.length;S<N;S+=1)O=A[S],_hasOwnProperty$1.call(T,O)||(T[O]=e[O],R[O]=!0)}function storeMappingPair(E,T,e,R,A,O,S,N,n){var I,r;if(Array.isArray(A))for(A=Array.prototype.slice.call(A),I=0,r=A.length;I<r;I+=1)Array.isArray(A[I])&&throwError(E,"nested arrays are not supported inside keys"),typeof A=="object"&&_class(A[I])==="[object Object]"&&(A[I]="[object Object]");if(typeof A=="object"&&_class(A)==="[object Object]"&&(A="[object Object]"),A=String(A),T===null&&(T={}),R==="tag:yaml.org,2002:merge")if(Array.isArray(O))for(I=0,r=O.length;I<r;I+=1)mergeMappings(E,T,O[I],e);else mergeMappings(E,T,O,e);else!E.json&&!_hasOwnProperty$1.call(e,A)&&_hasOwnProperty$1.call(T,A)&&(E.line=S||E.line,E.lineStart=N||E.lineStart,E.position=n||E.position,throwError(E,"duplicated mapping key")),A==="__proto__"?Object.defineProperty(T,A,{configurable:!0,enumerable:!0,writable:!0,value:O}):T[A]=O,delete e[A];return T}function readLineBreak(E){var T;T=E.input.charCodeAt(E.position),T===10?E.position++:T===13?(E.position++,E.input.charCodeAt(E.position)===10&&E.position++):throwError(E,"a line break is expected"),E.line+=1,E.lineStart=E.position,E.firstTabInLine=-1}function skipSeparationSpace(E,T,e){for(var R=0,A=E.input.charCodeAt(E.position);A!==0;){for(;is_WHITE_SPACE(A);)A===9&&E.firstTabInLine===-1&&(E.firstTabInLine=E.position),A=E.input.charCodeAt(++E.position);if(T&&A===35)do A=E.input.charCodeAt(++E.position);while(A!==10&&A!==13&&A!==0);if(is_EOL(A))for(readLineBreak(E),A=E.input.charCodeAt(E.position),R++,E.lineIndent=0;A===32;)E.lineIndent++,A=E.input.charCodeAt(++E.position);else break}return e!==-1&&R!==0&&E.lineIndent<e&&throwWarning(E,"deficient indentation"),R}function testDocumentSeparator(E){var T=E.position,e;return e=E.input.charCodeAt(T),!!((e===45||e===46)&&e===E.input.charCodeAt(T+1)&&e===E.input.charCodeAt(T+2)&&(T+=3,e=E.input.charCodeAt(T),e===0||is_WS_OR_EOL(e)))}function writeFoldedLines(E,T){T===1?E.result+=" ":T>1&&(E.result+=common.repeat(`
`,T-1))}function readPlainScalar(E,T,e){var R,A,O,S,N,n,I,r,t=E.kind,s=E.result,L;if(L=E.input.charCodeAt(E.position),is_WS_OR_EOL(L)||is_FLOW_INDICATOR(L)||L===35||L===38||L===42||L===33||L===124||L===62||L===39||L===34||L===37||L===64||L===96||(L===63||L===45)&&(A=E.input.charCodeAt(E.position+1),is_WS_OR_EOL(A)||e&&is_FLOW_INDICATOR(A)))return!1;for(E.kind="scalar",E.result="",O=S=E.position,N=!1;L!==0;){if(L===58){if(A=E.input.charCodeAt(E.position+1),is_WS_OR_EOL(A)||e&&is_FLOW_INDICATOR(A))break}else if(L===35){if(R=E.input.charCodeAt(E.position-1),is_WS_OR_EOL(R))break}else{if(E.position===E.lineStart&&testDocumentSeparator(E)||e&&is_FLOW_INDICATOR(L))break;if(is_EOL(L))if(n=E.line,I=E.lineStart,r=E.lineIndent,skipSeparationSpace(E,!1,-1),E.lineIndent>=T){N=!0,L=E.input.charCodeAt(E.position);continue}else{E.position=S,E.line=n,E.lineStart=I,E.lineIndent=r;break}}N&&(captureSegment(E,O,S,!1),writeFoldedLines(E,E.line-n),O=S=E.position,N=!1),is_WHITE_SPACE(L)||(S=E.position+1),L=E.input.charCodeAt(++E.position)}return captureSegment(E,O,S,!1),E.result?!0:(E.kind=t,E.result=s,!1)}function readSingleQuotedScalar(E,T){var e,R,A;if(e=E.input.charCodeAt(E.position),e!==39)return!1;for(E.kind="scalar",E.result="",E.position++,R=A=E.position;(e=E.input.charCodeAt(E.position))!==0;)if(e===39)if(captureSegment(E,R,E.position,!0),e=E.input.charCodeAt(++E.position),e===39)R=E.position,E.position++,A=E.position;else return!0;else is_EOL(e)?(captureSegment(E,R,A,!0),writeFoldedLines(E,skipSeparationSpace(E,!1,T)),R=A=E.position):E.position===E.lineStart&&testDocumentSeparator(E)?throwError(E,"unexpected end of the document within a single quoted scalar"):(E.position++,A=E.position);throwError(E,"unexpected end of the stream within a single quoted scalar")}function readDoubleQuotedScalar(E,T){var e,R,A,O,S,N;if(N=E.input.charCodeAt(E.position),N!==34)return!1;for(E.kind="scalar",E.result="",E.position++,e=R=E.position;(N=E.input.charCodeAt(E.position))!==0;){if(N===34)return captureSegment(E,e,E.position,!0),E.position++,!0;if(N===92){if(captureSegment(E,e,E.position,!0),N=E.input.charCodeAt(++E.position),is_EOL(N))skipSeparationSpace(E,!1,T);else if(N<256&&simpleEscapeCheck[N])E.result+=simpleEscapeMap[N],E.position++;else if((S=escapedHexLen(N))>0){for(A=S,O=0;A>0;A--)N=E.input.charCodeAt(++E.position),(S=fromHexCode(N))>=0?O=(O<<4)+S:throwError(E,"expected hexadecimal character");E.result+=charFromCodepoint(O),E.position++}else throwError(E,"unknown escape sequence");e=R=E.position}else is_EOL(N)?(captureSegment(E,e,R,!0),writeFoldedLines(E,skipSeparationSpace(E,!1,T)),e=R=E.position):E.position===E.lineStart&&testDocumentSeparator(E)?throwError(E,"unexpected end of the document within a double quoted scalar"):(E.position++,R=E.position)}throwError(E,"unexpected end of the stream within a double quoted scalar")}function readFlowCollection(E,T){var e=!0,R,A,O,S=E.tag,N,n=E.anchor,I,r,t,s,L,o=Object.create(null),P,c,m,U;if(U=E.input.charCodeAt(E.position),U===91)r=93,L=!1,N=[];else if(U===123)r=125,L=!0,N={};else return!1;for(E.anchor!==null&&(E.anchorMap[E.anchor]=N),U=E.input.charCodeAt(++E.position);U!==0;){if(skipSeparationSpace(E,!0,T),U=E.input.charCodeAt(E.position),U===r)return E.position++,E.tag=S,E.anchor=n,E.kind=L?"mapping":"sequence",E.result=N,!0;e?U===44&&throwError(E,"expected the node content, but found ','"):throwError(E,"missed comma between flow collection entries"),c=P=m=null,t=s=!1,U===63&&(I=E.input.charCodeAt(E.position+1),is_WS_OR_EOL(I)&&(t=s=!0,E.position++,skipSeparationSpace(E,!0,T))),R=E.line,A=E.lineStart,O=E.position,composeNode(E,T,CONTEXT_FLOW_IN,!1,!0),c=E.tag,P=E.result,skipSeparationSpace(E,!0,T),U=E.input.charCodeAt(E.position),(s||E.line===R)&&U===58&&(t=!0,U=E.input.charCodeAt(++E.position),skipSeparationSpace(E,!0,T),composeNode(E,T,CONTEXT_FLOW_IN,!1,!0),m=E.result),L?storeMappingPair(E,N,o,c,P,m,R,A,O):t?N.push(storeMappingPair(E,null,o,c,P,m,R,A,O)):N.push(P),skipSeparationSpace(E,!0,T),U=E.input.charCodeAt(E.position),U===44?(e=!0,U=E.input.charCodeAt(++E.position)):e=!1}throwError(E,"unexpected end of the stream within a flow collection")}function readBlockScalar(E,T){var e,R,A=CHOMPING_CLIP,O=!1,S=!1,N=T,n=0,I=!1,r,t;if(t=E.input.charCodeAt(E.position),t===124)R=!1;else if(t===62)R=!0;else return!1;for(E.kind="scalar",E.result="";t!==0;)if(t=E.input.charCodeAt(++E.position),t===43||t===45)CHOMPING_CLIP===A?A=t===43?CHOMPING_KEEP:CHOMPING_STRIP:throwError(E,"repeat of a chomping mode identifier");else if((r=fromDecimalCode(t))>=0)r===0?throwError(E,"bad explicit indentation width of a block scalar; it cannot be less than one"):S?throwError(E,"repeat of an indentation width identifier"):(N=T+r-1,S=!0);else break;if(is_WHITE_SPACE(t)){do t=E.input.charCodeAt(++E.position);while(is_WHITE_SPACE(t));if(t===35)do t=E.input.charCodeAt(++E.position);while(!is_EOL(t)&&t!==0)}for(;t!==0;){for(readLineBreak(E),E.lineIndent=0,t=E.input.charCodeAt(E.position);(!S||E.lineIndent<N)&&t===32;)E.lineIndent++,t=E.input.charCodeAt(++E.position);if(!S&&E.lineIndent>N&&(N=E.lineIndent),is_EOL(t)){n++;continue}if(E.lineIndent<N){A===CHOMPING_KEEP?E.result+=common.repeat(`
`,O?1+n:n):A===CHOMPING_CLIP&&O&&(E.result+=`
`);break}for(R?is_WHITE_SPACE(t)?(I=!0,E.result+=common.repeat(`
`,O?1+n:n)):I?(I=!1,E.result+=common.repeat(`
`,n+1)):n===0?O&&(E.result+=" "):E.result+=common.repeat(`
`,n):E.result+=common.repeat(`
`,O?1+n:n),O=!0,S=!0,n=0,e=E.position;!is_EOL(t)&&t!==0;)t=E.input.charCodeAt(++E.position);captureSegment(E,e,E.position,!1)}return!0}function readBlockSequence(E,T){var e,R=E.tag,A=E.anchor,O=[],S,N=!1,n;if(E.firstTabInLine!==-1)return!1;for(E.anchor!==null&&(E.anchorMap[E.anchor]=O),n=E.input.charCodeAt(E.position);n!==0&&(E.firstTabInLine!==-1&&(E.position=E.firstTabInLine,throwError(E,"tab characters must not be used in indentation")),!(n!==45||(S=E.input.charCodeAt(E.position+1),!is_WS_OR_EOL(S))));){if(N=!0,E.position++,skipSeparationSpace(E,!0,-1)&&E.lineIndent<=T){O.push(null),n=E.input.charCodeAt(E.position);continue}if(e=E.line,composeNode(E,T,CONTEXT_BLOCK_IN,!1,!0),O.push(E.result),skipSeparationSpace(E,!0,-1),n=E.input.charCodeAt(E.position),(E.line===e||E.lineIndent>T)&&n!==0)throwError(E,"bad indentation of a sequence entry");else if(E.lineIndent<T)break}return N?(E.tag=R,E.anchor=A,E.kind="sequence",E.result=O,!0):!1}function readBlockMapping(E,T,e){var R,A,O,S,N,n,I=E.tag,r=E.anchor,t={},s=Object.create(null),L=null,o=null,P=null,c=!1,m=!1,U;if(E.firstTabInLine!==-1)return!1;for(E.anchor!==null&&(E.anchorMap[E.anchor]=t),U=E.input.charCodeAt(E.position);U!==0;){if(!c&&E.firstTabInLine!==-1&&(E.position=E.firstTabInLine,throwError(E,"tab characters must not be used in indentation")),R=E.input.charCodeAt(E.position+1),O=E.line,(U===63||U===58)&&is_WS_OR_EOL(R))U===63?(c&&(storeMappingPair(E,t,s,L,o,null,S,N,n),L=o=P=null),m=!0,c=!0,A=!0):c?(c=!1,A=!0):throwError(E,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),E.position+=1,U=R;else{if(S=E.line,N=E.lineStart,n=E.position,!composeNode(E,e,CONTEXT_FLOW_OUT,!1,!0))break;if(E.line===O){for(U=E.input.charCodeAt(E.position);is_WHITE_SPACE(U);)U=E.input.charCodeAt(++E.position);if(U===58)U=E.input.charCodeAt(++E.position),is_WS_OR_EOL(U)||throwError(E,"a whitespace character is expected after the key-value separator within a block mapping"),c&&(storeMappingPair(E,t,s,L,o,null,S,N,n),L=o=P=null),m=!0,c=!1,A=!1,L=E.tag,o=E.result;else if(m)throwError(E,"can not read an implicit mapping pair; a colon is missed");else return E.tag=I,E.anchor=r,!0}else if(m)throwError(E,"can not read a block mapping entry; a multiline key may not be an implicit key");else return E.tag=I,E.anchor=r,!0}if((E.line===O||E.lineIndent>T)&&(c&&(S=E.line,N=E.lineStart,n=E.position),composeNode(E,T,CONTEXT_BLOCK_OUT,!0,A)&&(c?o=E.result:P=E.result),c||(storeMappingPair(E,t,s,L,o,P,S,N,n),L=o=P=null),skipSeparationSpace(E,!0,-1),U=E.input.charCodeAt(E.position)),(E.line===O||E.lineIndent>T)&&U!==0)throwError(E,"bad indentation of a mapping entry");else if(E.lineIndent<T)break}return c&&storeMappingPair(E,t,s,L,o,null,S,N,n),m&&(E.tag=I,E.anchor=r,E.kind="mapping",E.result=t),m}function readTagProperty(E){var T,e=!1,R=!1,A,O,S;if(S=E.input.charCodeAt(E.position),S!==33)return!1;if(E.tag!==null&&throwError(E,"duplication of a tag property"),S=E.input.charCodeAt(++E.position),S===60?(e=!0,S=E.input.charCodeAt(++E.position)):S===33?(R=!0,A="!!",S=E.input.charCodeAt(++E.position)):A="!",T=E.position,e){do S=E.input.charCodeAt(++E.position);while(S!==0&&S!==62);E.position<E.length?(O=E.input.slice(T,E.position),S=E.input.charCodeAt(++E.position)):throwError(E,"unexpected end of the stream within a verbatim tag")}else{for(;S!==0&&!is_WS_OR_EOL(S);)S===33&&(R?throwError(E,"tag suffix cannot contain exclamation marks"):(A=E.input.slice(T-1,E.position+1),PATTERN_TAG_HANDLE.test(A)||throwError(E,"named tag handle cannot contain such characters"),R=!0,T=E.position+1)),S=E.input.charCodeAt(++E.position);O=E.input.slice(T,E.position),PATTERN_FLOW_INDICATORS.test(O)&&throwError(E,"tag suffix cannot contain flow indicator characters")}O&&!PATTERN_TAG_URI.test(O)&&throwError(E,"tag name cannot contain such characters: "+O);try{O=decodeURIComponent(O)}catch{throwError(E,"tag name is malformed: "+O)}return e?E.tag=O:_hasOwnProperty$1.call(E.tagMap,A)?E.tag=E.tagMap[A]+O:A==="!"?E.tag="!"+O:A==="!!"?E.tag="tag:yaml.org,2002:"+O:throwError(E,'undeclared tag handle "'+A+'"'),!0}function readAnchorProperty(E){var T,e;if(e=E.input.charCodeAt(E.position),e!==38)return!1;for(E.anchor!==null&&throwError(E,"duplication of an anchor property"),e=E.input.charCodeAt(++E.position),T=E.position;e!==0&&!is_WS_OR_EOL(e)&&!is_FLOW_INDICATOR(e);)e=E.input.charCodeAt(++E.position);return E.position===T&&throwError(E,"name of an anchor node must contain at least one character"),E.anchor=E.input.slice(T,E.position),!0}function readAlias(E){var T,e,R;if(R=E.input.charCodeAt(E.position),R!==42)return!1;for(R=E.input.charCodeAt(++E.position),T=E.position;R!==0&&!is_WS_OR_EOL(R)&&!is_FLOW_INDICATOR(R);)R=E.input.charCodeAt(++E.position);return E.position===T&&throwError(E,"name of an alias node must contain at least one character"),e=E.input.slice(T,E.position),_hasOwnProperty$1.call(E.anchorMap,e)||throwError(E,'unidentified alias "'+e+'"'),E.result=E.anchorMap[e],skipSeparationSpace(E,!0,-1),!0}function composeNode(E,T,e,R,A){var O,S,N,n=1,I=!1,r=!1,t,s,L,o,P,c;if(E.listener!==null&&E.listener("open",E),E.tag=null,E.anchor=null,E.kind=null,E.result=null,O=S=N=CONTEXT_BLOCK_OUT===e||CONTEXT_BLOCK_IN===e,R&&skipSeparationSpace(E,!0,-1)&&(I=!0,E.lineIndent>T?n=1:E.lineIndent===T?n=0:E.lineIndent<T&&(n=-1)),n===1)for(;readTagProperty(E)||readAnchorProperty(E);)skipSeparationSpace(E,!0,-1)?(I=!0,N=O,E.lineIndent>T?n=1:E.lineIndent===T?n=0:E.lineIndent<T&&(n=-1)):N=!1;if(N&&(N=I||A),(n===1||CONTEXT_BLOCK_OUT===e)&&(CONTEXT_FLOW_IN===e||CONTEXT_FLOW_OUT===e?P=T:P=T+1,c=E.position-E.lineStart,n===1?N&&(readBlockSequence(E,c)||readBlockMapping(E,c,P))||readFlowCollection(E,P)?r=!0:(S&&readBlockScalar(E,P)||readSingleQuotedScalar(E,P)||readDoubleQuotedScalar(E,P)?r=!0:readAlias(E)?(r=!0,(E.tag!==null||E.anchor!==null)&&throwError(E,"alias node should not have any properties")):readPlainScalar(E,P,CONTEXT_FLOW_IN===e)&&(r=!0,E.tag===null&&(E.tag="?")),E.anchor!==null&&(E.anchorMap[E.anchor]=E.result)):n===0&&(r=N&&readBlockSequence(E,c))),E.tag===null)E.anchor!==null&&(E.anchorMap[E.anchor]=E.result);else if(E.tag==="?"){for(E.result!==null&&E.kind!=="scalar"&&throwError(E,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+E.kind+'"'),t=0,s=E.implicitTypes.length;t<s;t+=1)if(o=E.implicitTypes[t],o.resolve(E.result)){E.result=o.construct(E.result),E.tag=o.tag,E.anchor!==null&&(E.anchorMap[E.anchor]=E.result);break}}else if(E.tag!=="!"){if(_hasOwnProperty$1.call(E.typeMap[E.kind||"fallback"],E.tag))o=E.typeMap[E.kind||"fallback"][E.tag];else for(o=null,L=E.typeMap.multi[E.kind||"fallback"],t=0,s=L.length;t<s;t+=1)if(E.tag.slice(0,L[t].tag.length)===L[t].tag){o=L[t];break}o||throwError(E,"unknown tag !<"+E.tag+">"),E.result!==null&&o.kind!==E.kind&&throwError(E,"unacceptable node kind for !<"+E.tag+'> tag; it should be "'+o.kind+'", not "'+E.kind+'"'),o.resolve(E.result,E.tag)?(E.result=o.construct(E.result,E.tag),E.anchor!==null&&(E.anchorMap[E.anchor]=E.result)):throwError(E,"cannot resolve a node with !<"+E.tag+"> explicit tag")}return E.listener!==null&&E.listener("close",E),E.tag!==null||E.anchor!==null||r}function readDocument(E){var T=E.position,e,R,A,O=!1,S;for(E.version=null,E.checkLineBreaks=E.legacy,E.tagMap=Object.create(null),E.anchorMap=Object.create(null);(S=E.input.charCodeAt(E.position))!==0&&(skipSeparationSpace(E,!0,-1),S=E.input.charCodeAt(E.position),!(E.lineIndent>0||S!==37));){for(O=!0,S=E.input.charCodeAt(++E.position),e=E.position;S!==0&&!is_WS_OR_EOL(S);)S=E.input.charCodeAt(++E.position);for(R=E.input.slice(e,E.position),A=[],R.length<1&&throwError(E,"directive name must not be less than one character in length");S!==0;){for(;is_WHITE_SPACE(S);)S=E.input.charCodeAt(++E.position);if(S===35){do S=E.input.charCodeAt(++E.position);while(S!==0&&!is_EOL(S));break}if(is_EOL(S))break;for(e=E.position;S!==0&&!is_WS_OR_EOL(S);)S=E.input.charCodeAt(++E.position);A.push(E.input.slice(e,E.position))}S!==0&&readLineBreak(E),_hasOwnProperty$1.call(directiveHandlers,R)?directiveHandlers[R](E,R,A):throwWarning(E,'unknown document directive "'+R+'"')}if(skipSeparationSpace(E,!0,-1),E.lineIndent===0&&E.input.charCodeAt(E.position)===45&&E.input.charCodeAt(E.position+1)===45&&E.input.charCodeAt(E.position+2)===45?(E.position+=3,skipSeparationSpace(E,!0,-1)):O&&throwError(E,"directives end mark is expected"),composeNode(E,E.lineIndent-1,CONTEXT_BLOCK_OUT,!1,!0),skipSeparationSpace(E,!0,-1),E.checkLineBreaks&&PATTERN_NON_ASCII_LINE_BREAKS.test(E.input.slice(T,E.position))&&throwWarning(E,"non-ASCII line breaks are interpreted as content"),E.documents.push(E.result),E.position===E.lineStart&&testDocumentSeparator(E)){E.input.charCodeAt(E.position)===46&&(E.position+=3,skipSeparationSpace(E,!0,-1));return}if(E.position<E.length-1)throwError(E,"end of the stream or a document separator is expected");else return}function loadDocuments(E,T){E=String(E),T=T||{},E.length!==0&&(E.charCodeAt(E.length-1)!==10&&E.charCodeAt(E.length-1)!==13&&(E+=`
`),E.charCodeAt(0)===65279&&(E=E.slice(1)));var e=new State$1(E,T),R=E.indexOf("\0");for(R!==-1&&(e.position=R,throwError(e,"null byte is not allowed in input")),e.input+="\0";e.input.charCodeAt(e.position)===32;)e.lineIndent+=1,e.position+=1;for(;e.position<e.length-1;)readDocument(e);return e.documents}function loadAll$1(E,T,e){T!==null&&typeof T=="object"&&typeof e>"u"&&(e=T,T=null);var R=loadDocuments(E,e);if(typeof T!="function")return R;for(var A=0,O=R.length;A<O;A+=1)T(R[A])}function load$1(E,T){var e=loadDocuments(E,T);if(e.length!==0){if(e.length===1)return e[0];throw new exception("expected a single document in the stream, but found more")}}var loadAll_1=loadAll$1,load_1=load$1,loader={loadAll:loadAll_1,load:load_1},_toString=Object.prototype.toString,_hasOwnProperty=Object.prototype.hasOwnProperty,CHAR_BOM=65279,CHAR_TAB=9,CHAR_LINE_FEED=10,CHAR_CARRIAGE_RETURN=13,CHAR_SPACE=32,CHAR_EXCLAMATION=33,CHAR_DOUBLE_QUOTE=34,CHAR_SHARP=35,CHAR_PERCENT=37,CHAR_AMPERSAND=38,CHAR_SINGLE_QUOTE=39,CHAR_ASTERISK=42,CHAR_COMMA=44,CHAR_MINUS=45,CHAR_COLON=58,CHAR_EQUALS=61,CHAR_GREATER_THAN=62,CHAR_QUESTION=63,CHAR_COMMERCIAL_AT=64,CHAR_LEFT_SQUARE_BRACKET=91,CHAR_RIGHT_SQUARE_BRACKET=93,CHAR_GRAVE_ACCENT=96,CHAR_LEFT_CURLY_BRACKET=123,CHAR_VERTICAL_LINE=124,CHAR_RIGHT_CURLY_BRACKET=125,ESCAPE_SEQUENCES={};ESCAPE_SEQUENCES[0]="\\0";ESCAPE_SEQUENCES[7]="\\a";ESCAPE_SEQUENCES[8]="\\b";ESCAPE_SEQUENCES[9]="\\t";ESCAPE_SEQUENCES[10]="\\n";ESCAPE_SEQUENCES[11]="\\v";ESCAPE_SEQUENCES[12]="\\f";ESCAPE_SEQUENCES[13]="\\r";ESCAPE_SEQUENCES[27]="\\e";ESCAPE_SEQUENCES[34]='\\"';ESCAPE_SEQUENCES[92]="\\\\";ESCAPE_SEQUENCES[133]="\\N";ESCAPE_SEQUENCES[160]="\\_";ESCAPE_SEQUENCES[8232]="\\L";ESCAPE_SEQUENCES[8233]="\\P";var DEPRECATED_BOOLEANS_SYNTAX=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],DEPRECATED_BASE60_SYNTAX=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function compileStyleMap(E,T){var e,R,A,O,S,N,n;if(T===null)return{};for(e={},R=Object.keys(T),A=0,O=R.length;A<O;A+=1)S=R[A],N=String(T[S]),S.slice(0,2)==="!!"&&(S="tag:yaml.org,2002:"+S.slice(2)),n=E.compiledTypeMap.fallback[S],n&&_hasOwnProperty.call(n.styleAliases,N)&&(N=n.styleAliases[N]),e[S]=N;return e}function encodeHex(E){var T,e,R;if(T=E.toString(16).toUpperCase(),E<=255)e="x",R=2;else if(E<=65535)e="u",R=4;else if(E<=4294967295)e="U",R=8;else throw new exception("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+e+common.repeat("0",R-T.length)+T}var QUOTING_TYPE_SINGLE=1,QUOTING_TYPE_DOUBLE=2;function State(E){this.schema=E.schema||_default,this.indent=Math.max(1,E.indent||2),this.noArrayIndent=E.noArrayIndent||!1,this.skipInvalid=E.skipInvalid||!1,this.flowLevel=common.isNothing(E.flowLevel)?-1:E.flowLevel,this.styleMap=compileStyleMap(this.schema,E.styles||null),this.sortKeys=E.sortKeys||!1,this.lineWidth=E.lineWidth||80,this.noRefs=E.noRefs||!1,this.noCompatMode=E.noCompatMode||!1,this.condenseFlow=E.condenseFlow||!1,this.quotingType=E.quotingType==='"'?QUOTING_TYPE_DOUBLE:QUOTING_TYPE_SINGLE,this.forceQuotes=E.forceQuotes||!1,this.replacer=typeof E.replacer=="function"?E.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function indentString$1(E,T){for(var e=common.repeat(" ",T),R=0,A=-1,O="",S,N=E.length;R<N;)A=E.indexOf(`
`,R),A===-1?(S=E.slice(R),R=N):(S=E.slice(R,A+1),R=A+1),S.length&&S!==`
`&&(O+=e),O+=S;return O}function generateNextLine(E,T){return`
`+common.repeat(" ",E.indent*T)}function testImplicitResolving(E,T){var e,R,A;for(e=0,R=E.implicitTypes.length;e<R;e+=1)if(A=E.implicitTypes[e],A.resolve(T))return!0;return!1}function isWhitespace(E){return E===CHAR_SPACE||E===CHAR_TAB}function isPrintable(E){return 32<=E&&E<=126||161<=E&&E<=55295&&E!==8232&&E!==8233||57344<=E&&E<=65533&&E!==CHAR_BOM||65536<=E&&E<=1114111}function isNsCharOrWhitespace(E){return isPrintable(E)&&E!==CHAR_BOM&&E!==CHAR_CARRIAGE_RETURN&&E!==CHAR_LINE_FEED}function isPlainSafe(E,T,e){var R=isNsCharOrWhitespace(E),A=R&&!isWhitespace(E);return(e?R:R&&E!==CHAR_COMMA&&E!==CHAR_LEFT_SQUARE_BRACKET&&E!==CHAR_RIGHT_SQUARE_BRACKET&&E!==CHAR_LEFT_CURLY_BRACKET&&E!==CHAR_RIGHT_CURLY_BRACKET)&&E!==CHAR_SHARP&&!(T===CHAR_COLON&&!A)||isNsCharOrWhitespace(T)&&!isWhitespace(T)&&E===CHAR_SHARP||T===CHAR_COLON&&A}function isPlainSafeFirst(E){return isPrintable(E)&&E!==CHAR_BOM&&!isWhitespace(E)&&E!==CHAR_MINUS&&E!==CHAR_QUESTION&&E!==CHAR_COLON&&E!==CHAR_COMMA&&E!==CHAR_LEFT_SQUARE_BRACKET&&E!==CHAR_RIGHT_SQUARE_BRACKET&&E!==CHAR_LEFT_CURLY_BRACKET&&E!==CHAR_RIGHT_CURLY_BRACKET&&E!==CHAR_SHARP&&E!==CHAR_AMPERSAND&&E!==CHAR_ASTERISK&&E!==CHAR_EXCLAMATION&&E!==CHAR_VERTICAL_LINE&&E!==CHAR_EQUALS&&E!==CHAR_GREATER_THAN&&E!==CHAR_SINGLE_QUOTE&&E!==CHAR_DOUBLE_QUOTE&&E!==CHAR_PERCENT&&E!==CHAR_COMMERCIAL_AT&&E!==CHAR_GRAVE_ACCENT}function isPlainSafeLast(E){return!isWhitespace(E)&&E!==CHAR_COLON}function codePointAt(E,T){var e=E.charCodeAt(T),R;return e>=55296&&e<=56319&&T+1<E.length&&(R=E.charCodeAt(T+1),R>=56320&&R<=57343)?(e-55296)*1024+R-56320+65536:e}function needIndentIndicator(E){var T=/^\n* /;return T.test(E)}var STYLE_PLAIN=1,STYLE_SINGLE=2,STYLE_LITERAL=3,STYLE_FOLDED=4,STYLE_DOUBLE=5;function chooseScalarStyle(E,T,e,R,A,O,S,N){var n,I=0,r=null,t=!1,s=!1,L=R!==-1,o=-1,P=isPlainSafeFirst(codePointAt(E,0))&&isPlainSafeLast(codePointAt(E,E.length-1));if(T||S)for(n=0;n<E.length;I>=65536?n+=2:n++){if(I=codePointAt(E,n),!isPrintable(I))return STYLE_DOUBLE;P=P&&isPlainSafe(I,r,N),r=I}else{for(n=0;n<E.length;I>=65536?n+=2:n++){if(I=codePointAt(E,n),I===CHAR_LINE_FEED)t=!0,L&&(s=s||n-o-1>R&&E[o+1]!==" ",o=n);else if(!isPrintable(I))return STYLE_DOUBLE;P=P&&isPlainSafe(I,r,N),r=I}s=s||L&&n-o-1>R&&E[o+1]!==" "}return!t&&!s?P&&!S&&!A(E)?STYLE_PLAIN:O===QUOTING_TYPE_DOUBLE?STYLE_DOUBLE:STYLE_SINGLE:e>9&&needIndentIndicator(E)?STYLE_DOUBLE:S?O===QUOTING_TYPE_DOUBLE?STYLE_DOUBLE:STYLE_SINGLE:s?STYLE_FOLDED:STYLE_LITERAL}function writeScalar(E,T,e,R,A){E.dump=function(){if(T.length===0)return E.quotingType===QUOTING_TYPE_DOUBLE?'""':"''";if(!E.noCompatMode&&(DEPRECATED_BOOLEANS_SYNTAX.indexOf(T)!==-1||DEPRECATED_BASE60_SYNTAX.test(T)))return E.quotingType===QUOTING_TYPE_DOUBLE?'"'+T+'"':"'"+T+"'";var O=E.indent*Math.max(1,e),S=E.lineWidth===-1?-1:Math.max(Math.min(E.lineWidth,40),E.lineWidth-O),N=R||E.flowLevel>-1&&e>=E.flowLevel;function n(I){return testImplicitResolving(E,I)}switch(chooseScalarStyle(T,N,E.indent,S,n,E.quotingType,E.forceQuotes&&!R,A)){case STYLE_PLAIN:return T;case STYLE_SINGLE:return"'"+T.replace(/'/g,"''")+"'";case STYLE_LITERAL:return"|"+blockHeader(T,E.indent)+dropEndingNewline(indentString$1(T,O));case STYLE_FOLDED:return">"+blockHeader(T,E.indent)+dropEndingNewline(indentString$1(foldString(T,S),O));case STYLE_DOUBLE:return'"'+escapeString(T)+'"';default:throw new exception("impossible error: invalid scalar style")}}()}function blockHeader(E,T){var e=needIndentIndicator(E)?String(T):"",R=E[E.length-1]===`
`,A=R&&(E[E.length-2]===`
`||E===`
`),O=A?"+":R?"":"-";return e+O+`
`}function dropEndingNewline(E){return E[E.length-1]===`
`?E.slice(0,-1):E}function foldString(E,T){for(var e=/(\n+)([^\n]*)/g,R=function(){var I=E.indexOf(`
`);return I=I!==-1?I:E.length,e.lastIndex=I,foldLine(E.slice(0,I),T)}(),A=E[0]===`
`||E[0]===" ",O,S;S=e.exec(E);){var N=S[1],n=S[2];O=n[0]===" ",R+=N+(!A&&!O&&n!==""?`
`:"")+foldLine(n,T),A=O}return R}function foldLine(E,T){if(E===""||E[0]===" ")return E;for(var e=/ [^ ]/g,R,A=0,O,S=0,N=0,n="";R=e.exec(E);)N=R.index,N-A>T&&(O=S>A?S:N,n+=`
`+E.slice(A,O),A=O+1),S=N;return n+=`
`,E.length-A>T&&S>A?n+=E.slice(A,S)+`
`+E.slice(S+1):n+=E.slice(A),n.slice(1)}function escapeString(E){for(var T="",e=0,R,A=0;A<E.length;e>=65536?A+=2:A++)e=codePointAt(E,A),R=ESCAPE_SEQUENCES[e],!R&&isPrintable(e)?(T+=E[A],e>=65536&&(T+=E[A+1])):T+=R||encodeHex(e);return T}function writeFlowSequence(E,T,e){var R="",A=E.tag,O,S,N;for(O=0,S=e.length;O<S;O+=1)N=e[O],E.replacer&&(N=E.replacer.call(e,String(O),N)),(writeNode(E,T,N,!1,!1)||typeof N>"u"&&writeNode(E,T,null,!1,!1))&&(R!==""&&(R+=","+(E.condenseFlow?"":" ")),R+=E.dump);E.tag=A,E.dump="["+R+"]"}function writeBlockSequence(E,T,e,R){var A="",O=E.tag,S,N,n;for(S=0,N=e.length;S<N;S+=1)n=e[S],E.replacer&&(n=E.replacer.call(e,String(S),n)),(writeNode(E,T+1,n,!0,!0,!1,!0)||typeof n>"u"&&writeNode(E,T+1,null,!0,!0,!1,!0))&&((!R||A!=="")&&(A+=generateNextLine(E,T)),E.dump&&CHAR_LINE_FEED===E.dump.charCodeAt(0)?A+="-":A+="- ",A+=E.dump);E.tag=O,E.dump=A||"[]"}function writeFlowMapping(E,T,e){var R="",A=E.tag,O=Object.keys(e),S,N,n,I,r;for(S=0,N=O.length;S<N;S+=1)r="",R!==""&&(r+=", "),E.condenseFlow&&(r+='"'),n=O[S],I=e[n],E.replacer&&(I=E.replacer.call(e,n,I)),writeNode(E,T,n,!1,!1)&&(E.dump.length>1024&&(r+="? "),r+=E.dump+(E.condenseFlow?'"':"")+":"+(E.condenseFlow?"":" "),writeNode(E,T,I,!1,!1)&&(r+=E.dump,R+=r));E.tag=A,E.dump="{"+R+"}"}function writeBlockMapping(E,T,e,R){var A="",O=E.tag,S=Object.keys(e),N,n,I,r,t,s;if(E.sortKeys===!0)S.sort();else if(typeof E.sortKeys=="function")S.sort(E.sortKeys);else if(E.sortKeys)throw new exception("sortKeys must be a boolean or a function");for(N=0,n=S.length;N<n;N+=1)s="",(!R||A!=="")&&(s+=generateNextLine(E,T)),I=S[N],r=e[I],E.replacer&&(r=E.replacer.call(e,I,r)),writeNode(E,T+1,I,!0,!0,!0)&&(t=E.tag!==null&&E.tag!=="?"||E.dump&&E.dump.length>1024,t&&(E.dump&&CHAR_LINE_FEED===E.dump.charCodeAt(0)?s+="?":s+="? "),s+=E.dump,t&&(s+=generateNextLine(E,T)),writeNode(E,T+1,r,!0,t)&&(E.dump&&CHAR_LINE_FEED===E.dump.charCodeAt(0)?s+=":":s+=": ",s+=E.dump,A+=s));E.tag=O,E.dump=A||"{}"}function detectType(E,T,e){var R,A,O,S,N,n;for(A=e?E.explicitTypes:E.implicitTypes,O=0,S=A.length;O<S;O+=1)if(N=A[O],(N.instanceOf||N.predicate)&&(!N.instanceOf||typeof T=="object"&&T instanceof N.instanceOf)&&(!N.predicate||N.predicate(T))){if(e?N.multi&&N.representName?E.tag=N.representName(T):E.tag=N.tag:E.tag="?",N.represent){if(n=E.styleMap[N.tag]||N.defaultStyle,_toString.call(N.represent)==="[object Function]")R=N.represent(T,n);else if(_hasOwnProperty.call(N.represent,n))R=N.represent[n](T,n);else throw new exception("!<"+N.tag+'> tag resolver accepts not "'+n+'" style');E.dump=R}return!0}return!1}function writeNode(E,T,e,R,A,O,S){E.tag=null,E.dump=e,detectType(E,e,!1)||detectType(E,e,!0);var N=_toString.call(E.dump),n=R,I;R&&(R=E.flowLevel<0||E.flowLevel>T);var r=N==="[object Object]"||N==="[object Array]",t,s;if(r&&(t=E.duplicates.indexOf(e),s=t!==-1),(E.tag!==null&&E.tag!=="?"||s||E.indent!==2&&T>0)&&(A=!1),s&&E.usedDuplicates[t])E.dump="*ref_"+t;else{if(r&&s&&!E.usedDuplicates[t]&&(E.usedDuplicates[t]=!0),N==="[object Object]")R&&Object.keys(E.dump).length!==0?(writeBlockMapping(E,T,E.dump,A),s&&(E.dump="&ref_"+t+E.dump)):(writeFlowMapping(E,T,E.dump),s&&(E.dump="&ref_"+t+" "+E.dump));else if(N==="[object Array]")R&&E.dump.length!==0?(E.noArrayIndent&&!S&&T>0?writeBlockSequence(E,T-1,E.dump,A):writeBlockSequence(E,T,E.dump,A),s&&(E.dump="&ref_"+t+E.dump)):(writeFlowSequence(E,T,E.dump),s&&(E.dump="&ref_"+t+" "+E.dump));else if(N==="[object String]")E.tag!=="?"&&writeScalar(E,E.dump,T,O,n);else{if(N==="[object Undefined]")return!1;if(E.skipInvalid)return!1;throw new exception("unacceptable kind of an object to dump "+N)}E.tag!==null&&E.tag!=="?"&&(I=encodeURI(E.tag[0]==="!"?E.tag.slice(1):E.tag).replace(/!/g,"%21"),E.tag[0]==="!"?I="!"+I:I.slice(0,18)==="tag:yaml.org,2002:"?I="!!"+I.slice(18):I="!<"+I+">",E.dump=I+" "+E.dump)}return!0}function getDuplicateReferences(E,T){var e=[],R=[],A,O;for(inspectNode(E,e,R),A=0,O=R.length;A<O;A+=1)T.duplicates.push(e[R[A]]);T.usedDuplicates=new Array(O)}function inspectNode(E,T,e){var R,A,O;if(E!==null&&typeof E=="object")if(A=T.indexOf(E),A!==-1)e.indexOf(A)===-1&&e.push(A);else if(T.push(E),Array.isArray(E))for(A=0,O=E.length;A<O;A+=1)inspectNode(E[A],T,e);else for(R=Object.keys(E),A=0,O=R.length;A<O;A+=1)inspectNode(E[R[A]],T,e)}function dump$1(E,T){T=T||{};var e=new State(T);e.noRefs||getDuplicateReferences(E,e);var R=E;return e.replacer&&(R=e.replacer.call({"":R},"",R)),writeNode(e,0,R,!0,!0)?e.dump+`
`:""}var dump_1=dump$1,dumper={dump:dump_1};function renamed(E,T){return function(){throw new Error("Function yaml."+E+" is removed in js-yaml 4. Use yaml."+T+" instead, which is now safe by default.")}}var Type=type,Schema=schema,FAILSAFE_SCHEMA=failsafe,JSON_SCHEMA=json,CORE_SCHEMA=core,DEFAULT_SCHEMA=_default,load=loader.load,loadAll=loader.loadAll,dump=dumper.dump,YAMLException=exception,types={binary,float,map,null:_null,pairs,set,timestamp,bool,int,merge,omap,seq,str},safeLoad=renamed("safeLoad","load"),safeLoadAll=renamed("safeLoadAll","loadAll"),safeDump=renamed("safeDump","dump"),jsYaml={Type,Schema,FAILSAFE_SCHEMA,JSON_SCHEMA,CORE_SCHEMA,DEFAULT_SCHEMA,load,loadAll,dump,YAMLException,types,safeLoad,safeLoadAll,safeDump};function json2yaml(E){const T=JSON.parse(E);return jsYaml.dump(T)}function yaml2json(E){const T=jsYaml.load(E);return JSON.stringify(T,null,2)}var papaparse_min$1={exports:{}};/* @license
Papa Parse
v5.5.3
https://github.com/mholt/PapaParse
License: MIT
*/var papaparse_min=papaparse_min$1.exports,hasRequiredPapaparse_min;function requirePapaparse_min(){return hasRequiredPapaparse_min||(hasRequiredPapaparse_min=1,function(E,T){((e,R)=>{E.exports=R()})(papaparse_min,function e(){var R=typeof self<"u"?self:typeof window<"u"?window:R!==void 0?R:{},A,O=!R.document&&!!R.postMessage,S=R.IS_PAPA_WORKER||!1,N={},n=0,I={};function r(_){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},(function(C){var a=IE(C);a.chunkSize=parseInt(a.chunkSize),C.step||C.chunk||(a.chunkSize=null),this._handle=new P(a),(this._handle.streamer=this)._config=a}).call(this,_),this.parseChunk=function(C,a){var l=parseInt(this._config.skipFirstNLines)||0;if(this.isFirstChunk&&0<l){let h=this._config.newline;h||(D=this._config.quoteChar||'"',h=this._handle.guessLineEndings(C,D)),C=[...C.split(h).slice(l)].join(h)}this.isFirstChunk&&y(this._config.beforeFirstChunk)&&(D=this._config.beforeFirstChunk(C))!==void 0&&(C=D),this.isFirstChunk=!1,this._halted=!1;var l=this._partialLine+C,D=(this._partialLine="",this._handle.parse(l,this._baseIndex,!this._finished));if(!this._handle.paused()&&!this._handle.aborted()){if(C=D.meta.cursor,l=(this._finished||(this._partialLine=l.substring(C-this._baseIndex),this._baseIndex=C),D&&D.data&&(this._rowCount+=D.data.length),this._finished||this._config.preview&&this._rowCount>=this._config.preview),S)R.postMessage({results:D,workerId:I.WORKER_ID,finished:l});else if(y(this._config.chunk)&&!a){if(this._config.chunk(D,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);this._completeResults=D=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(D.data),this._completeResults.errors=this._completeResults.errors.concat(D.errors),this._completeResults.meta=D.meta),this._completed||!l||!y(this._config.complete)||D&&D.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),l||D&&D.meta.paused||this._nextChunk(),D}this._halted=!0},this._sendError=function(C){y(this._config.error)?this._config.error(C):S&&this._config.error&&R.postMessage({workerId:I.WORKER_ID,error:C,finished:!1})}}function t(_){var C;(_=_||{}).chunkSize||(_.chunkSize=I.RemoteChunkSize),r.call(this,_),this._nextChunk=O?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(a){this._input=a,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(C=new XMLHttpRequest,this._config.withCredentials&&(C.withCredentials=this._config.withCredentials),O||(C.onload=RE(this._chunkLoaded,this),C.onerror=RE(this._chunkError,this)),C.open(this._config.downloadRequestBody?"POST":"GET",this._input,!O),this._config.downloadRequestHeaders){var a,l=this._config.downloadRequestHeaders;for(a in l)C.setRequestHeader(a,l[a])}var D;this._config.chunkSize&&(D=this._start+this._config.chunkSize-1,C.setRequestHeader("Range","bytes="+this._start+"-"+D));try{C.send(this._config.downloadRequestBody)}catch(h){this._chunkError(h.message)}O&&C.status===0&&this._chunkError()}},this._chunkLoaded=function(){C.readyState===4&&(C.status<200||400<=C.status?this._chunkError():(this._start+=this._config.chunkSize||C.responseText.length,this._finished=!this._config.chunkSize||this._start>=(a=>(a=a.getResponseHeader("Content-Range"))!==null?parseInt(a.substring(a.lastIndexOf("/")+1)):-1)(C),this.parseChunk(C.responseText)))},this._chunkError=function(a){a=C.statusText||a,this._sendError(new Error(a))}}function s(_){(_=_||{}).chunkSize||(_.chunkSize=I.LocalChunkSize),r.call(this,_);var C,a,l=typeof FileReader<"u";this.stream=function(D){this._input=D,a=D.slice||D.webkitSlice||D.mozSlice,l?((C=new FileReader).onload=RE(this._chunkLoaded,this),C.onerror=RE(this._chunkError,this)):C=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var D=this._input,h=(this._config.chunkSize&&(h=Math.min(this._start+this._config.chunkSize,this._input.size),D=a.call(D,this._start,h)),C.readAsText(D,this._config.encoding));l||this._chunkLoaded({target:{result:h}})},this._chunkLoaded=function(D){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(D.target.result)},this._chunkError=function(){this._sendError(C.error)}}function L(_){var C;r.call(this,_=_||{}),this.stream=function(a){return C=a,this._nextChunk()},this._nextChunk=function(){var a,l;if(!this._finished)return a=this._config.chunkSize,C=a?(l=C.substring(0,a),C.substring(a)):(l=C,""),this._finished=!C,this.parseChunk(l)}}function o(_){r.call(this,_=_||{});var C=[],a=!0,l=!1;this.pause=function(){r.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){r.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(D){this._input=D,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){l&&C.length===1&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),C.length?this.parseChunk(C.shift()):a=!0},this._streamData=RE(function(D){try{C.push(typeof D=="string"?D:D.toString(this._config.encoding)),a&&(a=!1,this._checkIsFinished(),this.parseChunk(C.shift()))}catch(h){this._streamError(h)}},this),this._streamError=RE(function(D){this._streamCleanUp(),this._sendError(D)},this),this._streamEnd=RE(function(){this._streamCleanUp(),l=!0,this._streamData("")},this),this._streamCleanUp=RE(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function P(_){var C,a,l,D,h=Math.pow(2,53),$=-h,z=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,EE=/^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/,f=this,X=0,u=0,Q=!1,d=!1,H=[],M={data:[],errors:[],meta:{}};function v(B){return _.skipEmptyLines==="greedy"?B.join("").trim()==="":B.length===1&&B[0].length===0}function K(){if(M&&l&&(TE("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+I.DefaultDelimiter+"'"),l=!1),_.skipEmptyLines&&(M.data=M.data.filter(function(p){return!v(p)})),k()){let p=function(b,w){y(_.transformHeader)&&(b=_.transformHeader(b,w)),H.push(b)};if(M)if(Array.isArray(M.data[0])){for(var B=0;k()&&B<M.data.length;B++)M.data[B].forEach(p);M.data.splice(0,1)}else M.data.forEach(p)}function Y(p,b){for(var w=_.header?{}:[],W=0;W<p.length;W++){var V=W,F=p[W],F=((eE,G)=>(x=>(_.dynamicTypingFunction&&_.dynamicTyping[x]===void 0&&(_.dynamicTyping[x]=_.dynamicTypingFunction(x)),(_.dynamicTyping[x]||_.dynamicTyping)===!0))(eE)?G==="true"||G==="TRUE"||G!=="false"&&G!=="FALSE"&&((x=>{if(z.test(x)&&(x=parseFloat(x),$<x&&x<h))return 1})(G)?parseFloat(G):EE.test(G)?new Date(G):G===""?null:G):G)(V=_.header?W>=H.length?"__parsed_extra":H[W]:V,F=_.transform?_.transform(F,V):F);V==="__parsed_extra"?(w[V]=w[V]||[],w[V].push(F)):w[V]=F}return _.header&&(W>H.length?TE("FieldMismatch","TooManyFields","Too many fields: expected "+H.length+" fields but parsed "+W,u+b):W<H.length&&TE("FieldMismatch","TooFewFields","Too few fields: expected "+H.length+" fields but parsed "+W,u+b)),w}var g;M&&(_.header||_.dynamicTyping||_.transform)&&(g=1,!M.data.length||Array.isArray(M.data[0])?(M.data=M.data.map(Y),g=M.data.length):M.data=Y(M.data,0),_.header&&M.meta&&(M.meta.fields=H),u+=g)}function k(){return _.header&&H.length===0}function TE(B,Y,g,p){B={type:B,code:Y,message:g},p!==void 0&&(B.row=p),M.errors.push(B)}y(_.step)&&(D=_.step,_.step=function(B){M=B,k()?K():(K(),M.data.length!==0&&(X+=B.data.length,_.preview&&X>_.preview?a.abort():(M.data=M.data[0],D(M,f))))}),this.parse=function(B,Y,g){var p=_.quoteChar||'"',p=(_.newline||(_.newline=this.guessLineEndings(B,p)),l=!1,_.delimiter?y(_.delimiter)&&(_.delimiter=_.delimiter(B),M.meta.delimiter=_.delimiter):((p=((b,w,W,V,F)=>{var eE,G,x,sE;F=F||[",","	","|",";",I.RECORD_SEP,I.UNIT_SEP];for(var tE=0;tE<F.length;tE++){for(var AE,_E=F[tE],Z=0,SE=0,J=0,q=(x=void 0,new m({comments:V,delimiter:_E,newline:w,preview:10}).parse(b)),NE=0;NE<q.data.length;NE++)W&&v(q.data[NE])?J++:(AE=q.data[NE].length,SE+=AE,x===void 0?x=AE:0<AE&&(Z+=Math.abs(AE-x),x=AE));0<q.data.length&&(SE/=q.data.length-J),(G===void 0||Z<=G)&&(sE===void 0||sE<SE)&&1.99<SE&&(G=Z,eE=_E,sE=SE)}return{successful:!!(_.delimiter=eE),bestDelimiter:eE}})(B,_.newline,_.skipEmptyLines,_.comments,_.delimitersToGuess)).successful?_.delimiter=p.bestDelimiter:(l=!0,_.delimiter=I.DefaultDelimiter),M.meta.delimiter=_.delimiter),IE(_));return _.preview&&_.header&&p.preview++,C=B,a=new m(p),M=a.parse(C,Y,g),K(),Q?{meta:{paused:!0}}:M||{meta:{paused:!1}}},this.paused=function(){return Q},this.pause=function(){Q=!0,a.abort(),C=y(_.chunk)?"":C.substring(a.getCharIndex())},this.resume=function(){f.streamer._halted?(Q=!1,f.streamer.parseChunk(C,!0)):setTimeout(f.resume,3)},this.aborted=function(){return d},this.abort=function(){d=!0,a.abort(),M.meta.aborted=!0,y(_.complete)&&_.complete(M),C=""},this.guessLineEndings=function(b,p){b=b.substring(0,1048576);var p=new RegExp(c(p)+"([^]*?)"+c(p),"gm"),g=(b=b.replace(p,"")).split("\r"),p=b.split(`
`),b=1<p.length&&p[0].length<g[0].length;if(g.length===1||b)return`
`;for(var w=0,W=0;W<g.length;W++)g[W][0]===`
`&&w++;return w>=g.length/2?`\r
`:"\r"}}function c(_){return _.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function m(_){var C=(_=_||{}).delimiter,a=_.newline,l=_.comments,D=_.step,h=_.preview,$=_.fastMode,z=null,EE=!1,f=_.quoteChar==null?'"':_.quoteChar,X=f;if(_.escapeChar!==void 0&&(X=_.escapeChar),(typeof C!="string"||-1<I.BAD_DELIMITERS.indexOf(C))&&(C=","),l===C)throw new Error("Comment character same as delimiter");l===!0?l="#":(typeof l!="string"||-1<I.BAD_DELIMITERS.indexOf(l))&&(l=!1),a!==`
`&&a!=="\r"&&a!==`\r
`&&(a=`
`);var u=0,Q=!1;this.parse=function(d,H,M){if(typeof d!="string")throw new Error("Input must be a string");var v=d.length,K=C.length,k=a.length,TE=l.length,B=y(D),Y=[],g=[],p=[],b=u=0;if(!d)return Z();if($||$!==!1&&d.indexOf(f)===-1){for(var w=d.split(a),W=0;W<w.length;W++){if(p=w[W],u+=p.length,W!==w.length-1)u+=a.length;else if(M)return Z();if(!l||p.substring(0,TE)!==l){if(B){if(Y=[],sE(p.split(C)),SE(),Q)return Z()}else sE(p.split(C));if(h&&h<=W)return Y=Y.slice(0,h),Z(!0)}}return Z()}for(var V=d.indexOf(C,u),F=d.indexOf(a,u),eE=new RegExp(c(X)+c(f),"g"),G=d.indexOf(f,u);;)if(d[u]===f)for(G=u,u++;;){if((G=d.indexOf(f,G+1))===-1)return M||g.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:Y.length,index:u}),AE();if(G===v-1)return AE(d.substring(u,G).replace(eE,f));if(f===X&&d[G+1]===X)G++;else if(f===X||G===0||d[G-1]!==X){V!==-1&&V<G+1&&(V=d.indexOf(C,G+1));var x=tE((F=F!==-1&&F<G+1?d.indexOf(a,G+1):F)===-1?V:Math.min(V,F));if(d.substr(G+1+x,K)===C){p.push(d.substring(u,G).replace(eE,f)),d[u=G+1+x+K]!==f&&(G=d.indexOf(f,u)),V=d.indexOf(C,u),F=d.indexOf(a,u);break}if(x=tE(F),d.substring(G+1+x,G+1+x+k)===a){if(p.push(d.substring(u,G).replace(eE,f)),_E(G+1+x+k),V=d.indexOf(C,u),G=d.indexOf(f,u),B&&(SE(),Q))return Z();if(h&&Y.length>=h)return Z(!0);break}g.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:Y.length,index:u}),G++}}else if(l&&p.length===0&&d.substring(u,u+TE)===l){if(F===-1)return Z();u=F+k,F=d.indexOf(a,u),V=d.indexOf(C,u)}else if(V!==-1&&(V<F||F===-1))p.push(d.substring(u,V)),u=V+K,V=d.indexOf(C,u);else{if(F===-1)break;if(p.push(d.substring(u,F)),_E(F+k),B&&(SE(),Q))return Z();if(h&&Y.length>=h)return Z(!0)}return AE();function sE(J){Y.push(J),b=u}function tE(J){var q=0;return q=J!==-1&&(J=d.substring(G+1,J))&&J.trim()===""?J.length:q}function AE(J){return M||(J===void 0&&(J=d.substring(u)),p.push(J),u=v,sE(p),B&&SE()),Z()}function _E(J){u=J,sE(p),p=[],F=d.indexOf(a,u)}function Z(J){if(_.header&&!H&&Y.length&&!EE){var q=Y[0],NE=Object.create(null),LE=new Set(q);let iE=!1;for(let nE=0;nE<q.length;nE++){let OE=q[nE];if(NE[OE=y(_.transformHeader)?_.transformHeader(OE,nE):OE]){let CE,aE=NE[OE];for(;CE=OE+"_"+aE,aE++,LE.has(CE););LE.add(CE),q[nE]=CE,NE[OE]++,iE=!0,(z=z===null?{}:z)[CE]=OE}else NE[OE]=1,q[nE]=OE;LE.add(OE)}iE&&console.warn("Duplicate headers found and renamed."),EE=!0}return{data:Y,errors:g,meta:{delimiter:C,linebreak:a,aborted:Q,truncated:!!J,cursor:b+(H||0),renamedHeaders:z}}}function SE(){D(Z()),Y=[],g=[]}},this.abort=function(){Q=!0},this.getCharIndex=function(){return u}}function U(_){var C=_.data,a=N[C.workerId],l=!1;if(C.error)a.userError(C.error,C.file);else if(C.results&&C.results.data){var D={abort:function(){l=!0,j(C.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:rE,resume:rE};if(y(a.userStep)){for(var h=0;h<C.results.data.length&&(a.userStep({data:C.results.data[h],errors:C.results.errors,meta:C.results.meta},D),!l);h++);delete C.results}else y(a.userChunk)&&(a.userChunk(C.results,D,C.file),delete C.results)}C.finished&&!l&&j(C.workerId,C.results)}function j(_,C){var a=N[_];y(a.userComplete)&&a.userComplete(C),a.terminate(),delete N[_]}function rE(){throw new Error("Not implemented.")}function IE(_){if(typeof _!="object"||_===null)return _;var C,a=Array.isArray(_)?[]:{};for(C in _)a[C]=IE(_[C]);return a}function RE(_,C){return function(){_.apply(C,arguments)}}function y(_){return typeof _=="function"}return I.parse=function(_,C){var a=(C=C||{}).dynamicTyping||!1;if(y(a)&&(C.dynamicTypingFunction=a,a={}),C.dynamicTyping=a,C.transform=!!y(C.transform)&&C.transform,!C.worker||!I.WORKERS_SUPPORTED)return a=null,I.NODE_STREAM_INPUT,typeof _=="string"?(_=(l=>l.charCodeAt(0)!==65279?l:l.slice(1))(_),a=new(C.download?t:L)(C)):_.readable===!0&&y(_.read)&&y(_.on)?a=new o(C):(R.File&&_ instanceof File||_ instanceof Object)&&(a=new s(C)),a.stream(_);(a=(()=>{var l;return!!I.WORKERS_SUPPORTED&&(l=(()=>{var D=R.URL||R.webkitURL||null,h=e.toString();return I.BLOB_URL||(I.BLOB_URL=D.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ","(",h,")();"],{type:"text/javascript"})))})(),(l=new R.Worker(l)).onmessage=U,l.id=n++,N[l.id]=l)})()).userStep=C.step,a.userChunk=C.chunk,a.userComplete=C.complete,a.userError=C.error,C.step=y(C.step),C.chunk=y(C.chunk),C.complete=y(C.complete),C.error=y(C.error),delete C.worker,a.postMessage({input:_,config:C,workerId:a.id})},I.unparse=function(_,C){var a=!1,l=!0,D=",",h=`\r
`,$='"',z=$+$,EE=!1,f=null,X=!1,u=((()=>{if(typeof C=="object"){if(typeof C.delimiter!="string"||I.BAD_DELIMITERS.filter(function(H){return C.delimiter.indexOf(H)!==-1}).length||(D=C.delimiter),typeof C.quotes!="boolean"&&typeof C.quotes!="function"&&!Array.isArray(C.quotes)||(a=C.quotes),typeof C.skipEmptyLines!="boolean"&&typeof C.skipEmptyLines!="string"||(EE=C.skipEmptyLines),typeof C.newline=="string"&&(h=C.newline),typeof C.quoteChar=="string"&&($=C.quoteChar),typeof C.header=="boolean"&&(l=C.header),Array.isArray(C.columns)){if(C.columns.length===0)throw new Error("Option columns is empty");f=C.columns}C.escapeChar!==void 0&&(z=C.escapeChar+$),C.escapeFormulae instanceof RegExp?X=C.escapeFormulae:typeof C.escapeFormulae=="boolean"&&C.escapeFormulae&&(X=/^[=+\-@\t\r].*$/)}})(),new RegExp(c($),"g"));if(typeof _=="string"&&(_=JSON.parse(_)),Array.isArray(_)){if(!_.length||Array.isArray(_[0]))return Q(null,_,EE);if(typeof _[0]=="object")return Q(f||Object.keys(_[0]),_,EE)}else if(typeof _=="object")return typeof _.data=="string"&&(_.data=JSON.parse(_.data)),Array.isArray(_.data)&&(_.fields||(_.fields=_.meta&&_.meta.fields||f),_.fields||(_.fields=Array.isArray(_.data[0])?_.fields:typeof _.data[0]=="object"?Object.keys(_.data[0]):[]),Array.isArray(_.data[0])||typeof _.data[0]=="object"||(_.data=[_.data])),Q(_.fields||[],_.data||[],EE);throw new Error("Unable to serialize unrecognized input");function Q(H,M,v){var K="",k=(typeof H=="string"&&(H=JSON.parse(H)),typeof M=="string"&&(M=JSON.parse(M)),Array.isArray(H)&&0<H.length),TE=!Array.isArray(M[0]);if(k&&l){for(var B=0;B<H.length;B++)0<B&&(K+=D),K+=d(H[B],B);0<M.length&&(K+=h)}for(var Y=0;Y<M.length;Y++){var g=(k?H:M[Y]).length,p=!1,b=k?Object.keys(M[Y]).length===0:M[Y].length===0;if(v&&!k&&(p=v==="greedy"?M[Y].join("").trim()==="":M[Y].length===1&&M[Y][0].length===0),v==="greedy"&&k){for(var w=[],W=0;W<g;W++){var V=TE?H[W]:W;w.push(M[Y][V])}p=w.join("").trim()===""}if(!p){for(var F=0;F<g;F++){0<F&&!b&&(K+=D);var eE=k&&TE?H[F]:F;K+=d(M[Y][eE],F)}Y<M.length-1&&(!v||0<g&&!b)&&(K+=h)}}return K}function d(H,M){var v,K;return H==null?"":H.constructor===Date?JSON.stringify(H).slice(1,25):(K=!1,X&&typeof H=="string"&&X.test(H)&&(H="'"+H,K=!0),v=H.toString().replace(u,z),(K=K||a===!0||typeof a=="function"&&a(H,M)||Array.isArray(a)&&a[M]||((k,TE)=>{for(var B=0;B<TE.length;B++)if(-1<k.indexOf(TE[B]))return!0;return!1})(v,I.BAD_DELIMITERS)||-1<v.indexOf(D)||v.charAt(0)===" "||v.charAt(v.length-1)===" ")?$+v+$:v)}},I.RECORD_SEP="",I.UNIT_SEP="",I.BYTE_ORDER_MARK="\uFEFF",I.BAD_DELIMITERS=["\r",`
`,'"',I.BYTE_ORDER_MARK],I.WORKERS_SUPPORTED=!O&&!!R.Worker,I.NODE_STREAM_INPUT=1,I.LocalChunkSize=10485760,I.RemoteChunkSize=5242880,I.DefaultDelimiter=",",I.Parser=m,I.ParserHandle=P,I.NetworkStreamer=t,I.FileStreamer=s,I.StringStreamer=L,I.ReadableStreamStreamer=o,R.jQuery&&((A=R.jQuery).fn.parse=function(_){var C=_.config||{},a=[];return this.each(function(h){if(!(A(this).prop("tagName").toUpperCase()==="INPUT"&&A(this).attr("type").toLowerCase()==="file"&&R.FileReader)||!this.files||this.files.length===0)return!0;for(var $=0;$<this.files.length;$++)a.push({file:this.files[$],inputElem:this,instanceConfig:A.extend({},C)})}),l(),this;function l(){if(a.length===0)y(_.complete)&&_.complete();else{var h,$,z,EE,f=a[0];if(y(_.before)){var X=_.before(f.file,f.inputElem);if(typeof X=="object"){if(X.action==="abort")return h="AbortError",$=f.file,z=f.inputElem,EE=X.reason,void(y(_.error)&&_.error({name:h},$,z,EE));if(X.action==="skip")return void D();typeof X.config=="object"&&(f.instanceConfig=A.extend(f.instanceConfig,X.config))}else if(X==="skip")return void D()}var u=f.instanceConfig.complete;f.instanceConfig.complete=function(Q){y(u)&&u(Q,f.file,f.inputElem),D()},I.parse(f.file,f.instanceConfig)}}function D(){a.splice(0,1),l()}}),S&&(R.onmessage=function(_){_=_.data,I.WORKER_ID===void 0&&_&&(I.WORKER_ID=_.workerId),typeof _.input=="string"?R.postMessage({workerId:I.WORKER_ID,results:I.parse(_.input,_.config),finished:!0}):(R.File&&_.input instanceof File||_.input instanceof Object)&&(_=I.parse(_.input,_.config))&&R.postMessage({workerId:I.WORKER_ID,results:_,finished:!0})}),(t.prototype=Object.create(r.prototype)).constructor=t,(s.prototype=Object.create(r.prototype)).constructor=s,(L.prototype=Object.create(L.prototype)).constructor=L,(o.prototype=Object.create(r.prototype)).constructor=o,I})}(papaparse_min$1)),papaparse_min$1.exports}var papaparse_minExports=requirePapaparse_min();const papaparse=getDefaultExportFromCjs(papaparse_minExports);function json2csv(E){const T=JSON.parse(E);return papaparse.unparse(T)}function csv2json(E){const T=papaparse.parse(E,{header:!0});return JSON.stringify(T.data,null,2)}function object2Json(input){const object=eval(`(${input})`);return JSON.stringify(object,null,2)}function json2Object(E){return`const object = ${E};`}const _hasBuffer=typeof Buffer=="function",_TD=typeof TextDecoder=="function"?new TextDecoder:void 0,_TE=typeof TextEncoder=="function"?new TextEncoder:void 0,b64ch="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",b64chs=Array.prototype.slice.call(b64ch),b64tab=(E=>{let T={};return E.forEach((e,R)=>T[e]=R),T})(b64chs),b64re=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,_fromCC=String.fromCharCode.bind(String),_U8Afrom=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):E=>new Uint8Array(Array.prototype.slice.call(E,0)),_mkUriSafe=E=>E.replace(/=/g,"").replace(/[+\/]/g,T=>T=="+"?"-":"_"),_tidyB64=E=>E.replace(/[^A-Za-z0-9\+\/]/g,""),btoaPolyfill=E=>{let T,e,R,A,O="";const S=E.length%3;for(let N=0;N<E.length;){if((e=E.charCodeAt(N++))>255||(R=E.charCodeAt(N++))>255||(A=E.charCodeAt(N++))>255)throw new TypeError("invalid character found");T=e<<16|R<<8|A,O+=b64chs[T>>18&63]+b64chs[T>>12&63]+b64chs[T>>6&63]+b64chs[T&63]}return S?O.slice(0,S-3)+"===".substring(S):O},_btoa=typeof btoa=="function"?E=>btoa(E):_hasBuffer?E=>Buffer.from(E,"binary").toString("base64"):btoaPolyfill,_fromUint8Array=_hasBuffer?E=>Buffer.from(E).toString("base64"):E=>{let e=[];for(let R=0,A=E.length;R<A;R+=4096)e.push(_fromCC.apply(null,E.subarray(R,R+4096)));return _btoa(e.join(""))},cb_utob=E=>{if(E.length<2){var T=E.charCodeAt(0);return T<128?E:T<2048?_fromCC(192|T>>>6)+_fromCC(128|T&63):_fromCC(224|T>>>12&15)+_fromCC(128|T>>>6&63)+_fromCC(128|T&63)}else{var T=65536+(E.charCodeAt(0)-55296)*1024+(E.charCodeAt(1)-56320);return _fromCC(240|T>>>18&7)+_fromCC(128|T>>>12&63)+_fromCC(128|T>>>6&63)+_fromCC(128|T&63)}},re_utob=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,utob=E=>E.replace(re_utob,cb_utob),_encode=_hasBuffer?E=>Buffer.from(E,"utf8").toString("base64"):_TE?E=>_fromUint8Array(_TE.encode(E)):E=>_btoa(utob(E)),encode=(E,T=!1)=>T?_mkUriSafe(_encode(E)):_encode(E),re_btou=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,cb_btou=E=>{switch(E.length){case 4:var T=(7&E.charCodeAt(0))<<18|(63&E.charCodeAt(1))<<12|(63&E.charCodeAt(2))<<6|63&E.charCodeAt(3),e=T-65536;return _fromCC((e>>>10)+55296)+_fromCC((e&1023)+56320);case 3:return _fromCC((15&E.charCodeAt(0))<<12|(63&E.charCodeAt(1))<<6|63&E.charCodeAt(2));default:return _fromCC((31&E.charCodeAt(0))<<6|63&E.charCodeAt(1))}},btou=E=>E.replace(re_btou,cb_btou),atobPolyfill=E=>{if(E=E.replace(/\s+/g,""),!b64re.test(E))throw new TypeError("malformed base64.");E+="==".slice(2-(E.length&3));let T,e,R,A=[];for(let O=0;O<E.length;)T=b64tab[E.charAt(O++)]<<18|b64tab[E.charAt(O++)]<<12|(e=b64tab[E.charAt(O++)])<<6|(R=b64tab[E.charAt(O++)]),e===64?A.push(_fromCC(T>>16&255)):R===64?A.push(_fromCC(T>>16&255,T>>8&255)):A.push(_fromCC(T>>16&255,T>>8&255,T&255));return A.join("")},_atob=typeof atob=="function"?E=>atob(_tidyB64(E)):_hasBuffer?E=>Buffer.from(E,"base64").toString("binary"):atobPolyfill,_toUint8Array=_hasBuffer?E=>_U8Afrom(Buffer.from(E,"base64")):E=>_U8Afrom(_atob(E).split("").map(T=>T.charCodeAt(0))),_decode=_hasBuffer?E=>Buffer.from(E,"base64").toString("utf8"):_TD?E=>_TD.decode(_toUint8Array(E)):E=>btou(_atob(E)),_unURI=E=>_tidyB64(E.replace(/[-_]/g,T=>T=="-"?"+":"/")),decode=E=>_decode(_unURI(E));function encodeBase64(E){return encode(E)}function decodeBase64(E){return decode(E)}const expandPhrases=E=>E.flatMap(expandSinglePhrase),expandSinglePhrase=E=>buildCombinations(parsePhrase(E)).map(stripExtraWhitespace),stripExtraWhitespace=E=>E.replace(/ +/g," ").trim(),parsePhrase=E=>({type:"mandatory_block",items:parseAlteration(E,0)[0]}),parseAlteration=(E,T,e)=>{const R=[];for(;E[T];){const[A,O]=parseConcatenation(E,T);if(R.push(A),T=O,E[T]==="|")T++;else if(E[T]==="}"||E[T]==="]"){if(e!==E[T])throw new Error(`Unbalanced parenthesis in: ${E}`);return T++,[R,T]}else if(T===E.length){if(e)throw new Error(`Unbalanced parenthesis in: ${E}`);return[R,T]}else throw new Error(`Unexpected "${E[T]}"`)}return[R,T]},parseConcatenation=(E,T)=>{const e=[];for(;;){const[R,A]=parseTerm(E,T);if(R)e.push(R),T=A;else break}return e.length===1?[e[0],T]:[{type:"concatenation",items:e},T]},parseTerm=(E,T)=>{if(E[T]==="{")return parseMandatoryBlock(E,T+1);if(E[T]==="[")return parseOptionalBlock(E,T+1);{let e="";for(;E[T]&&/[A-Za-z0-9_ ]/.test(E[T]);)e+=E[T],T++;return[e,T]}},parseMandatoryBlock=(E,T)=>{const[e,R]=parseAlteration(E,T,"}");return[{type:"mandatory_block",items:e},R]},parseOptionalBlock=(E,T)=>{const[e,R]=parseAlteration(E,T,"]");return[{type:"optional_block",items:e},R]},buildCombinations=E=>{if(typeof E=="string")return[E];if(E.type==="concatenation")return E.items.map(buildCombinations).reduce(stringCombinations,[""]);if(E.type==="mandatory_block")return E.items.flatMap(buildCombinations);if(E.type==="optional_block")return["",...E.items.flatMap(buildCombinations)];throw new Error(`Unknown node type: ${E}`)},stringCombinations=(E,T)=>{const e=[];for(const R of E)for(const A of T)e.push(R+A);return e};var TokenType;(function(E){E.QUOTED_IDENTIFIER="QUOTED_IDENTIFIER",E.IDENTIFIER="IDENTIFIER",E.STRING="STRING",E.VARIABLE="VARIABLE",E.RESERVED_DATA_TYPE="RESERVED_DATA_TYPE",E.RESERVED_PARAMETERIZED_DATA_TYPE="RESERVED_PARAMETERIZED_DATA_TYPE",E.RESERVED_KEYWORD="RESERVED_KEYWORD",E.RESERVED_FUNCTION_NAME="RESERVED_FUNCTION_NAME",E.RESERVED_KEYWORD_PHRASE="RESERVED_KEYWORD_PHRASE",E.RESERVED_DATA_TYPE_PHRASE="RESERVED_DATA_TYPE_PHRASE",E.RESERVED_SET_OPERATION="RESERVED_SET_OPERATION",E.RESERVED_CLAUSE="RESERVED_CLAUSE",E.RESERVED_SELECT="RESERVED_SELECT",E.RESERVED_JOIN="RESERVED_JOIN",E.ARRAY_IDENTIFIER="ARRAY_IDENTIFIER",E.ARRAY_KEYWORD="ARRAY_KEYWORD",E.CASE="CASE",E.END="END",E.WHEN="WHEN",E.ELSE="ELSE",E.THEN="THEN",E.LIMIT="LIMIT",E.BETWEEN="BETWEEN",E.AND="AND",E.OR="OR",E.XOR="XOR",E.OPERATOR="OPERATOR",E.COMMA="COMMA",E.ASTERISK="ASTERISK",E.PROPERTY_ACCESS_OPERATOR="PROPERTY_ACCESS_OPERATOR",E.OPEN_PAREN="OPEN_PAREN",E.CLOSE_PAREN="CLOSE_PAREN",E.LINE_COMMENT="LINE_COMMENT",E.BLOCK_COMMENT="BLOCK_COMMENT",E.DISABLE_COMMENT="DISABLE_COMMENT",E.NUMBER="NUMBER",E.NAMED_PARAMETER="NAMED_PARAMETER",E.QUOTED_PARAMETER="QUOTED_PARAMETER",E.NUMBERED_PARAMETER="NUMBERED_PARAMETER",E.POSITIONAL_PARAMETER="POSITIONAL_PARAMETER",E.CUSTOM_PARAMETER="CUSTOM_PARAMETER",E.DELIMITER="DELIMITER",E.EOF="EOF"})(TokenType=TokenType||(TokenType={}));const createEofToken=E=>({type:TokenType.EOF,raw:"«EOF»",text:"«EOF»",start:E}),EOF_TOKEN=createEofToken(1/0),testToken=E=>T=>T.type===E.type&&T.text===E.text,isToken={ARRAY:testToken({text:"ARRAY",type:TokenType.RESERVED_DATA_TYPE}),BY:testToken({text:"BY",type:TokenType.RESERVED_KEYWORD}),SET:testToken({text:"SET",type:TokenType.RESERVED_CLAUSE}),STRUCT:testToken({text:"STRUCT",type:TokenType.RESERVED_DATA_TYPE}),WINDOW:testToken({text:"WINDOW",type:TokenType.RESERVED_CLAUSE}),VALUES:testToken({text:"VALUES",type:TokenType.RESERVED_CLAUSE})},isReserved=E=>E===TokenType.RESERVED_DATA_TYPE||E===TokenType.RESERVED_KEYWORD||E===TokenType.RESERVED_FUNCTION_NAME||E===TokenType.RESERVED_KEYWORD_PHRASE||E===TokenType.RESERVED_DATA_TYPE_PHRASE||E===TokenType.RESERVED_CLAUSE||E===TokenType.RESERVED_SELECT||E===TokenType.RESERVED_SET_OPERATION||E===TokenType.RESERVED_JOIN||E===TokenType.ARRAY_KEYWORD||E===TokenType.CASE||E===TokenType.END||E===TokenType.WHEN||E===TokenType.ELSE||E===TokenType.THEN||E===TokenType.LIMIT||E===TokenType.BETWEEN||E===TokenType.AND||E===TokenType.OR||E===TokenType.XOR,isLogicalOperator=E=>E===TokenType.AND||E===TokenType.OR||E===TokenType.XOR,functions$i=["KEYS.NEW_KEYSET","KEYS.ADD_KEY_FROM_RAW_BYTES","AEAD.DECRYPT_BYTES","AEAD.DECRYPT_STRING","AEAD.ENCRYPT","KEYS.KEYSET_CHAIN","KEYS.KEYSET_FROM_JSON","KEYS.KEYSET_TO_JSON","KEYS.ROTATE_KEYSET","KEYS.KEYSET_LENGTH","ANY_VALUE","ARRAY_AGG","AVG","CORR","COUNT","COUNTIF","COVAR_POP","COVAR_SAMP","MAX","MIN","ST_CLUSTERDBSCAN","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","VAR_POP","VAR_SAMP","ANY_VALUE","ARRAY_AGG","ARRAY_CONCAT_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","COUNT","COUNTIF","LOGICAL_AND","LOGICAL_OR","MAX","MIN","STRING_AGG","SUM","APPROX_COUNT_DISTINCT","APPROX_QUANTILES","APPROX_TOP_COUNT","APPROX_TOP_SUM","ARRAY_CONCAT","ARRAY_LENGTH","ARRAY_TO_STRING","GENERATE_ARRAY","GENERATE_DATE_ARRAY","GENERATE_TIMESTAMP_ARRAY","ARRAY_REVERSE","OFFSET","SAFE_OFFSET","ORDINAL","SAFE_ORDINAL","BIT_COUNT","PARSE_BIGNUMERIC","PARSE_NUMERIC","SAFE_CAST","CURRENT_DATE","EXTRACT","DATE","DATE_ADD","DATE_SUB","DATE_DIFF","DATE_TRUNC","DATE_FROM_UNIX_DATE","FORMAT_DATE","LAST_DAY","PARSE_DATE","UNIX_DATE","CURRENT_DATETIME","DATETIME","EXTRACT","DATETIME_ADD","DATETIME_SUB","DATETIME_DIFF","DATETIME_TRUNC","FORMAT_DATETIME","LAST_DAY","PARSE_DATETIME","ERROR","EXTERNAL_QUERY","S2_CELLIDFROMPOINT","S2_COVERINGCELLIDS","ST_ANGLE","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_AZIMUTH","ST_BOUNDARY","ST_BOUNDINGBOX","ST_BUFFER","ST_BUFFERWITHTOLERANCE","ST_CENTROID","ST_CENTROID_AGG","ST_CLOSESTPOINT","ST_CLUSTERDBSCAN","ST_CONTAINS","ST_CONVEXHULL","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DUMP","ST_DWITHIN","ST_ENDPOINT","ST_EQUALS","ST_EXTENT","ST_EXTERIORRING","ST_GEOGFROM","ST_GEOGFROMGEOJSON","ST_GEOGFROMTEXT","ST_GEOGFROMWKB","ST_GEOGPOINT","ST_GEOGPOINTFROMGEOHASH","ST_GEOHASH","ST_GEOMETRYTYPE","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_INTERSECTSBOX","ST_ISCOLLECTION","ST_ISEMPTY","ST_LENGTH","ST_MAKELINE","ST_MAKEPOLYGON","ST_MAKEPOLYGONORIENTED","ST_MAXDISTANCE","ST_NPOINTS","ST_NUMGEOMETRIES","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SIMPLIFY","ST_SNAPTOGRID","ST_STARTPOINT","ST_TOUCHES","ST_UNION","ST_UNION_AGG","ST_WITHIN","ST_X","ST_Y","FARM_FINGERPRINT","MD5","SHA1","SHA256","SHA512","HLL_COUNT.INIT","HLL_COUNT.MERGE","HLL_COUNT.MERGE_PARTIAL","HLL_COUNT.EXTRACT","MAKE_INTERVAL","EXTRACT","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL","JSON_EXTRACT","JSON_QUERY","JSON_EXTRACT_SCALAR","JSON_VALUE","JSON_EXTRACT_ARRAY","JSON_QUERY_ARRAY","JSON_EXTRACT_STRING_ARRAY","JSON_VALUE_ARRAY","TO_JSON_STRING","ABS","SIGN","IS_INF","IS_NAN","IEEE_DIVIDE","RAND","SQRT","POW","POWER","EXP","LN","LOG","LOG10","GREATEST","LEAST","DIV","SAFE_DIVIDE","SAFE_MULTIPLY","SAFE_NEGATE","SAFE_ADD","SAFE_SUBTRACT","MOD","ROUND","TRUNC","CEIL","CEILING","FLOOR","COS","COSH","ACOS","ACOSH","SIN","SINH","ASIN","ASINH","TAN","TANH","ATAN","ATANH","ATAN2","RANGE_BUCKET","FIRST_VALUE","LAST_VALUE","NTH_VALUE","LEAD","LAG","PERCENTILE_CONT","PERCENTILE_DISC","NET.IP_FROM_STRING","NET.SAFE_IP_FROM_STRING","NET.IP_TO_STRING","NET.IP_NET_MASK","NET.IP_TRUNC","NET.IPV4_FROM_INT64","NET.IPV4_TO_INT64","NET.HOST","NET.PUBLIC_SUFFIX","NET.REG_DOMAIN","RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","NTILE","ROW_NUMBER","SESSION_USER","CORR","COVAR_POP","COVAR_SAMP","STDDEV_POP","STDDEV_SAMP","STDDEV","VAR_POP","VAR_SAMP","VARIANCE","ASCII","BYTE_LENGTH","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CODE_POINTS_TO_BYTES","CODE_POINTS_TO_STRING","CONCAT","CONTAINS_SUBSTR","ENDS_WITH","FORMAT","FROM_BASE32","FROM_BASE64","FROM_HEX","INITCAP","INSTR","LEFT","LENGTH","LPAD","LOWER","LTRIM","NORMALIZE","NORMALIZE_AND_CASEFOLD","OCTET_LENGTH","REGEXP_CONTAINS","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","REPEAT","REVERSE","RIGHT","RPAD","RTRIM","SAFE_CONVERT_BYTES_TO_STRING","SOUNDEX","SPLIT","STARTS_WITH","STRPOS","SUBSTR","SUBSTRING","TO_BASE32","TO_BASE64","TO_CODE_POINTS","TO_HEX","TRANSLATE","TRIM","UNICODE","UPPER","CURRENT_TIME","TIME","EXTRACT","TIME_ADD","TIME_SUB","TIME_DIFF","TIME_TRUNC","FORMAT_TIME","PARSE_TIME","CURRENT_TIMESTAMP","EXTRACT","STRING","TIMESTAMP","TIMESTAMP_ADD","TIMESTAMP_SUB","TIMESTAMP_DIFF","TIMESTAMP_TRUNC","FORMAT_TIMESTAMP","PARSE_TIMESTAMP","TIMESTAMP_SECONDS","TIMESTAMP_MILLIS","TIMESTAMP_MICROS","UNIX_SECONDS","UNIX_MILLIS","UNIX_MICROS","GENERATE_UUID","COALESCE","IF","IFNULL","NULLIF","AVG","BIT_AND","BIT_OR","BIT_XOR","CORR","COUNT","COVAR_POP","COVAR_SAMP","EXACT_COUNT_DISTINCT","FIRST","GROUP_CONCAT","GROUP_CONCAT_UNQUOTED","LAST","MAX","MIN","NEST","NTH","QUANTILES","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","TOP","UNIQUE","VARIANCE","VAR_POP","VAR_SAMP","BIT_COUNT","BOOLEAN","BYTES","CAST","FLOAT","HEX_STRING","INTEGER","STRING","COALESCE","GREATEST","IFNULL","IS_INF","IS_NAN","IS_EXPLICITLY_DEFINED","LEAST","NVL","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE","DATE_ADD","DATEDIFF","DAY","DAYOFWEEK","DAYOFYEAR","FORMAT_UTC_USEC","HOUR","MINUTE","MONTH","MSEC_TO_TIMESTAMP","NOW","PARSE_UTC_USEC","QUARTER","SEC_TO_TIMESTAMP","SECOND","STRFTIME_UTC_USEC","TIME","TIMESTAMP","TIMESTAMP_TO_MSEC","TIMESTAMP_TO_SEC","TIMESTAMP_TO_USEC","USEC_TO_TIMESTAMP","UTC_USEC_TO_DAY","UTC_USEC_TO_HOUR","UTC_USEC_TO_MONTH","UTC_USEC_TO_WEEK","UTC_USEC_TO_YEAR","WEEK","YEAR","FORMAT_IP","PARSE_IP","FORMAT_PACKED_IP","PARSE_PACKED_IP","JSON_EXTRACT","JSON_EXTRACT_SCALAR","ABS","ACOS","ACOSH","ASIN","ASINH","ATAN","ATANH","ATAN2","CEIL","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG2","LOG10","PI","POW","RADIANS","RAND","ROUND","SIN","SINH","SQRT","TAN","TANH","REGEXP_MATCH","REGEXP_EXTRACT","REGEXP_REPLACE","CONCAT","INSTR","LEFT","LENGTH","LOWER","LPAD","LTRIM","REPLACE","RIGHT","RPAD","RTRIM","SPLIT","SUBSTR","UPPER","TABLE_DATE_RANGE","TABLE_DATE_RANGE_STRICT","TABLE_QUERY","HOST","DOMAIN","TLD","AVG","COUNT","MAX","MIN","STDDEV","SUM","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER","CURRENT_USER","EVERY","FROM_BASE64","HASH","FARM_FINGERPRINT","IF","POSITION","SHA1","SOME","TO_BASE64","BQ.JOBS.CANCEL","BQ.REFRESH_MATERIALIZED_VIEW","OPTIONS","PIVOT","UNPIVOT"],keywords$i=["ALL","AND","ANY","AS","ASC","ASSERT_ROWS_MODIFIED","AT","BETWEEN","BY","CASE","CAST","COLLATE","CONTAINS","CREATE","CROSS","CUBE","CURRENT","DEFAULT","DEFINE","DESC","DISTINCT","ELSE","END","ENUM","ESCAPE","EXCEPT","EXCLUDE","EXISTS","EXTRACT","FALSE","FETCH","FOLLOWING","FOR","FROM","FULL","GROUP","GROUPING","GROUPS","HASH","HAVING","IF","IGNORE","IN","INNER","INTERSECT","INTO","IS","JOIN","LATERAL","LEFT","LIMIT","LOOKUP","MERGE","NATURAL","NEW","NO","NOT","NULL","NULLS","OF","ON","OR","ORDER","OUTER","OVER","PARTITION","PRECEDING","PROTO","RANGE","RECURSIVE","RESPECT","RIGHT","ROLLUP","ROWS","SELECT","SET","SOME","TABLE","TABLESAMPLE","THEN","TO","TREAT","TRUE","UNBOUNDED","UNION","UNNEST","USING","WHEN","WHERE","WINDOW","WITH","WITHIN","SAFE","LIKE","COPY","CLONE","IN","OUT","INOUT","RETURNS","LANGUAGE","CASCADE","RESTRICT","DETERMINISTIC"],dataTypes$i=["ARRAY","BOOL","BYTES","DATE","DATETIME","GEOGRAPHY","INTERVAL","INT64","INT","SMALLINT","INTEGER","BIGINT","TINYINT","BYTEINT","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","FLOAT64","STRING","STRUCT","TIME","TIMEZONE"],reservedSelect$i=expandPhrases(["SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]"]),reservedClauses$i=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","QUALIFY","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","OMIT RECORD IF","INSERT [INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]","UPDATE SET","CLUSTER BY","FOR SYSTEM_TIME AS OF","WITH CONNECTION","WITH PARTITION COLUMNS","REMOTE WITH CONNECTION"]),standardOnelineClauses$h=expandPhrases(["CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$h=expandPhrases(["CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]","UPDATE","DELETE [FROM]","DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME TO","ALTER COLUMN [IF EXISTS]","SET DEFAULT COLLATE","SET OPTIONS","DROP NOT NULL","SET DATA TYPE","ALTER SCHEMA [IF EXISTS]","ALTER [MATERIALIZED] VIEW [IF EXISTS]","ALTER BI_CAPACITY","TRUNCATE TABLE","CREATE SCHEMA [IF NOT EXISTS]","DEFAULT COLLATE","CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]","CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]","GRANT TO","FILTER USING","CREATE CAPACITY","AS JSON","CREATE RESERVATION","CREATE ASSIGNMENT","CREATE SEARCH INDEX [IF NOT EXISTS]","DROP SCHEMA [IF EXISTS]","DROP [MATERIALIZED] VIEW [IF EXISTS]","DROP [TABLE] FUNCTION [IF EXISTS]","DROP PROCEDURE [IF EXISTS]","DROP ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","DROP CAPACITY [IF EXISTS]","DROP RESERVATION [IF EXISTS]","DROP ASSIGNMENT [IF EXISTS]","DROP SEARCH INDEX [IF EXISTS]","DROP [IF EXISTS]","GRANT","REVOKE","DECLARE","EXECUTE IMMEDIATE","LOOP","END LOOP","REPEAT","END REPEAT","WHILE","END WHILE","BREAK","LEAVE","CONTINUE","ITERATE","FOR","END FOR","BEGIN","BEGIN TRANSACTION","COMMIT TRANSACTION","ROLLBACK TRANSACTION","RAISE","RETURN","CALL","ASSERT","EXPORT DATA"]),reservedSetOperations$i=expandPhrases(["UNION {ALL | DISTINCT}","EXCEPT DISTINCT","INTERSECT DISTINCT"]),reservedJoins$i=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),reservedKeywordPhrases$h=expandPhrases(["TABLESAMPLE SYSTEM","ANY TYPE","ALL COLUMNS","NOT DETERMINISTIC","{ROWS | RANGE} BETWEEN","IS [NOT] DISTINCT FROM"]),reservedDataTypePhrases$i=expandPhrases([]),bigquery={name:"bigquery",tokenizerOptions:{reservedSelect:reservedSelect$i,reservedClauses:[...reservedClauses$i,...tabularOnelineClauses$h,...standardOnelineClauses$h],reservedSetOperations:reservedSetOperations$i,reservedJoins:reservedJoins$i,reservedKeywordPhrases:reservedKeywordPhrases$h,reservedDataTypePhrases:reservedDataTypePhrases$i,reservedKeywords:keywords$i,reservedDataTypes:dataTypes$i,reservedFunctionNames:functions$i,extraParens:["[]"],stringTypes:[{quote:'""".."""',prefixes:["R","B","RB","BR"]},{quote:"'''..'''",prefixes:["R","B","RB","BR"]},'""-bs',"''-bs",{quote:'""-raw',prefixes:["R","B","RB","BR"],requirePrefix:!0},{quote:"''-raw",prefixes:["R","B","RB","BR"],requirePrefix:!0}],identTypes:["``"],identChars:{dashes:!0},paramTypes:{positional:!0,named:["@"],quoted:["@"]},variableTypes:[{regex:String.raw`@@\w+`}],lineCommentTypes:["--","#"],operators:["&","|","^","~",">>","<<","||","=>"],postProcess:postProcess$3},formatOptions:{onelineClauses:[...standardOnelineClauses$h,...tabularOnelineClauses$h],tabularOnelineClauses:tabularOnelineClauses$h}};function postProcess$3(E){return detectArraySubscripts(combineParameterizedTypes(E))}function detectArraySubscripts(E){let T=EOF_TOKEN;return E.map(e=>e.text==="OFFSET"&&T.text==="["?(T=e,Object.assign(Object.assign({},e),{type:TokenType.RESERVED_FUNCTION_NAME})):(T=e,e))}function combineParameterizedTypes(E){var T;const e=[];for(let R=0;R<E.length;R++){const A=E[R];if((isToken.ARRAY(A)||isToken.STRUCT(A))&&((T=E[R+1])===null||T===void 0?void 0:T.text)==="<"){const O=findClosingAngleBracketIndex(E,R+1),S=E.slice(R,O+1);e.push({type:TokenType.IDENTIFIER,raw:S.map(formatTypeDefToken("raw")).join(""),text:S.map(formatTypeDefToken("text")).join(""),start:A.start}),R=O}else e.push(A)}return e}const formatTypeDefToken=E=>T=>T.type===TokenType.IDENTIFIER||T.type===TokenType.COMMA?T[E]+" ":T[E];function findClosingAngleBracketIndex(E,T){let e=0;for(let R=T;R<E.length;R++){const A=E[R];if(A.text==="<"?e++:A.text===">"?e--:A.text===">>"&&(e-=2),e===0)return R}return E.length-1}const functions$h=["ARRAY_AGG","AVG","CORRELATION","COUNT","COUNT_BIG","COVARIANCE","COVARIANCE_SAMP","CUME_DIST","GROUPING","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_ICPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV","STDDEV_SAMP","SUM","VARIANCE","VARIANCE_SAMP","XMLAGG","XMLGROUP","ABS","ABSVAL","ACOS","ADD_DAYS","ADD_HOURS","ADD_MINUTES","ADD_MONTHS","ADD_SECONDS","ADD_YEARS","AGE","ARRAY_DELETE","ARRAY_FIRST","ARRAY_LAST","ARRAY_NEXT","ARRAY_PRIOR","ASCII","ASCII_STR","ASIN","ATAN","ATAN2","ATANH","BITAND","BITANDNOT","BITOR","BITXOR","BITNOT","BPCHAR","BSON_TO_JSON","BTRIM","CARDINALITY","CEILING","CEIL","CHARACTER_LENGTH","CHR","COALESCE","COLLATION_KEY","COLLATION_KEY_BIT","COMPARE_DECFLOAT","CONCAT","COS","COSH","COT","CURSOR_ROWCOUNT","DATAPARTITIONNUM","DATE_PART","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFWEEK_ISO","DAYOFYEAR","DAYS","DAYS_BETWEEN","DAYS_TO_END_OF_MONTH","DBPARTITIONNUM","DECFLOAT","DECFLOAT_FORMAT","DECODE","DECRYPT_BIN","DECRYPT_CHAR","DEGREES","DEREF","DIFFERENCE","DIGITS","DOUBLE_PRECISION","EMPTY_BLOB","EMPTY_CLOB","EMPTY_DBCLOB","EMPTY_NCLOB","ENCRYPT","EVENT_MON_STATE","EXP","EXTRACT","FIRST_DAY","FLOOR","FROM_UTC_TIMESTAMP","GENERATE_UNIQUE","GETHINT","GREATEST","HASH","HASH4","HASH8","HASHEDVALUE","HEX","HEXTORAW","HOUR","HOURS_BETWEEN","IDENTITY_VAL_LOCAL","IFNULL","INITCAP","INSERT","INSTR","INSTR2","INSTR4","INSTRB","INTNAND","INTNOR","INTNXOR","INTNNOT","ISNULL","JSON_ARRAY","JSON_OBJECT","JSON_QUERY","JSON_TO_BSON","JSON_VALUE","JULIAN_DAY","LAST_DAY","LCASE","LEAST","LEFT","LENGTH","LENGTH2","LENGTH4","LENGTHB","LN","LOCATE","LOCATE_IN_STRING","LOG10","LONG_VARCHAR","LONG_VARGRAPHIC","LOWER","LPAD","LTRIM","MAX","MAX_CARDINALITY","MICROSECOND","MIDNIGHT_SECONDS","MIN","MINUTE","MINUTES_BETWEEN","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","MULTIPLY_ALT","NEXT_DAY","NEXT_MONTH","NEXT_QUARTER","NEXT_WEEK","NEXT_YEAR","NORMALIZE_DECFLOAT","NOW","NULLIF","NVL","NVL2","OCTET_LENGTH","OVERLAY","PARAMETER","POSITION","POSSTR","POW","POWER","QUANTIZE","QUARTER","QUOTE_IDENT","QUOTE_LITERAL","RADIANS","RAISE_ERROR","RAND","RANDOM","RAWTOHEX","REC2XML","REGEXP_COUNT","REGEXP_EXTRACT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_MATCH_COUNT","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","RID","RID_BIT","RIGHT","ROUND","ROUND_TIMESTAMP","RPAD","RTRIM","SECLABEL","SECLABEL_BY_NAME","SECLABEL_TO_CHAR","SECOND","SECONDS_BETWEEN","SIGN","SIN","SINH","SOUNDEX","SPACE","SQRT","STRIP","STRLEFT","STRPOS","STRRIGHT","SUBSTR","SUBSTR2","SUBSTR4","SUBSTRB","SUBSTRING","TABLE_NAME","TABLE_SCHEMA","TAN","TANH","THIS_MONTH","THIS_QUARTER","THIS_WEEK","THIS_YEAR","TIMESTAMP_FORMAT","TIMESTAMP_ISO","TIMESTAMPDIFF","TIMEZONE","TO_CHAR","TO_CLOB","TO_DATE","TO_HEX","TO_MULTI_BYTE","TO_NCHAR","TO_NCLOB","TO_NUMBER","TO_SINGLE_BYTE","TO_TIMESTAMP","TO_UTC_TIMESTAMP","TOTALORDER","TRANSLATE","TRIM","TRIM_ARRAY","TRUNC_TIMESTAMP","TRUNCATE","TRUNC","TYPE_ID","TYPE_NAME","TYPE_SCHEMA","UCASE","UNICODE_STR","UPPER","VALUE","VARCHAR_BIT_FORMAT","VARCHAR_FORMAT","VARCHAR_FORMAT_BIT","VERIFY_GROUP_FOR_USER","VERIFY_ROLE_FOR_USER","VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER","WEEK","WEEK_ISO","WEEKS_BETWEEN","WIDTH_BUCKET","XMLATTRIBUTES","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLNAMESPACES","XMLPARSE","XMLPI","XMLQUERY","XMLROW","XMLSERIALIZE","XMLTEXT","XMLVALIDATE","XMLXSROBJECTID","XSLTRANSFORM","YEAR","YEARS_BETWEEN","YMD_BETWEEN","BASE_TABLE","JSON_TABLE","UNNEST","XMLTABLE","RANK","DENSE_RANK","NTILE","LAG","LEAD","ROW_NUMBER","FIRST_VALUE","LAST_VALUE","NTH_VALUE","RATIO_TO_REPORT","CAST"],keywords$h=["ACTIVATE","ADD","AFTER","ALIAS","ALL","ALLOCATE","ALLOW","ALTER","AND","ANY","AS","ASENSITIVE","ASSOCIATE","ASUTIME","AT","ATTRIBUTES","AUDIT","AUTHORIZATION","AUX","AUXILIARY","BEFORE","BEGIN","BETWEEN","BINARY","BUFFERPOOL","BY","CACHE","CALL","CALLED","CAPTURE","CARDINALITY","CASCADED","CASE","CAST","CHECK","CLONE","CLOSE","CLUSTER","COLLECTION","COLLID","COLUMN","COMMENT","COMMIT","CONCAT","CONDITION","CONNECT","CONNECTION","CONSTRAINT","CONTAINS","CONTINUE","COUNT","COUNT_BIG","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_LC_CTYPE","CURRENT_PATH","CURRENT_SCHEMA","CURRENT_SERVER","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DATAPARTITIONNAME","DATAPARTITIONNUM","DAY","DAYS","DB2GENERAL","DB2GENRL","DB2SQL","DBINFO","DBPARTITIONNAME","DBPARTITIONNUM","DEALLOCATE","DECLARE","DEFAULT","DEFAULTS","DEFINITION","DELETE","DENSERANK","DENSE_RANK","DESCRIBE","DESCRIPTOR","DETERMINISTIC","DIAGNOSTICS","DISABLE","DISALLOW","DISCONNECT","DISTINCT","DO","DOCUMENT","DROP","DSSIZE","DYNAMIC","EACH","EDITPROC","ELSE","ELSEIF","ENABLE","ENCODING","ENCRYPTION","END","END-EXEC","ENDING","ERASE","ESCAPE","EVERY","EXCEPT","EXCEPTION","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXPLAIN","EXTENDED","EXTERNAL","EXTRACT","FENCED","FETCH","FIELDPROC","FILE","FINAL","FIRST1","FOR","FOREIGN","FREE","FROM","FULL","FUNCTION","GENERAL","GENERATED","GET","GLOBAL","GO","GOTO","GRANT","GRAPHIC","GROUP","HANDLER","HASH","HASHED_VALUE","HAVING","HINT","HOLD","HOUR","HOURS","IDENTITY","IF","IMMEDIATE","IMPORT","IN","INCLUDING","INCLUSIVE","INCREMENT","INDEX","INDICATOR","INDICATORS","INF","INFINITY","INHERIT","INNER","INOUT","INSENSITIVE","INSERT","INTEGRITY","INTERSECT","INTO","IS","ISNULL","ISOBID","ISOLATION","ITERATE","JAR","JAVA","JOIN","KEEP","KEY","LABEL","LANGUAGE","LAST3","LATERAL","LC_CTYPE","LEAVE","LEFT","LIKE","LIMIT","LINKTYPE","LOCAL","LOCALDATE","LOCALE","LOCALTIME","LOCALTIMESTAMP","LOCATOR","LOCATORS","LOCK","LOCKMAX","LOCKSIZE","LOOP","MAINTAINED","MATERIALIZED","MAXVALUE","MICROSECOND","MICROSECONDS","MINUTE","MINUTES","MINVALUE","MODE","MODIFIES","MONTH","MONTHS","NAN","NEW","NEW_TABLE","NEXTVAL","NO","NOCACHE","NOCYCLE","NODENAME","NODENUMBER","NOMAXVALUE","NOMINVALUE","NONE","NOORDER","NORMALIZED","NOT2","NOTNULL","NULL","NULLS","NUMPARTS","OBID","OF","OFF","OFFSET","OLD","OLD_TABLE","ON","OPEN","OPTIMIZATION","OPTIMIZE","OPTION","OR","ORDER","OUT","OUTER","OVER","OVERRIDING","PACKAGE","PADDED","PAGESIZE","PARAMETER","PART","PARTITION","PARTITIONED","PARTITIONING","PARTITIONS","PASSWORD","PATH","PERCENT","PIECESIZE","PLAN","POSITION","PRECISION","PREPARE","PREVVAL","PRIMARY","PRIQTY","PRIVILEGES","PROCEDURE","PROGRAM","PSID","PUBLIC","QUERY","QUERYNO","RANGE","RANK","READ","READS","RECOVERY","REFERENCES","REFERENCING","REFRESH","RELEASE","RENAME","REPEAT","RESET","RESIGNAL","RESTART","RESTRICT","RESULT","RESULT_SET_LOCATOR","RETURN","RETURNS","REVOKE","RIGHT","ROLE","ROLLBACK","ROUND_CEILING","ROUND_DOWN","ROUND_FLOOR","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_UP","ROUND_UP","ROUTINE","ROW","ROWNUMBER","ROWS","ROWSET","ROW_NUMBER","RRN","RUN","SAVEPOINT","SCHEMA","SCRATCHPAD","SCROLL","SEARCH","SECOND","SECONDS","SECQTY","SECURITY","SELECT","SENSITIVE","SEQUENCE","SESSION","SESSION_USER","SET","SIGNAL","SIMPLE","SNAN","SOME","SOURCE","SPECIFIC","SQL","SQLID","STACKED","STANDARD","START","STARTING","STATEMENT","STATIC","STATMENT","STAY","STOGROUP","STORES","STYLE","SUBSTRING","SUMMARY","SYNONYM","SYSFUN","SYSIBM","SYSPROC","SYSTEM","SYSTEM_USER","TABLE","TABLESPACE","THEN","TO","TRANSACTION","TRIGGER","TRIM","TRUNCATE","TYPE","UNDO","UNION","UNIQUE","UNTIL","UPDATE","USAGE","USER","USING","VALIDPROC","VALUE","VALUES","VARIABLE","VARIANT","VCAT","VERSION","VIEW","VOLATILE","VOLUMES","WHEN","WHENEVER","WHERE","WHILE","WITH","WITHOUT","WLM","WRITE","XMLELEMENT","XMLEXISTS","XMLNAMESPACES","YEAR","YEARS"],dataTypes$h=["ARRAY","BIGINT","BINARY","BLOB","BOOLEAN","CCSID","CHAR","CHARACTER","CLOB","DATE","DATETIME","DBCLOB","DEC","DECIMAL","DOUBLE","DOUBLE PRECISION","FLOAT","FLOAT4","FLOAT8","GRAPHIC","INT","INT2","INT4","INT8","INTEGER","INTERVAL","LONG VARCHAR","LONG VARGRAPHIC","NCHAR","NCHR","NCLOB","NVARCHAR","NUMERIC","SMALLINT","REAL","TIME","TIMESTAMP","VARBINARY","VARCHAR","VARGRAPHIC"],reservedSelect$h=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$h=expandPhrases(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY [INPUT SEQUENCE]","LIMIT","OFFSET","FETCH NEXT","FOR UPDATE [OF]","FOR {READ | FETCH} ONLY","FOR {RR | CS | UR | RS} [USE AND KEEP {SHARE | UPDATE | EXCLUSIVE} LOCKS]","WAIT FOR OUTCOME","SKIP LOCKED DATA","INTO","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT"]),standardOnelineClauses$g=expandPhrases(["CREATE [GLOBAL TEMPORARY | EXTERNAL] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$g=expandPhrases(["CREATE [OR REPLACE] VIEW","UPDATE","WHERE CURRENT OF","WITH {RR | RS | CS | UR}","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME COLUMN","ALTER [COLUMN]","SET DATA TYPE","SET NOT NULL","DROP {DEFAULT | GENERATED | NOT NULL}","TRUNCATE [TABLE]","ALLOCATE","ALTER AUDIT POLICY","ALTER BUFFERPOOL","ALTER DATABASE PARTITION GROUP","ALTER DATABASE","ALTER EVENT MONITOR","ALTER FUNCTION","ALTER HISTOGRAM TEMPLATE","ALTER INDEX","ALTER MASK","ALTER METHOD","ALTER MODULE","ALTER NICKNAME","ALTER PACKAGE","ALTER PERMISSION","ALTER PROCEDURE","ALTER SCHEMA","ALTER SECURITY LABEL COMPONENT","ALTER SECURITY POLICY","ALTER SEQUENCE","ALTER SERVER","ALTER SERVICE CLASS","ALTER STOGROUP","ALTER TABLESPACE","ALTER THRESHOLD","ALTER TRIGGER","ALTER TRUSTED CONTEXT","ALTER TYPE","ALTER USAGE LIST","ALTER USER MAPPING","ALTER VIEW","ALTER WORK ACTION SET","ALTER WORK CLASS SET","ALTER WORKLOAD","ALTER WRAPPER","ALTER XSROBJECT","ALTER STOGROUP","ALTER TABLESPACE","ALTER TRIGGER","ALTER TRUSTED CONTEXT","ALTER VIEW","ASSOCIATE [RESULT SET] {LOCATOR | LOCATORS}","AUDIT","BEGIN DECLARE SECTION","CALL","CLOSE","COMMENT ON","COMMIT [WORK]","CONNECT","CREATE [OR REPLACE] [PUBLIC] ALIAS","CREATE AUDIT POLICY","CREATE BUFFERPOOL","CREATE DATABASE PARTITION GROUP","CREATE EVENT MONITOR","CREATE [OR REPLACE] FUNCTION","CREATE FUNCTION MAPPING","CREATE HISTOGRAM TEMPLATE","CREATE [UNIQUE] INDEX","CREATE INDEX EXTENSION","CREATE [OR REPLACE] MASK","CREATE [SPECIFIC] METHOD","CREATE [OR REPLACE] MODULE","CREATE [OR REPLACE] NICKNAME","CREATE [OR REPLACE] PERMISSION","CREATE [OR REPLACE] PROCEDURE","CREATE ROLE","CREATE SCHEMA","CREATE SECURITY LABEL [COMPONENT]","CREATE SECURITY POLICY","CREATE [OR REPLACE] SEQUENCE","CREATE SERVICE CLASS","CREATE SERVER","CREATE STOGROUP","CREATE SYNONYM","CREATE [LARGE | REGULAR | {SYSTEM | USER} TEMPORARY] TABLESPACE","CREATE THRESHOLD","CREATE {TRANSFORM | TRANSFORMS} FOR","CREATE [OR REPLACE] TRIGGER","CREATE TRUSTED CONTEXT","CREATE [OR REPLACE] TYPE","CREATE TYPE MAPPING","CREATE USAGE LIST","CREATE USER MAPPING FOR","CREATE [OR REPLACE] VARIABLE","CREATE WORK ACTION SET","CREATE WORK CLASS SET","CREATE WORKLOAD","CREATE WRAPPER","DECLARE","DECLARE GLOBAL TEMPORARY TABLE","DESCRIBE [INPUT | OUTPUT]","DISCONNECT","DROP [PUBLIC] ALIAS","DROP AUDIT POLICY","DROP BUFFERPOOL","DROP DATABASE PARTITION GROUP","DROP EVENT MONITOR","DROP [SPECIFIC] FUNCTION","DROP FUNCTION MAPPING","DROP HISTOGRAM TEMPLATE","DROP INDEX [EXTENSION]","DROP MASK","DROP [SPECIFIC] METHOD","DROP MODULE","DROP NICKNAME","DROP PACKAGE","DROP PERMISSION","DROP [SPECIFIC] PROCEDURE","DROP ROLE","DROP SCHEMA","DROP SECURITY LABEL [COMPONENT]","DROP SECURITY POLICY","DROP SEQUENCE","DROP SERVER","DROP SERVICE CLASS","DROP STOGROUP","DROP TABLE HIERARCHY","DROP {TABLESPACE | TABLESPACES}","DROP {TRANSFORM | TRANSFORMS}","DROP THRESHOLD","DROP TRIGGER","DROP TRUSTED CONTEXT","DROP TYPE [MAPPING]","DROP USAGE LIST","DROP USER MAPPING FOR","DROP VARIABLE","DROP VIEW [HIERARCHY]","DROP WORK {ACTION | CLASS} SET","DROP WORKLOAD","DROP WRAPPER","DROP XSROBJECT","END DECLARE SECTION","EXECUTE [IMMEDIATE]","EXPLAIN {PLAN [SECTION] | ALL}","FETCH [FROM]","FLUSH {BUFFERPOOL | BUFFERPOOLS} ALL","FLUSH EVENT MONITOR","FLUSH FEDERATED CACHE","FLUSH OPTIMIZATION PROFILE CACHE","FLUSH PACKAGE CACHE [DYNAMIC]","FLUSH AUTHENTICATION CACHE [FOR ALL]","FREE LOCATOR","GET DIAGNOSTICS","GOTO","GRANT","INCLUDE","ITERATE","LEAVE","LOCK TABLE","LOOP","OPEN","PIPE","PREPARE","REFRESH TABLE","RELEASE","RELEASE [TO] SAVEPOINT","RENAME [TABLE | INDEX | STOGROUP | TABLESPACE]","REPEAT","RESIGNAL","RETURN","REVOKE","ROLLBACK [WORK] [TO SAVEPOINT]","SAVEPOINT","SET COMPILATION ENVIRONMENT","SET CONNECTION","SET CURRENT","SET ENCRYPTION PASSWORD","SET EVENT MONITOR STATE","SET INTEGRITY","SET PASSTHRU","SET PATH","SET ROLE","SET SCHEMA","SET SERVER OPTION","SET {SESSION AUTHORIZATION | SESSION_USER}","SET USAGE LIST","SIGNAL","TRANSFER OWNERSHIP OF","WHENEVER {NOT FOUND | SQLERROR | SQLWARNING}","WHILE"]),reservedSetOperations$h=expandPhrases(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),reservedJoins$h=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),reservedKeywordPhrases$g=expandPhrases(["ON DELETE","ON UPDATE","SET NULL","{ROWS | RANGE} BETWEEN"]),reservedDataTypePhrases$h=expandPhrases([]),db2={name:"db2",tokenizerOptions:{reservedSelect:reservedSelect$h,reservedClauses:[...reservedClauses$h,...standardOnelineClauses$g,...tabularOnelineClauses$g],reservedSetOperations:reservedSetOperations$h,reservedJoins:reservedJoins$h,reservedKeywordPhrases:reservedKeywordPhrases$g,reservedDataTypePhrases:reservedDataTypePhrases$h,reservedKeywords:keywords$h,reservedDataTypes:dataTypes$h,reservedFunctionNames:functions$h,extraParens:["[]"],stringTypes:[{quote:"''-qq",prefixes:["G","N","U&"]},{quote:"''-raw",prefixes:["X","BX","GX","UX"],requirePrefix:!0}],identTypes:['""-qq'],identChars:{first:"@#$",rest:"@#$"},paramTypes:{positional:!0,named:[":"]},paramChars:{first:"@#$",rest:"@#$"},operators:["**","%","|","&","^","~","¬=","¬>","¬<","!>","!<","^=","^>","^<","||","->","=>"]},formatOptions:{onelineClauses:[...standardOnelineClauses$g,...tabularOnelineClauses$g],tabularOnelineClauses:tabularOnelineClauses$g}},functions$g=["ARRAY_AGG","AVG","CORR","CORRELATION","COUNT","COUNT_BIG","COVAR_POP","COVARIANCE","COVAR","COVAR_SAMP","COVARIANCE_SAMP","EVERY","GROUPING","JSON_ARRAYAGG","JSON_OBJECTAGG","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","SOME","STDDEV_POP","STDDEV","STDDEV_SAMP","SUM","VAR_POP","VARIANCE","VAR","VAR_SAMP","VARIANCE_SAMP","XMLAGG","XMLGROUP","ABS","ABSVAL","ACOS","ADD_DAYS","ADD_HOURS","ADD_MINUTES","ADD_MONTHS","ADD_SECONDS","ADD_YEARS","ANTILOG","ARRAY_MAX_CARDINALITY","ARRAY_TRIM","ASCII","ASIN","ATAN","ATAN2","ATANH","BASE64_DECODE","BASE64_ENCODE","BIT_LENGTH","BITAND","BITANDNOT","BITNOT","BITOR","BITXOR","BSON_TO_JSON","CARDINALITY","CEIL","CEILING","CHAR_LENGTH","CHARACTER_LENGTH","CHR","COALESCE","COMPARE_DECFLOAT","CONCAT","CONTAINS","COS","COSH","COT","CURDATE","CURTIME","DATABASE","DATAPARTITIONNAME","DATAPARTITIONNUM","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK_ISO","DAYOFWEEK","DAYOFYEAR","DAYS","DBPARTITIONNAME","DBPARTITIONNUM","DECFLOAT_FORMAT","DECFLOAT_SORTKEY","DECRYPT_BINARY","DECRYPT_BIT","DECRYPT_CHAR","DECRYPT_DB","DEGREES","DIFFERENCE","DIGITS","DLCOMMENT","DLLINKTYPE","DLURLCOMPLETE","DLURLPATH","DLURLPATHONLY","DLURLSCHEME","DLURLSERVER","DLVALUE","DOUBLE_PRECISION","DOUBLE","ENCRPYT","ENCRYPT_AES","ENCRYPT_AES256","ENCRYPT_RC2","ENCRYPT_TDES","EXP","EXTRACT","FIRST_DAY","FLOOR","GENERATE_UNIQUE","GET_BLOB_FROM_FILE","GET_CLOB_FROM_FILE","GET_DBCLOB_FROM_FILE","GET_XML_FILE","GETHINT","GREATEST","HASH_MD5","HASH_ROW","HASH_SHA1","HASH_SHA256","HASH_SHA512","HASH_VALUES","HASHED_VALUE","HEX","HEXTORAW","HOUR","HTML_ENTITY_DECODE","HTML_ENTITY_ENCODE","HTTP_DELETE_BLOB","HTTP_DELETE","HTTP_GET_BLOB","HTTP_GET","HTTP_PATCH_BLOB","HTTP_PATCH","HTTP_POST_BLOB","HTTP_POST","HTTP_PUT_BLOB","HTTP_PUT","IDENTITY_VAL_LOCAL","IFNULL","INSERT","INSTR","INTERPRET","ISFALSE","ISNOTFALSE","ISNOTTRUE","ISTRUE","JSON_ARRAY","JSON_OBJECT","JSON_QUERY","JSON_TO_BSON","JSON_UPDATE","JSON_VALUE","JULIAN_DAY","LAND","LAST_DAY","LCASE","LEAST","LEFT","LENGTH","LN","LNOT","LOCATE_IN_STRING","LOCATE","LOG10","LOR","LOWER","LPAD","LTRIM","MAX_CARDINALITY","MAX","MICROSECOND","MIDNIGHT_SECONDS","MIN","MINUTE","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","MQREAD","MQREADCLOB","MQRECEIVE","MQRECEIVECLOB","MQSEND","MULTIPLY_ALT","NEXT_DAY","NORMALIZE_DECFLOAT","NOW","NULLIF","NVL","OCTET_LENGTH","OVERLAY","PI","POSITION","POSSTR","POW","POWER","QUANTIZE","QUARTER","RADIANS","RAISE_ERROR","RANDOM","RAND","REGEXP_COUNT","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","RID","RIGHT","ROUND_TIMESTAMP","ROUND","RPAD","RRN","RTRIM","SCORE","SECOND","SIGN","SIN","SINH","SOUNDEX","SPACE","SQRT","STRIP","STRLEFT","STRPOS","STRRIGHT","SUBSTR","SUBSTRING","TABLE_NAME","TABLE_SCHEMA","TAN","TANH","TIMESTAMP_FORMAT","TIMESTAMP_ISO","TIMESTAMPDIFF_BIG","TIMESTAMPDIFF","TO_CHAR","TO_CLOB","TO_DATE","TO_NUMBER","TO_TIMESTAMP","TOTALORDER","TRANSLATE","TRIM_ARRAY","TRIM","TRUNC_TIMESTAMP","TRUNC","TRUNCATE","UCASE","UPPER","URL_DECODE","URL_ENCODE","VALUE","VARBINARY_FORMAT","VARCHAR_BIT_FORMAT","VARCHAR_FORMAT_BINARY","VARCHAR_FORMAT","VERIFY_GROUP_FOR_USER","WEEK_ISO","WEEK","WRAP","XMLATTRIBUTES","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLNAMESPACES","XMLPARSE","XMLPI","XMLROW","XMLSERIALIZE","XMLTEXT","XMLVALIDATE","XOR","XSLTRANSFORM","YEAR","ZONED","BASE_TABLE","HTTP_DELETE_BLOB_VERBOSE","HTTP_DELETE_VERBOSE","HTTP_GET_BLOB_VERBOSE","HTTP_GET_VERBOSE","HTTP_PATCH_BLOB_VERBOSE","HTTP_PATCH_VERBOSE","HTTP_POST_BLOB_VERBOSE","HTTP_POST_VERBOSE","HTTP_PUT_BLOB_VERBOSE","HTTP_PUT_VERBOSE","JSON_TABLE","MQREADALL","MQREADALLCLOB","MQRECEIVEALL","MQRECEIVEALLCLOB","XMLTABLE","UNPACK","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","RATIO_TO_REPORT","ROW_NUMBER","CAST"],keywords$g=["ABSENT","ACCORDING","ACCTNG","ACTION","ACTIVATE","ADD","ALIAS","ALL","ALLOCATE","ALLOW","ALTER","AND","ANY","APPEND","APPLNAME","ARRAY","ARRAY_AGG","ARRAY_TRIM","AS","ASC","ASENSITIVE","ASSOCIATE","ATOMIC","ATTACH","ATTRIBUTES","AUTHORIZATION","AUTONOMOUS","BEFORE","BEGIN","BETWEEN","BIND","BSON","BUFFERPOOL","BY","CACHE","CALL","CALLED","CARDINALITY","CASE","CAST","CHECK","CL","CLOSE","CLUSTER","COLLECT","COLLECTION","COLUMN","COMMENT","COMMIT","COMPACT","COMPARISONS","COMPRESS","CONCAT","CONCURRENT","CONDITION","CONNECT","CONNECT_BY_ROOT","CONNECTION","CONSTANT","CONSTRAINT","CONTAINS","CONTENT","CONTINUE","COPY","COUNT","COUNT_BIG","CREATE","CREATEIN","CROSS","CUBE","CUME_DIST","CURRENT","CURRENT_DATE","CURRENT_PATH","CURRENT_SCHEMA","CURRENT_SERVER","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","CURSOR","CYCLE","DATABASE","DATAPARTITIONNAME","DATAPARTITIONNUM","DAY","DAYS","DB2GENERAL","DB2GENRL","DB2SQL","DBINFO","DBPARTITIONNAME","DBPARTITIONNUM","DEACTIVATE","DEALLOCATE","DECLARE","DEFAULT","DEFAULTS","DEFER","DEFINE","DEFINITION","DELETE","DELETING","DENSE_RANK","DENSERANK","DESC","DESCRIBE","DESCRIPTOR","DETACH","DETERMINISTIC","DIAGNOSTICS","DISABLE","DISALLOW","DISCONNECT","DISTINCT","DO","DOCUMENT","DROP","DYNAMIC","EACH","ELSE","ELSEIF","EMPTY","ENABLE","ENCODING","ENCRYPTION","END","END-EXEC","ENDING","ENFORCED","ERROR","ESCAPE","EVERY","EXCEPT","EXCEPTION","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTEND","EXTERNAL","EXTRACT","FALSE","FENCED","FETCH","FIELDPROC","FILE","FINAL","FIRST_VALUE","FOR","FOREIGN","FORMAT","FREE","FREEPAGE","FROM","FULL","FUNCTION","GBPCACHE","GENERAL","GENERATED","GET","GLOBAL","GO","GOTO","GRANT","GROUP","HANDLER","HASH","HASH_ROW","HASHED_VALUE","HAVING","HINT","HOLD","HOUR","HOURS","IDENTITY","IF","IGNORE","IMMEDIATE","IMPLICITLY","IN","INCLUDE","INCLUDING","INCLUSIVE","INCREMENT","INDEX","INDEXBP","INDICATOR","INF","INFINITY","INHERIT","INLINE","INNER","INOUT","INSENSITIVE","INSERT","INSERTING","INTEGRITY","INTERPRET","INTERSECT","INTO","IS","ISNULL","ISOLATION","ITERATE","JAVA","JOIN","JSON","JSON_ARRAY","JSON_ARRAYAGG","JSON_EXISTS","JSON_OBJECT","JSON_OBJECTAGG","JSON_QUERY","JSON_TABLE","JSON_VALUE","KEEP","KEY","KEYS","LABEL","LAG","LANGUAGE","LAST_VALUE","LATERAL","LEAD","LEAVE","LEFT","LEVEL2","LIKE","LIMIT","LINKTYPE","LISTAGG","LOCAL","LOCALDATE","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCATOR","LOCK","LOCKSIZE","LOG","LOGGED","LOOP","MAINTAINED","MASK","MATCHED","MATERIALIZED","MAXVALUE","MERGE","MICROSECOND","MICROSECONDS","MINPCTUSED","MINUTE","MINUTES","MINVALUE","MIRROR","MIXED","MODE","MODIFIES","MONTH","MONTHS","NAMESPACE","NAN","NATIONAL","NCHAR","NCLOB","NESTED","NEW","NEW_TABLE","NEXTVAL","NO","NOCACHE","NOCYCLE","NODENAME","NODENUMBER","NOMAXVALUE","NOMINVALUE","NONE","NOORDER","NORMALIZED","NOT","NOTNULL","NTH_VALUE","NTILE","NULL","NULLS","NVARCHAR","OBID","OBJECT","OF","OFF","OFFSET","OLD","OLD_TABLE","OMIT","ON","ONLY","OPEN","OPTIMIZE","OPTION","OR","ORDER","ORDINALITY","ORGANIZE","OUT","OUTER","OVER","OVERLAY","OVERRIDING","PACKAGE","PADDED","PAGE","PAGESIZE","PARAMETER","PART","PARTITION","PARTITIONED","PARTITIONING","PARTITIONS","PASSING","PASSWORD","PATH","PCTFREE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PERIOD","PERMISSION","PIECESIZE","PIPE","PLAN","POSITION","PREPARE","PREVVAL","PRIMARY","PRIOR","PRIQTY","PRIVILEGES","PROCEDURE","PROGRAM","PROGRAMID","QUERY","RANGE","RANK","RATIO_TO_REPORT","RCDFMT","READ","READS","RECOVERY","REFERENCES","REFERENCING","REFRESH","REGEXP_LIKE","RELEASE","RENAME","REPEAT","RESET","RESIGNAL","RESTART","RESULT","RESULT_SET_LOCATOR","RETURN","RETURNING","RETURNS","REVOKE","RID","RIGHT","ROLLBACK","ROLLUP","ROUTINE","ROW","ROW_NUMBER","ROWNUMBER","ROWS","RRN","RUN","SAVEPOINT","SBCS","SCALAR","SCHEMA","SCRATCHPAD","SCROLL","SEARCH","SECOND","SECONDS","SECQTY","SECURED","SELECT","SENSITIVE","SEQUENCE","SESSION","SESSION_USER","SET","SIGNAL","SIMPLE","SKIP","SNAN","SOME","SOURCE","SPECIFIC","SQL","SQLID","SQLIND_DEFAULT","SQLIND_UNASSIGNED","STACKED","START","STARTING","STATEMENT","STATIC","STOGROUP","SUBSTRING","SUMMARY","SYNONYM","SYSTEM_TIME","SYSTEM_USER","TABLE","TABLESPACE","TABLESPACES","TAG","THEN","THREADSAFE","TO","TRANSACTION","TRANSFER","TRIGGER","TRIM","TRIM_ARRAY","TRUE","TRUNCATE","TRY_CAST","TYPE","UNDO","UNION","UNIQUE","UNIT","UNKNOWN","UNNEST","UNTIL","UPDATE","UPDATING","URI","USAGE","USE","USER","USERID","USING","VALUE","VALUES","VARIABLE","VARIANT","VCAT","VERSION","VERSIONING","VIEW","VOLATILE","WAIT","WHEN","WHENEVER","WHERE","WHILE","WITH","WITHIN","WITHOUT","WRAPPED","WRAPPER","WRITE","WRKSTNNAME","XMLAGG","XMLATTRIBUTES","XMLCAST","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLGROUP","XMLNAMESPACES","XMLPARSE","XMLPI","XMLROW","XMLSERIALIZE","XMLTABLE","XMLTEXT","XMLVALIDATE","XSLTRANSFORM","XSROBJECT","YEAR","YEARS","YES","ZONE"],dataTypes$g=["ARRAY","BIGINT","BINARY","BIT","BLOB","BOOLEAN","CCSID","CHAR","CHARACTER","CLOB","DATA","DATALINK","DATE","DBCLOB","DECFLOAT","DECIMAL","DEC","DOUBLE","DOUBLE PRECISION","FLOAT","GRAPHIC","INT","INTEGER","LONG","NUMERIC","REAL","ROWID","SMALLINT","TIME","TIMESTAMP","VARBINARY","VARCHAR","VARGRAPHIC","XML"],reservedSelect$g=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$g=expandPhrases(["WITH [RECURSIVE]","INTO","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER [SIBLINGS] BY [INPUT SEQUENCE]","LIMIT","OFFSET","FETCH {FIRST | NEXT}","FOR UPDATE [OF]","FOR READ ONLY","OPTIMIZE FOR","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","DELETE","INSERT","FOR SYSTEM NAME"]),standardOnelineClauses$f=expandPhrases(["CREATE [OR REPLACE] TABLE"]),tabularOnelineClauses$f=expandPhrases(["CREATE [OR REPLACE] [RECURSIVE] VIEW","UPDATE","WHERE CURRENT OF","WITH {NC | RR | RS | CS | UR}","DELETE FROM","DROP TABLE","ALTER TABLE","ADD [COLUMN]","ALTER [COLUMN]","DROP [COLUMN]","SET DATA TYPE","SET {GENERATED ALWAYS | GENERATED BY DEFAULT}","SET NOT NULL","SET {NOT HIDDEN | IMPLICITLY HIDDEN}","SET FIELDPROC","DROP {DEFAULT | NOT NULL | GENERATED | IDENTITY | ROW CHANGE TIMESTAMP | FIELDPROC}","TRUNCATE [TABLE]","SET [CURRENT] SCHEMA","SET CURRENT_SCHEMA","ALLOCATE CURSOR","ALLOCATE [SQL] DESCRIPTOR [LOCAL | GLOBAL] SQL","ALTER [SPECIFIC] {FUNCTION | PROCEDURE}","ALTER {MASK | PERMISSION | SEQUENCE | TRIGGER}","ASSOCIATE [RESULT SET] {LOCATOR | LOCATORS}","BEGIN DECLARE SECTION","CALL","CLOSE","COMMENT ON {ALIAS | COLUMN | CONSTRAINT | INDEX | MASK | PACKAGE | PARAMETER | PERMISSION | SEQUENCE | TABLE | TRIGGER | VARIABLE | XSROBJECT}","COMMENT ON [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE}","COMMENT ON PARAMETER SPECIFIC {FUNCTION | PROCEDURE | ROUTINE}","COMMENT ON [TABLE FUNCTION] RETURN COLUMN","COMMENT ON [TABLE FUNCTION] RETURN COLUMN SPECIFIC [PROCEDURE | ROUTINE]","COMMIT [WORK] [HOLD]","CONNECT [TO | RESET] USER","CREATE [OR REPLACE] {ALIAS | FUNCTION | MASK | PERMISSION | PROCEDURE | SEQUENCE | TRIGGER | VARIABLE}","CREATE [ENCODED VECTOR] INDEX","CREATE UNIQUE [WHERE NOT NULL] INDEX","CREATE SCHEMA","CREATE TYPE","DEALLOCATE [SQL] DESCRIPTOR [LOCAL | GLOBAL]","DECLARE CURSOR","DECLARE GLOBAL TEMPORARY TABLE","DECLARE","DESCRIBE CURSOR","DESCRIBE INPUT","DESCRIBE [OUTPUT]","DESCRIBE {PROCEDURE | ROUTINE}","DESCRIBE TABLE","DISCONNECT ALL [SQL]","DISCONNECT [CURRENT]","DROP {ALIAS | INDEX | MASK | PACKAGE | PERMISSION | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT} [IF EXISTS]","DROP [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE} [IF EXISTS]","END DECLARE SECTION","EXECUTE [IMMEDIATE]","FREE LOCATOR","GET [SQL] DESCRIPTOR [LOCAL | GLOBAL]","GET [CURRENT | STACKED] DIAGNOSTICS","GRANT {ALL [PRIVILEGES] | ALTER | EXECUTE} ON {FUNCTION | PROCEDURE | ROUTINE | PACKAGE | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT}","HOLD LOCATOR","INCLUDE","LABEL ON {ALIAS | COLUMN | CONSTRAINT | INDEX | MASK | PACKAGE | PERMISSION | SEQUENCE | TABLE | TRIGGER | VARIABLE | XSROBJECT}","LABEL ON [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE}","LOCK TABLE","OPEN","PREPARE","REFRESH TABLE","RELEASE","RELEASE [TO] SAVEPOINT","RENAME [TABLE | INDEX] TO","REVOKE {ALL [PRIVILEGES] | ALTER | EXECUTE} ON {FUNCTION | PROCEDURE | ROUTINE | PACKAGE | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT}","ROLLBACK [WORK] [HOLD | TO SAVEPOINT]","SAVEPOINT","SET CONNECTION","SET CURRENT {DEBUG MODE | DECFLOAT ROUNDING MODE | DEGREE | IMPLICIT XMLPARSE OPTION | TEMPORAL SYSTEM_TIME}","SET [SQL] DESCRIPTOR [LOCAL | GLOBAL]","SET ENCRYPTION PASSWORD","SET OPTION","SET {[CURRENT [FUNCTION]] PATH | CURRENT_PATH}","SET RESULT SETS [WITH RETURN [TO CALLER | TO CLIENT]]","SET SESSION AUTHORIZATION","SET SESSION_USER","SET TRANSACTION","SIGNAL SQLSTATE [VALUE]","TAG","TRANSFER OWNERSHIP OF","WHENEVER {NOT FOUND | SQLERROR | SQLWARNING}"]),reservedSetOperations$g=expandPhrases(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),reservedJoins$g=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","[LEFT | RIGHT] EXCEPTION JOIN","{INNER | CROSS} JOIN"]),reservedKeywordPhrases$f=expandPhrases(["ON DELETE","ON UPDATE","SET NULL","{ROWS | RANGE} BETWEEN"]),reservedDataTypePhrases$g=expandPhrases([]),db2i={name:"db2i",tokenizerOptions:{reservedSelect:reservedSelect$g,reservedClauses:[...reservedClauses$g,...standardOnelineClauses$f,...tabularOnelineClauses$f],reservedSetOperations:reservedSetOperations$g,reservedJoins:reservedJoins$g,reservedKeywordPhrases:reservedKeywordPhrases$f,reservedDataTypePhrases:reservedDataTypePhrases$g,reservedKeywords:keywords$g,reservedDataTypes:dataTypes$g,reservedFunctionNames:functions$g,nestedBlockComments:!0,extraParens:["[]"],stringTypes:[{quote:"''-qq",prefixes:["G","N"]},{quote:"''-raw",prefixes:["X","BX","GX","UX"],requirePrefix:!0}],identTypes:['""-qq'],identChars:{first:"@#$",rest:"@#$"},paramTypes:{positional:!0,named:[":"]},paramChars:{first:"@#$",rest:"@#$"},operators:["**","¬=","¬>","¬<","!>","!<","||","=>"]},formatOptions:{onelineClauses:[...standardOnelineClauses$f,...tabularOnelineClauses$f],tabularOnelineClauses:tabularOnelineClauses$f}},functions$f=["ABS","ACOS","ADD","ADD_PARQUET_KEY","AGE","AGGREGATE","ALIAS","ALL_PROFILING_OUTPUT","ANY_VALUE","APPLY","APPROX_COUNT_DISTINCT","APPROX_QUANTILE","ARBITRARY","ARGMAX","ARGMIN","ARG_MAX","ARG_MAX_NULL","ARG_MIN","ARG_MIN_NULL","ARRAY_AGG","ARRAY_AGGR","ARRAY_AGGREGATE","ARRAY_APPEND","ARRAY_APPLY","ARRAY_CAT","ARRAY_CONCAT","ARRAY_CONTAINS","ARRAY_COSINE_SIMILARITY","ARRAY_CROSS_PRODUCT","ARRAY_DISTANCE","ARRAY_DISTINCT","ARRAY_DOT_PRODUCT","ARRAY_EXTRACT","ARRAY_FILTER","ARRAY_GRADE_UP","ARRAY_HAS","ARRAY_HAS_ALL","ARRAY_HAS_ANY","ARRAY_INDEXOF","ARRAY_INNER_PRODUCT","ARRAY_INTERSECT","ARRAY_LENGTH","ARRAY_POP_BACK","ARRAY_POP_FRONT","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_PUSH_BACK","ARRAY_PUSH_FRONT","ARRAY_REDUCE","ARRAY_RESIZE","ARRAY_REVERSE","ARRAY_REVERSE_SORT","ARRAY_SELECT","ARRAY_SLICE","ARRAY_SORT","ARRAY_TO_JSON","ARRAY_TO_STRING","ARRAY_TRANSFORM","ARRAY_UNIQUE","ARRAY_VALUE","ARRAY_WHERE","ARRAY_ZIP","ARROW_SCAN","ARROW_SCAN_DUMB","ASCII","ASIN","ATAN","ATAN2","AVG","BASE64","BIN","BITSTRING","BITSTRING_AGG","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_POSITION","BIT_XOR","BOOL_AND","BOOL_OR","CARDINALITY","CBRT","CEIL","CEILING","CENTURY","CHECKPOINT","CHR","COLLATIONS","COL_DESCRIPTION","COMBINE","CONCAT","CONCAT_WS","CONSTANT_OR_NULL","CONTAINS","COPY_DATABASE","CORR","COS","COT","COUNT","COUNT_IF","COUNT_STAR","COVAR_POP","COVAR_SAMP","CREATE_SORT_KEY","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_DATE","CURRENT_LOCALTIME","CURRENT_LOCALTIMESTAMP","CURRENT_QUERY","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_SETTING","CURRENT_USER","CURRVAL","DAMERAU_LEVENSHTEIN","DATABASE_LIST","DATABASE_SIZE","DATEDIFF","DATEPART","DATESUB","DATETRUNC","DATE_ADD","DATE_DIFF","DATE_PART","DATE_SUB","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECADE","DECODE","DEGREES","DISABLE_CHECKPOINT_ON_SHUTDOWN","DISABLE_OBJECT_CACHE","DISABLE_OPTIMIZER","DISABLE_PRINT_PROGRESS_BAR","DISABLE_PROFILE","DISABLE_PROFILING","DISABLE_PROGRESS_BAR","DISABLE_VERIFICATION","DISABLE_VERIFY_EXTERNAL","DISABLE_VERIFY_FETCH_ROW","DISABLE_VERIFY_PARALLELISM","DISABLE_VERIFY_SERIALIZER","DIVIDE","DUCKDB_COLUMNS","DUCKDB_CONSTRAINTS","DUCKDB_DATABASES","DUCKDB_DEPENDENCIES","DUCKDB_EXTENSIONS","DUCKDB_FUNCTIONS","DUCKDB_INDEXES","DUCKDB_KEYWORDS","DUCKDB_MEMORY","DUCKDB_OPTIMIZERS","DUCKDB_SCHEMAS","DUCKDB_SECRETS","DUCKDB_SEQUENCES","DUCKDB_SETTINGS","DUCKDB_TABLES","DUCKDB_TEMPORARY_FILES","DUCKDB_TYPES","DUCKDB_VIEWS","EDIT","EDITDIST3","ELEMENT_AT","ENABLE_CHECKPOINT_ON_SHUTDOWN","ENABLE_OBJECT_CACHE","ENABLE_OPTIMIZER","ENABLE_PRINT_PROGRESS_BAR","ENABLE_PROFILE","ENABLE_PROFILING","ENABLE_PROGRESS_BAR","ENABLE_VERIFICATION","ENCODE","ENDS_WITH","ENTROPY","ENUM_CODE","ENUM_FIRST","ENUM_LAST","ENUM_RANGE","ENUM_RANGE_BOUNDARY","EPOCH","EPOCH_MS","EPOCH_NS","EPOCH_US","ERA","ERROR","EVEN","EXP","FACTORIAL","FAVG","FDIV","FILTER","FINALIZE","FIRST","FLATTEN","FLOOR","FMOD","FORCE_CHECKPOINT","FORMAT","FORMATREADABLEDECIMALSIZE","FORMATREADABLESIZE","FORMAT_BYTES","FORMAT_PG_TYPE","FORMAT_TYPE","FROM_BASE64","FROM_BINARY","FROM_HEX","FROM_JSON","FROM_JSON_STRICT","FSUM","FUNCTIONS","GAMMA","GCD","GENERATE_SERIES","GENERATE_SUBSCRIPTS","GEN_RANDOM_UUID","GEOMEAN","GEOMETRIC_MEAN","GETENV","GET_BIT","GET_BLOCK_SIZE","GET_CURRENT_TIME","GET_CURRENT_TIMESTAMP","GLOB","GRADE_UP","GREATEST","GREATEST_COMMON_DIVISOR","GROUP_CONCAT","HAMMING","HASH","HAS_ANY_COLUMN_PRIVILEGE","HAS_COLUMN_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE","HAS_FUNCTION_PRIVILEGE","HAS_LANGUAGE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_SEQUENCE_PRIVILEGE","HAS_SERVER_PRIVILEGE","HAS_TABLESPACE_PRIVILEGE","HAS_TABLE_PRIVILEGE","HEX","HISTOGRAM","HOUR","ICU_CALENDAR_NAMES","ICU_SORT_KEY","ILIKE_ESCAPE","IMPORT_DATABASE","INDEX_SCAN","INET_CLIENT_ADDR","INET_CLIENT_PORT","INET_SERVER_ADDR","INET_SERVER_PORT","INSTR","IN_SEARCH_PATH","ISFINITE","ISINF","ISNAN","ISODOW","ISOYEAR","JACCARD","JARO_SIMILARITY","JARO_WINKLER_SIMILARITY","JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_CONTAINS","JSON_DESERIALIZE_SQL","JSON_EXECUTE_SERIALIZED_SQL","JSON_EXTRACT","JSON_EXTRACT_PATH","JSON_EXTRACT_PATH_TEXT","JSON_EXTRACT_STRING","JSON_GROUP_ARRAY","JSON_GROUP_OBJECT","JSON_GROUP_STRUCTURE","JSON_KEYS","JSON_MERGE_PATCH","JSON_OBJECT","JSON_QUOTE","JSON_SERIALIZE_PLAN","JSON_SERIALIZE_SQL","JSON_STRUCTURE","JSON_TRANSFORM","JSON_TRANSFORM_STRICT","JSON_TYPE","JSON_VALID","JULIAN","KAHAN_SUM","KURTOSIS","KURTOSIS_POP","LAST","LAST_DAY","LCASE","LCM","LEAST","LEAST_COMMON_MULTIPLE","LEFT","LEFT_GRAPHEME","LEN","LENGTH","LENGTH_GRAPHEME","LEVENSHTEIN","LGAMMA","LIKE_ESCAPE","LIST","LISTAGG","LIST_AGGR","LIST_AGGREGATE","LIST_ANY_VALUE","LIST_APPEND","LIST_APPLY","LIST_APPROX_COUNT_DISTINCT","LIST_AVG","LIST_BIT_AND","LIST_BIT_OR","LIST_BIT_XOR","LIST_BOOL_AND","LIST_BOOL_OR","LIST_CAT","LIST_CONCAT","LIST_CONTAINS","LIST_COSINE_SIMILARITY","LIST_COUNT","LIST_DISTANCE","LIST_DISTINCT","LIST_DOT_PRODUCT","LIST_ELEMENT","LIST_ENTROPY","LIST_EXTRACT","LIST_FILTER","LIST_FIRST","LIST_GRADE_UP","LIST_HAS","LIST_HAS_ALL","LIST_HAS_ANY","LIST_HISTOGRAM","LIST_INDEXOF","LIST_INNER_PRODUCT","LIST_INTERSECT","LIST_KURTOSIS","LIST_KURTOSIS_POP","LIST_LAST","LIST_MAD","LIST_MAX","LIST_MEDIAN","LIST_MIN","LIST_MODE","LIST_PACK","LIST_POSITION","LIST_PREPEND","LIST_PRODUCT","LIST_REDUCE","LIST_RESIZE","LIST_REVERSE","LIST_REVERSE_SORT","LIST_SELECT","LIST_SEM","LIST_SKEWNESS","LIST_SLICE","LIST_SORT","LIST_STDDEV_POP","LIST_STDDEV_SAMP","LIST_STRING_AGG","LIST_SUM","LIST_TRANSFORM","LIST_UNIQUE","LIST_VALUE","LIST_VAR_POP","LIST_VAR_SAMP","LIST_WHERE","LIST_ZIP","LN","LOG","LOG10","LOG2","LOWER","LPAD","LSMODE","LTRIM","MAD","MAKE_DATE","MAKE_TIME","MAKE_TIMESTAMP","MAKE_TIMESTAMPTZ","MAP","MAP_CONCAT","MAP_ENTRIES","MAP_EXTRACT","MAP_FROM_ENTRIES","MAP_KEYS","MAP_VALUES","MAX","MAX_BY","MD5","MD5_NUMBER","MD5_NUMBER_LOWER","MD5_NUMBER_UPPER","MEAN","MEDIAN","METADATA_INFO","MICROSECOND","MILLENNIUM","MILLISECOND","MIN","MINUTE","MIN_BY","MISMATCHES","MOD","MODE","MONTH","MONTHNAME","MULTIPLY","NEXTAFTER","NEXTVAL","NFC_NORMALIZE","NOT_ILIKE_ESCAPE","NOT_LIKE_ESCAPE","NOW","NULLIF","OBJ_DESCRIPTION","OCTET_LENGTH","ORD","PARQUET_FILE_METADATA","PARQUET_KV_METADATA","PARQUET_METADATA","PARQUET_SCAN","PARQUET_SCHEMA","PARSE_DIRNAME","PARSE_DIRPATH","PARSE_FILENAME","PARSE_PATH","PG_COLLATION_IS_VISIBLE","PG_CONF_LOAD_TIME","PG_CONVERSION_IS_VISIBLE","PG_FUNCTION_IS_VISIBLE","PG_GET_CONSTRAINTDEF","PG_GET_EXPR","PG_GET_VIEWDEF","PG_HAS_ROLE","PG_IS_OTHER_TEMP_SCHEMA","PG_MY_TEMP_SCHEMA","PG_OPCLASS_IS_VISIBLE","PG_OPERATOR_IS_VISIBLE","PG_OPFAMILY_IS_VISIBLE","PG_POSTMASTER_START_TIME","PG_SIZE_PRETTY","PG_TABLE_IS_VISIBLE","PG_TIMEZONE_NAMES","PG_TS_CONFIG_IS_VISIBLE","PG_TS_DICT_IS_VISIBLE","PG_TS_PARSER_IS_VISIBLE","PG_TS_TEMPLATE_IS_VISIBLE","PG_TYPEOF","PG_TYPE_IS_VISIBLE","PI","PLATFORM","POSITION","POW","POWER","PRAGMA_COLLATIONS","PRAGMA_DATABASE_SIZE","PRAGMA_METADATA_INFO","PRAGMA_PLATFORM","PRAGMA_SHOW","PRAGMA_STORAGE_INFO","PRAGMA_TABLE_INFO","PRAGMA_USER_AGENT","PRAGMA_VERSION","PREFIX","PRINTF","PRODUCT","QUANTILE","QUANTILE_CONT","QUANTILE_DISC","QUARTER","RADIANS","RANDOM","RANGE","READFILE","READ_BLOB","READ_CSV","READ_CSV_AUTO","READ_JSON","READ_JSON_AUTO","READ_JSON_OBJECTS","READ_JSON_OBJECTS_AUTO","READ_NDJSON","READ_NDJSON_AUTO","READ_NDJSON_OBJECTS","READ_PARQUET","READ_TEXT","REDUCE","REGEXP_ESCAPE","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_FULL_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","REPEAT","REPEAT_ROW","REPLACE","RESERVOIR_QUANTILE","REVERSE","RIGHT","RIGHT_GRAPHEME","ROUND","ROUNDBANKERS","ROUND_EVEN","ROW","ROW_TO_JSON","RPAD","RTRIM","SECOND","SEM","SEQ_SCAN","SESSION_USER","SETSEED","SET_BIT","SHA256","SHA3","SHELL_ADD_SCHEMA","SHELL_ESCAPE_CRNL","SHELL_IDQUOTE","SHELL_MODULE_SCHEMA","SHELL_PUTSNL","SHOBJ_DESCRIPTION","SHOW","SHOW_DATABASES","SHOW_TABLES","SHOW_TABLES_EXPANDED","SIGN","SIGNBIT","SIN","SKEWNESS","SNIFF_CSV","SPLIT","SPLIT_PART","SQL_AUTO_COMPLETE","SQRT","STARTS_WITH","STATS","STDDEV","STDDEV_POP","STDDEV_SAMP","STORAGE_INFO","STRFTIME","STRING_AGG","STRING_SPLIT","STRING_SPLIT_REGEX","STRING_TO_ARRAY","STRIP_ACCENTS","STRLEN","STRPOS","STRPTIME","STRUCT_EXTRACT","STRUCT_INSERT","STRUCT_PACK","STR_SPLIT","STR_SPLIT_REGEX","SUBSTR","SUBSTRING","SUBSTRING_GRAPHEME","SUBTRACT","SUFFIX","SUM","SUMKAHAN","SUMMARY","SUM_NO_OVERFLOW","TABLE_INFO","TAN","TEST_ALL_TYPES","TEST_VECTOR_TYPES","TIMEZONE","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIME_BUCKET","TODAY","TO_BASE","TO_BASE64","TO_BINARY","TO_CENTURIES","TO_DAYS","TO_DECADES","TO_HEX","TO_HOURS","TO_JSON","TO_MICROSECONDS","TO_MILLENNIA","TO_MILLISECONDS","TO_MINUTES","TO_MONTHS","TO_SECONDS","TO_TIMESTAMP","TO_WEEKS","TO_YEARS","TRANSACTION_TIMESTAMP","TRANSLATE","TRIM","TRUNC","TRY_STRPTIME","TXID_CURRENT","TYPEOF","UCASE","UNBIN","UNHEX","UNICODE","UNION_EXTRACT","UNION_TAG","UNION_VALUE","UNNEST","UNPIVOT_LIST","UPPER","USER","USER_AGENT","UUID","VARIANCE","VAR_POP","VAR_SAMP","VECTOR_TYPE","VERIFY_EXTERNAL","VERIFY_FETCH_ROW","VERIFY_PARALLELISM","VERIFY_SERIALIZER","VERSION","WEEK","WEEKDAY","WEEKOFYEAR","WHICH_SECRET","WRITEFILE","XOR","YEAR","YEARWEEK","CAST","COALESCE","RANK","ROW_NUMBER"],keywords$f=["ALL","ANALYSE","ANALYZE","AND","ANY","AS","ASC","ATTACH","ASYMMETRIC","BOTH","CASE","CAST","CHECK","COLLATE","COLUMN","CONSTRAINT","CREATE","DEFAULT","DEFERRABLE","DESC","DESCRIBE","DETACH","DISTINCT","DO","ELSE","END","EXCEPT","FALSE","FETCH","FOR","FOREIGN","FROM","GRANT","GROUP","HAVING","IN","INITIALLY","INTERSECT","INTO","IS","LATERAL","LEADING","LIMIT","NOT","NULL","OFFSET","ON","ONLY","OR","ORDER","PIVOT","PIVOT_LONGER","PIVOT_WIDER","PLACING","PRIMARY","REFERENCES","RETURNING","SELECT","SHOW","SOME","SUMMARIZE","SYMMETRIC","TABLE","THEN","TO","TRAILING","TRUE","UNION","UNIQUE","UNPIVOT","USING","VARIADIC","WHEN","WHERE","WINDOW","WITH"],dataTypes$f=["ARRAY","BIGINT","BINARY","BIT","BITSTRING","BLOB","BOOL","BOOLEAN","BPCHAR","BYTEA","CHAR","DATE","DATETIME","DEC","DECIMAL","DOUBLE","ENUM","FLOAT","FLOAT4","FLOAT8","GUID","HUGEINT","INET","INT","INT1","INT128","INT16","INT2","INT32","INT4","INT64","INT8","INTEGER","INTEGRAL","INTERVAL","JSON","LIST","LOGICAL","LONG","MAP","NUMERIC","NVARCHAR","OID","REAL","ROW","SHORT","SIGNED","SMALLINT","STRING","STRUCT","TEXT","TIME","TIMESTAMP_MS","TIMESTAMP_NS","TIMESTAMP_S","TIMESTAMP_US","TIMESTAMP","TIMESTAMPTZ","TIMETZ","TINYINT","UBIGINT","UHUGEINT","UINT128","UINT16","UINT32","UINT64","UINT8","UINTEGER","UNION","USMALLINT","UTINYINT","UUID","VARBINARY","VARCHAR"],reservedSelect$f=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$f=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL]","HAVING","WINDOW","PARTITION BY","ORDER BY [ALL]","LIMIT","OFFSET","USING SAMPLE","QUALIFY","INSERT [OR REPLACE] INTO","VALUES","DEFAULT VALUES","SET","RETURNING"]),standardOnelineClauses$e=expandPhrases(["CREATE [OR REPLACE] [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$e=expandPhrases(["UPDATE","ON CONFLICT","DELETE FROM","DROP TABLE [IF EXISTS]","TRUNCATE","ALTER TABLE","ADD [COLUMN] [IF NOT EXISTS]","ADD PRIMARY KEY","DROP [COLUMN] [IF EXISTS]","ALTER [COLUMN]","RENAME [COLUMN]","RENAME TO","SET [DATA] TYPE","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","CREATE [OR REPLACE] [TEMPORARY | TEMP] {MACRO | FUNCTION}","DROP MACRO [TABLE] [IF EXISTS]","DROP FUNCTION [IF EXISTS]","CREATE [UNIQUE] INDEX [IF NOT EXISTS]","DROP INDEX [IF EXISTS]","CREATE [OR REPLACE] SCHEMA [IF NOT EXISTS]","DROP SCHEMA [IF EXISTS]","CREATE [OR REPLACE] [PERSISTENT | TEMPORARY] SECRET [IF NOT EXISTS]","DROP [PERSISTENT | TEMPORARY] SECRET [IF EXISTS]","CREATE [OR REPLACE] [TEMPORARY | TEMP] SEQUENCE","DROP SEQUENCE [IF EXISTS]","CREATE [OR REPLACE] [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]","DROP VIEW [IF EXISTS]","ALTER VIEW","CREATE TYPE","DROP TYPE [IF EXISTS]","ANALYZE","ATTACH [DATABASE] [IF NOT EXISTS]","DETACH [DATABASE] [IF EXISTS]","CALL","[FORCE] CHECKPOINT","COMMENT ON [TABLE | COLUMN | VIEW | INDEX | SEQUENCE | TYPE | MACRO | MACRO TABLE]","COPY [FROM DATABASE]","DESCRIBE","EXPORT DATABASE","IMPORT DATABASE","INSTALL","LOAD","PIVOT","PIVOT_WIDER","UNPIVOT","EXPLAIN [ANALYZE]","SET {LOCAL | SESSION | GLOBAL}","RESET [LOCAL | SESSION | GLOBAL]","{SET | RESET} VARIABLE","SUMMARIZE","BEGIN TRANSACTION","ROLLBACK","COMMIT","ABORT","USE","VACUUM [ANALYZE]","PREPARE","EXECUTE","DEALLOCATE [PREPARE]"]),reservedSetOperations$f=expandPhrases(["UNION [ALL | BY NAME]","EXCEPT [ALL]","INTERSECT [ALL]"]),reservedJoins$f=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","{NATURAL | ASOF} [INNER] JOIN","{NATURAL | ASOF} {LEFT | RIGHT | FULL} [OUTER] JOIN","POSITIONAL JOIN","ANTI JOIN","SEMI JOIN"]),reservedKeywordPhrases$e=expandPhrases(["{ROWS | RANGE | GROUPS} BETWEEN","SIMILAR TO","IS [NOT] DISTINCT FROM"]),reservedDataTypePhrases$f=expandPhrases(["TIMESTAMP WITH TIME ZONE"]),duckdb={name:"duckdb",tokenizerOptions:{reservedSelect:reservedSelect$f,reservedClauses:[...reservedClauses$f,...standardOnelineClauses$e,...tabularOnelineClauses$e],reservedSetOperations:reservedSetOperations$f,reservedJoins:reservedJoins$f,reservedKeywordPhrases:reservedKeywordPhrases$e,reservedDataTypePhrases:reservedDataTypePhrases$f,supportsXor:!0,reservedKeywords:keywords$f,reservedDataTypes:dataTypes$f,reservedFunctionNames:functions$f,nestedBlockComments:!0,extraParens:["[]","{}"],underscoresInNumbers:!0,stringTypes:["$$","''-qq",{quote:"''-qq-bs",prefixes:["E"],requirePrefix:!0},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:['""-qq'],identChars:{rest:"$"},paramTypes:{positional:!0,numbered:["$"],quoted:["$"]},operators:["//","%","**","^","!","&","|","~","<<",">>","::","==","->","->>",":",":=","=>","~~","!~~","~~*","!~~*","~~~","~","!~","~*","!~*","^@","||",">>=","<<="]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:[...standardOnelineClauses$e,...tabularOnelineClauses$e],tabularOnelineClauses:tabularOnelineClauses$e}},functions$e=["ABS","ACOS","ASIN","ATAN","BIN","BROUND","CBRT","CEIL","CEILING","CONV","COS","DEGREES","EXP","FACTORIAL","FLOOR","GREATEST","HEX","LEAST","LN","LOG","LOG10","LOG2","NEGATIVE","PI","PMOD","POSITIVE","POW","POWER","RADIANS","RAND","ROUND","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIN","SQRT","TAN","UNHEX","WIDTH_BUCKET","ARRAY_CONTAINS","MAP_KEYS","MAP_VALUES","SIZE","SORT_ARRAY","BINARY","CAST","ADD_MONTHS","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","QUARTER","SECOND","TIMESTAMP","TO_DATE","TO_UTC_TIMESTAMP","TRUNC","UNIX_TIMESTAMP","WEEKOFYEAR","YEAR","ASSERT_TRUE","COALESCE","IF","ISNOTNULL","ISNULL","NULLIF","NVL","ASCII","BASE64","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONTEXT_NGRAMS","DECODE","ELT","ENCODE","FIELD","FIND_IN_SET","FORMAT_NUMBER","GET_JSON_OBJECT","IN_FILE","INITCAP","INSTR","LCASE","LENGTH","LEVENSHTEIN","LOCATE","LOWER","LPAD","LTRIM","NGRAMS","OCTET_LENGTH","PARSE_URL","PRINTF","QUOTE","REGEXP_EXTRACT","REGEXP_REPLACE","REPEAT","REVERSE","RPAD","RTRIM","SENTENCES","SOUNDEX","SPACE","SPLIT","STR_TO_MAP","SUBSTR","SUBSTRING","TRANSLATE","TRIM","UCASE","UNBASE64","UPPER","MASK","MASK_FIRST_N","MASK_HASH","MASK_LAST_N","MASK_SHOW_FIRST_N","MASK_SHOW_LAST_N","AES_DECRYPT","AES_ENCRYPT","CRC32","CURRENT_DATABASE","CURRENT_USER","HASH","JAVA_METHOD","LOGGED_IN_USER","MD5","REFLECT","SHA","SHA1","SHA2","SURROGATE_KEY","VERSION","AVG","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COVAR_POP","COVAR_SAMP","HISTOGRAM_NUMERIC","MAX","MIN","NTILE","PERCENTILE","PERCENTILE_APPROX","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE","EXPLODE","INLINE","JSON_TUPLE","PARSE_URL_TUPLE","POSEXPLODE","STACK","LEAD","LAG","FIRST_VALUE","LAST_VALUE","RANK","ROW_NUMBER","DENSE_RANK","CUME_DIST","PERCENT_RANK","NTILE"],keywords$e=["ADD","ADMIN","AFTER","ANALYZE","ARCHIVE","ASC","BEFORE","BUCKET","BUCKETS","CASCADE","CHANGE","CLUSTER","CLUSTERED","CLUSTERSTATUS","COLLECTION","COLUMNS","COMMENT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONTINUE","DATA","DATABASES","DATETIME","DAY","DBPROPERTIES","DEFERRED","DEFINED","DELIMITED","DEPENDENCY","DESC","DIRECTORIES","DIRECTORY","DISABLE","DISTRIBUTE","ELEM_TYPE","ENABLE","ESCAPED","EXCLUSIVE","EXPLAIN","EXPORT","FIELDS","FILE","FILEFORMAT","FIRST","FORMAT","FORMATTED","FUNCTIONS","HOLD_DDLTIME","HOUR","IDXPROPERTIES","IGNORE","INDEX","INDEXES","INPATH","INPUTDRIVER","INPUTFORMAT","ITEMS","JAR","KEYS","KEY_TYPE","LIMIT","LINES","LOAD","LOCATION","LOCK","LOCKS","LOGICAL","LONG","MAPJOIN","MATERIALIZED","METADATA","MINUS","MINUTE","MONTH","MSCK","NOSCAN","NO_DROP","OFFLINE","OPTION","OUTPUTDRIVER","OUTPUTFORMAT","OVERWRITE","OWNER","PARTITIONED","PARTITIONS","PLUS","PRETTY","PRINCIPALS","PROTECTION","PURGE","READ","READONLY","REBUILD","RECORDREADER","RECORDWRITER","RELOAD","RENAME","REPAIR","REPLACE","REPLICATION","RESTRICT","REWRITE","ROLE","ROLES","SCHEMA","SCHEMAS","SECOND","SEMI","SERDE","SERDEPROPERTIES","SERVER","SETS","SHARED","SHOW","SHOW_DATABASE","SKEWED","SORT","SORTED","SSL","STATISTICS","STORED","STREAMTABLE","STRING","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","TINYINT","TOUCH","TRANSACTIONS","UNARCHIVE","UNDO","UNIONTYPE","UNLOCK","UNSET","UNSIGNED","URI","USE","UTC","UTCTIMESTAMP","VALUE_TYPE","VIEW","WHILE","YEAR","AUTOCOMMIT","ISOLATION","LEVEL","OFFSET","SNAPSHOT","TRANSACTION","WORK","WRITE","ABORT","KEY","LAST","NORELY","NOVALIDATE","NULLS","RELY","VALIDATE","DETAIL","DOW","EXPRESSION","OPERATOR","QUARTER","SUMMARY","VECTORIZATION","WEEK","YEARS","MONTHS","WEEKS","DAYS","HOURS","MINUTES","SECONDS","TIMESTAMPTZ","ZONE","ALL","ALTER","AND","AS","AUTHORIZATION","BETWEEN","BOTH","BY","CASE","CAST","COLUMN","CONF","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIMESTAMP","CURSOR","DATABASE","DELETE","DESCRIBE","DISTINCT","DROP","ELSE","END","EXCHANGE","EXISTS","EXTENDED","EXTERNAL","FALSE","FETCH","FOLLOWING","FOR","FROM","FULL","FUNCTION","GRANT","GROUP","GROUPING","HAVING","IF","IMPORT","IN","INNER","INSERT","INTERSECT","INTO","IS","JOIN","LATERAL","LEFT","LESS","LIKE","LOCAL","MACRO","MORE","NONE","NOT","NULL","OF","ON","OR","ORDER","OUT","OUTER","OVER","PARTIALSCAN","PARTITION","PERCENT","PRECEDING","PRESERVE","PROCEDURE","RANGE","READS","REDUCE","REVOKE","RIGHT","ROLLUP","ROW","ROWS","SELECT","SET","TABLE","TABLESAMPLE","THEN","TO","TRANSFORM","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNION","UNIQUEJOIN","UPDATE","USER","USING","UTC_TMESTAMP","VALUES","WHEN","WHERE","WINDOW","WITH","COMMIT","ONLY","REGEXP","RLIKE","ROLLBACK","START","CACHE","CONSTRAINT","FOREIGN","PRIMARY","REFERENCES","DAYOFWEEK","EXTRACT","FLOOR","VIEWS","TIME","SYNC","TEXTFILE","SEQUENCEFILE","ORC","CSV","TSV","PARQUET","AVRO","RCFILE","JSONFILE","INPUTFORMAT","OUTPUTFORMAT"],dataTypes$e=["ARRAY","BIGINT","BINARY","BOOLEAN","CHAR","DATE","DECIMAL","DOUBLE","FLOAT","INT","INTEGER","INTERVAL","MAP","NUMERIC","PRECISION","SMALLINT","STRUCT","TIMESTAMP","VARCHAR"],reservedSelect$e=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$e=expandPhrases(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT INTO [TABLE]","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT [VALUES]","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE"]),standardOnelineClauses$d=expandPhrases(["CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$d=expandPhrases(["CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]","UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","RENAME TO","TRUNCATE [TABLE]","ALTER","CREATE","USE","DESCRIBE","DROP","FETCH","SHOW","STORED AS","STORED BY","ROW FORMAT"]),reservedSetOperations$e=expandPhrases(["UNION [ALL | DISTINCT]"]),reservedJoins$e=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","LEFT SEMI JOIN"]),reservedPhrases=expandPhrases(["{ROWS | RANGE} BETWEEN"]),reservedDataTypePhrases$e=expandPhrases([]),hive={name:"hive",tokenizerOptions:{reservedSelect:reservedSelect$e,reservedClauses:[...reservedClauses$e,...standardOnelineClauses$d,...tabularOnelineClauses$d],reservedSetOperations:reservedSetOperations$e,reservedJoins:reservedJoins$e,reservedKeywordPhrases:reservedPhrases,reservedDataTypePhrases:reservedDataTypePhrases$e,reservedKeywords:keywords$e,reservedDataTypes:dataTypes$e,reservedFunctionNames:functions$e,extraParens:["[]"],stringTypes:['""-bs',"''-bs"],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||"]},formatOptions:{onelineClauses:[...standardOnelineClauses$d,...tabularOnelineClauses$d],tabularOnelineClauses:tabularOnelineClauses$d}};function postProcess$2(E){return E.map((T,e)=>{const R=E[e+1]||EOF_TOKEN;if(isToken.SET(T)&&R.text==="(")return Object.assign(Object.assign({},T),{type:TokenType.RESERVED_FUNCTION_NAME});const A=E[e-1]||EOF_TOKEN;return isToken.VALUES(T)&&A.text==="="?Object.assign(Object.assign({},T),{type:TokenType.RESERVED_FUNCTION_NAME}):T})}const keywords$d=["ACCESSIBLE","ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DECLARE","DEFAULT","DELAYED","DELETE","DELETE_DOMAIN_ID","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DO_DOMAIN_IDS","DROP","DUAL","EACH","ELSE","ELSEIF","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FOR","FORCE","FOREIGN","FROM","FULLTEXT","GENERAL","GRANT","GROUP","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IGNORE_DOMAIN_IDS","IGNORE_SERVER_IDS","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","INTERSECT","INTERVAL","INTO","IS","ITERATE","JOIN","KEY","KEYS","KILL","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LOOP","LOW_PRIORITY","MASTER_HEARTBEAT_PERIOD","MASTER_SSL_VERIFY_SERVER_CERT","MATCH","MAXVALUE","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NOT","NO_WRITE_TO_BINLOG","NULL","OFFSET","ON","OPTIMIZE","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PAGE_CHECKSUM","PARSE_VCOL_EXPR","PARTITION","POSITION","PRIMARY","PROCEDURE","PURGE","RANGE","READ","READS","READ_WRITE","RECURSIVE","REF_SYSTEM_ID","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESIGNAL","RESTRICT","RETURN","RETURNING","REVOKE","RIGHT","RLIKE","ROW_NUMBER","ROWS","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SENSITIVE","SEPARATOR","SET","SHOW","SIGNAL","SLOW","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STRAIGHT_JOIN","TABLE","TERMINATED","THEN","TO","TRAILING","TRIGGER","TRUE","UNDO","UNION","UNIQUE","UNLOCK","UNSIGNED","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","WHEN","WHERE","WHILE","WINDOW","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"],dataTypes$d=["BIGINT","BINARY","BIT","BLOB","CHAR BYTE","CHAR","CHARACTER","DATETIME","DEC","DECIMAL","DOUBLE PRECISION","DOUBLE","ENUM","FIXED","FLOAT","FLOAT4","FLOAT8","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","LONG","LONGBLOB","LONGTEXT","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","NATIONAL CHAR","NATIONAL VARCHAR","NUMERIC","PRECISION","REAL","SMALLINT","TEXT","TIMESTAMP","TINYBLOB","TINYINT","TINYTEXT","VARBINARY","VARCHAR","VARCHARACTER","VARYING","YEAR"],functions$d=["ADDDATE","ADD_MONTHS","BIT_AND","BIT_OR","BIT_XOR","CAST","COUNT","CUME_DIST","CURDATE","CURTIME","DATE_ADD","DATE_SUB","DATE_FORMAT","DECODE","DENSE_RANK","EXTRACT","FIRST_VALUE","GROUP_CONCAT","JSON_ARRAYAGG","JSON_OBJECTAGG","LAG","LEAD","MAX","MEDIAN","MID","MIN","NOW","NTH_VALUE","NTILE","POSITION","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","ROW_NUMBER","SESSION_USER","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUBDATE","SUBSTR","SUBSTRING","SUM","SYSTEM_USER","TRIM","TRIM_ORACLE","VARIANCE","VAR_POP","VAR_SAMP","ABS","ACOS","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ASIN","ATAN","ATAN2","BENCHMARK","BIN","BINLOG_GTID_POS","BIT_COUNT","BIT_LENGTH","CEIL","CEILING","CHARACTER_LENGTH","CHAR_LENGTH","CHR","COERCIBILITY","COLUMN_CHECK","COLUMN_EXISTS","COLUMN_LIST","COLUMN_JSON","COMPRESS","CONCAT","CONCAT_OPERATOR_ORACLE","CONCAT_WS","CONNECTION_ID","CONV","CONVERT_TZ","COS","COT","CRC32","DATEDIFF","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEGREES","DECODE_HISTOGRAM","DECODE_ORACLE","DES_DECRYPT","DES_ENCRYPT","ELT","ENCODE","ENCRYPT","EXP","EXPORT_SET","EXTRACTVALUE","FIELD","FIND_IN_SET","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GET_LOCK","GREATEST","HEX","IFNULL","INSTR","ISNULL","IS_FREE_LOCK","IS_USED_LOCK","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_COMPACT","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_DETAILED","JSON_EXISTS","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_LOOSE","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_QUERY","JSON_QUOTE","JSON_OBJECT","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_SEARCH","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAST_DAY","LAST_INSERT_ID","LCASE","LEAST","LENGTH","LENGTHB","LN","LOAD_FILE","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LPAD_ORACLE","LTRIM","LTRIM_ORACLE","MAKEDATE","MAKETIME","MAKE_SET","MASTER_GTID_WAIT","MASTER_POS_WAIT","MD5","MONTHNAME","NAME_CONST","NVL","NVL2","OCT","OCTET_LENGTH","ORD","PERIOD_ADD","PERIOD_DIFF","PI","POW","POWER","QUOTE","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","RADIANS","RAND","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPLACE_ORACLE","REVERSE","ROUND","RPAD","RPAD_ORACLE","RTRIM","RTRIM_ORACLE","SEC_TO_TIME","SHA","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SPACE","SQRT","STRCMP","STR_TO_DATE","SUBSTR_ORACLE","SUBSTRING_INDEX","SUBTIME","SYS_GUID","TAN","TIMEDIFF","TIME_FORMAT","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_SECONDS","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UUID","UUID_SHORT","VERSION","WEEKDAY","WEEKOFYEAR","WSREP_LAST_WRITTEN_GTID","WSREP_LAST_SEEN_GTID","WSREP_SYNC_WAIT_UPTO_GTID","YEARWEEK","COALESCE","NULLIF"],reservedSelect$d=expandPhrases(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),reservedClauses$d=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","ON DUPLICATE KEY UPDATE","SET","RETURNING"]),standardOnelineClauses$c=expandPhrases(["CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$c=expandPhrases(["CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]","ADD [COLUMN] [IF NOT EXISTS]","{CHANGE | MODIFY} [COLUMN] [IF EXISTS]","DROP [COLUMN] [IF EXISTS]","RENAME [TO]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","SET {VISIBLE | INVISIBLE}","TRUNCATE [TABLE]","ALTER DATABASE","ALTER DATABASE COMMENT","ALTER EVENT","ALTER FUNCTION","ALTER PROCEDURE","ALTER SCHEMA","ALTER SCHEMA COMMENT","ALTER SEQUENCE","ALTER SERVER","ALTER USER","ALTER VIEW","ANALYZE","ANALYZE TABLE","BACKUP LOCK","BACKUP STAGE","BACKUP UNLOCK","BEGIN","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHECK TABLE","CHECK VIEW","CHECKSUM TABLE","COMMIT","CREATE AGGREGATE FUNCTION","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE INDEX","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE SERVER","CREATE SPATIAL INDEX","CREATE TRIGGER","CREATE UNIQUE INDEX","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP INDEX","DROP PREPARE","DROP PROCEDURE","DROP ROLE","DROP SEQUENCE","DROP SERVER","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GET DIAGNOSTICS","GET DIAGNOSTICS CONDITION","GRANT","HANDLER","HELP","INSTALL PLUGIN","INSTALL SONAME","KILL","LOAD DATA INFILE","LOAD INDEX INTO CACHE","LOAD XML INFILE","LOCK TABLE","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","PURGE MASTER LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","REPAIR VIEW","RESET MASTER","RESET QUERY CACHE","RESET REPLICA","RESET SLAVE","RESIGNAL","REVOKE","ROLLBACK","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET GLOBAL TRANSACTION","SET NAMES","SET PASSWORD","SET ROLE","SET STATEMENT","SET TRANSACTION","SHOW","SHOW ALL REPLICAS STATUS","SHOW ALL SLAVES STATUS","SHOW AUTHORS","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW BINLOG STATUS","SHOW CHARACTER SET","SHOW CLIENT_STATISTICS","SHOW COLLATION","SHOW COLUMNS","SHOW CONTRIBUTORS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PACKAGE","SHOW CREATE PACKAGE BODY","SHOW CREATE PROCEDURE","SHOW CREATE SEQUENCE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINE INNODB STATUS","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW EXPLAIN","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW INDEXES","SHOW INDEX_STATISTICS","SHOW KEYS","SHOW LOCALES","SHOW MASTER LOGS","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PACKAGE BODY CODE","SHOW PACKAGE BODY STATUS","SHOW PACKAGE STATUS","SHOW PLUGINS","SHOW PLUGINS SONAME","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW QUERY_RESPONSE_TIME","SHOW RELAYLOG EVENTS","SHOW REPLICA","SHOW REPLICA HOSTS","SHOW REPLICA STATUS","SHOW SCHEMAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW SLAVE STATUS","SHOW STATUS","SHOW STORAGE ENGINES","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW USER_STATISTICS","SHOW VARIABLES","SHOW WARNINGS","SHOW WSREP_MEMBERSHIP","SHOW WSREP_STATUS","SHUTDOWN","SIGNAL","START ALL REPLICAS","START ALL SLAVES","START REPLICA","START SLAVE","START TRANSACTION","STOP ALL REPLICAS","STOP ALL SLAVES","STOP REPLICA","STOP SLAVE","UNINSTALL PLUGIN","UNINSTALL SONAME","UNLOCK TABLE","USE","XA BEGIN","XA COMMIT","XA END","XA PREPARE","XA RECOVER","XA ROLLBACK","XA START"]),reservedSetOperations$d=expandPhrases(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]","MINUS [ALL | DISTINCT]"]),reservedJoins$d=expandPhrases(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),reservedKeywordPhrases$d=expandPhrases(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","CHARACTER SET","{ROWS | RANGE} BETWEEN","IDENTIFIED BY"]),reservedDataTypePhrases$d=expandPhrases([]),mariadb={name:"mariadb",tokenizerOptions:{reservedSelect:reservedSelect$d,reservedClauses:[...reservedClauses$d,...standardOnelineClauses$c,...tabularOnelineClauses$c],reservedSetOperations:reservedSetOperations$d,reservedJoins:reservedJoins$d,reservedKeywordPhrases:reservedKeywordPhrases$d,reservedDataTypePhrases:reservedDataTypePhrases$d,supportsXor:!0,reservedKeywords:keywords$d,reservedDataTypes:dataTypes$d,reservedFunctionNames:functions$d,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","&&","||","!","*.*"],postProcess:postProcess$2},formatOptions:{onelineClauses:[...standardOnelineClauses$c,...tabularOnelineClauses$c],tabularOnelineClauses:tabularOnelineClauses$c}},keywords$c=["ACCESSIBLE","ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CUBE","CUME_DIST","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DECLARE","DEFAULT","DELAYED","DELETE","DENSE_RANK","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DROP","DUAL","EACH","ELSE","ELSEIF","EMPTY","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FIRST_VALUE","FOR","FORCE","FOREIGN","FROM","FULLTEXT","FUNCTION","GENERATED","GET","GRANT","GROUP","GROUPING","GROUPS","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","IN","INTERSECT","INTERVAL","INTO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IS","ITERATE","JOIN","JSON_TABLE","KEY","KEYS","KILL","LAG","LAST_VALUE","LATERAL","LEAD","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LONG","LOOP","LOW_PRIORITY","MASTER_BIND","MASTER_SSL_VERIFY_SERVER_CERT","MATCH","MAXVALUE","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NOT","NO_WRITE_TO_BINLOG","NTH_VALUE","NTILE","NULL","OF","ON","OPTIMIZE","OPTIMIZER_COSTS","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PARTITION","PERCENT_RANK","PRIMARY","PROCEDURE","PURGE","RANGE","RANK","READ","READS","READ_WRITE","RECURSIVE","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESIGNAL","RESTRICT","RETURN","REVOKE","RIGHT","RLIKE","ROW","ROWS","ROW_NUMBER","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SENSITIVE","SEPARATOR","SET","SHOW","SIGNAL","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STORED","STRAIGHT_JOIN","SYSTEM","TABLE","TERMINATED","THEN","TO","TRAILING","TRIGGER","TRUE","UNDO","UNION","UNIQUE","UNLOCK","UNSIGNED","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","VIRTUAL","WHEN","WHERE","WHILE","WINDOW","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"],dataTypes$c=["BIGINT","BINARY","BIT","BLOB","BOOL","BOOLEAN","CHAR","CHARACTER","DATE","DATETIME","DEC","DECIMAL","DOUBLE PRECISION","DOUBLE","ENUM","FIXED","FLOAT","FLOAT4","FLOAT8","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","LONGBLOB","LONGTEXT","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","NATIONAL CHAR","NATIONAL VARCHAR","NUMERIC","PRECISION","REAL","SMALLINT","TEXT","TIME","TIMESTAMP","TINYBLOB","TINYINT","TINYTEXT","VARBINARY","VARCHAR","VARCHARACTER","VARYING","YEAR"],functions$c=["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","ASCII","ASIN","ATAN","ATAN2","AVG","BENCHMARK","BIN","BIN_TO_UUID","BINARY","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_XOR","CAN_ACCESS_COLUMN","CAN_ACCESS_DATABASE","CAN_ACCESS_TABLE","CAN_ACCESS_USER","CAN_ACCESS_VIEW","CAST","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COMPRESS","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CRC32","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEFAULT","DEGREES","DENSE_RANK","DIV","ELT","EXP","EXPORT_SET","EXTRACT","EXTRACTVALUE","FIELD","FIND_IN_SET","FIRST_VALUE","FLOOR","FORMAT","FORMAT_BYTES","FORMAT_PICO_TIME","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOMCOLLECTION","GEOMETRYCOLLECTION","GET_DD_COLUMN_PRIVILEGES","GET_DD_CREATE_OPTIONS","GET_DD_INDEX_SUB_PART_LENGTH","GET_FORMAT","GET_LOCK","GREATEST","GROUP_CONCAT","GROUPING","GTID_SUBSET","GTID_SUBTRACT","HEX","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INSERT","INSTR","INTERNAL_AUTO_INCREMENT","INTERNAL_AVG_ROW_LENGTH","INTERNAL_CHECK_TIME","INTERNAL_CHECKSUM","INTERNAL_DATA_FREE","INTERNAL_DATA_LENGTH","INTERNAL_DD_CHAR_LENGTH","INTERNAL_GET_COMMENT_OR_ERROR","INTERNAL_GET_ENABLED_ROLE_JSON","INTERNAL_GET_HOSTNAME","INTERNAL_GET_USERNAME","INTERNAL_GET_VIEW_WARNING_OR_ERROR","INTERNAL_INDEX_COLUMN_CARDINALITY","INTERNAL_INDEX_LENGTH","INTERNAL_IS_ENABLED_ROLE","INTERNAL_IS_MANDATORY_ROLE","INTERNAL_KEYS_DISABLED","INTERNAL_MAX_DATA_LENGTH","INTERNAL_TABLE_ROWS","INTERNAL_UPDATE_TIME","INTERVAL","IS","IS_FREE_LOCK","IS_IPV4","IS_IPV4_COMPAT","IS_IPV4_MAPPED","IS_IPV6","IS NOT","IS NOT NULL","IS NULL","IS_USED_LOCK","IS_UUID","ISNULL","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_ARRAYAGG","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_OBJECT","JSON_OBJECTAGG","JSON_OVERLAPS","JSON_PRETTY","JSON_QUOTE","JSON_REMOVE","JSON_REPLACE","JSON_SCHEMA_VALID","JSON_SCHEMA_VALIDATION_REPORT","JSON_SEARCH","JSON_SET","JSON_STORAGE_FREE","JSON_STORAGE_SIZE","JSON_TABLE","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAG","LAST_DAY","LAST_INSERT_ID","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LINESTRING","LN","LOAD_FILE","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","MAKE_SET","MAKEDATE","MAKETIME","MASTER_POS_WAIT","MATCH","MAX","MBRCONTAINS","MBRCOVEREDBY","MBRCOVERS","MBRDISJOINT","MBREQUALS","MBRINTERSECTS","MBROVERLAPS","MBRTOUCHES","MBRWITHIN","MD5","MEMBER OF","MICROSECOND","MID","MIN","MINUTE","MOD","MONTH","MONTHNAME","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","NAME_CONST","NOT","NOT IN","NOT LIKE","NOT REGEXP","NOW","NTH_VALUE","NTILE","NULLIF","OCT","OCTET_LENGTH","ORD","PERCENT_RANK","PERIOD_ADD","PERIOD_DIFF","PI","POINT","POLYGON","POSITION","POW","POWER","PS_CURRENT_THREAD_ID","PS_THREAD_ID","QUARTER","QUOTE","RADIANS","RAND","RANDOM_BYTES","RANK","REGEXP","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROLES_GRAPHML","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCHEMA","SEC_TO_TIME","SECOND","SESSION_USER","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_BUFFER","ST_BUFFER_STRATEGY","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_CONVEXHULL","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DISTANCE_SPHERE","ST_ENDPOINT","ST_ENVELOPE","ST_EQUALS","ST_EXTERIORRING","ST_FRECHETDISTANCE","ST_GEOHASH","ST_GEOMCOLLFROMTEXT","ST_GEOMCOLLFROMWKB","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMGEOJSON","ST_GEOMFROMTEXT","ST_GEOMFROMWKB","ST_HAUSDORFFDISTANCE","ST_INTERIORRINGN","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISSIMPLE","ST_ISVALID","ST_LATFROMGEOHASH","ST_LATITUDE","ST_LENGTH","ST_LINEFROMTEXT","ST_LINEFROMWKB","ST_LINEINTERPOLATEPOINT","ST_LINEINTERPOLATEPOINTS","ST_LONGFROMGEOHASH","ST_LONGITUDE","ST_MAKEENVELOPE","ST_MLINEFROMTEXT","ST_MLINEFROMWKB","ST_MPOINTFROMTEXT","ST_MPOINTFROMWKB","ST_MPOLYFROMTEXT","ST_MPOLYFROMWKB","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINTATDISTANCE","ST_POINTFROMGEOHASH","ST_POINTFROMTEXT","ST_POINTFROMWKB","ST_POINTN","ST_POLYFROMTEXT","ST_POLYFROMWKB","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SWAPXY","ST_SYMDIFFERENCE","ST_TOUCHES","ST_TRANSFORM","ST_UNION","ST_VALIDATE","ST_WITHIN","ST_X","ST_Y","STATEMENT_DIGEST","STATEMENT_DIGEST_TEXT","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","STRCMP","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUBTIME","SUM","SYSDATE","SYSTEM_USER","TAN","TIME","TIME_FORMAT","TIME_TO_SEC","TIMEDIFF","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TO_BASE64","TO_DAYS","TO_SECONDS","TRIM","TRUNCATE","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","UUID_SHORT","UUID_TO_BIN","VALIDATE_PASSWORD_STRENGTH","VALUES","VAR_POP","VAR_SAMP","VARIANCE","VERSION","WAIT_FOR_EXECUTED_GTID_SET","WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS","WEEK","WEEKDAY","WEEKOFYEAR","WEIGHT_STRING","YEAR","YEARWEEK"],reservedSelect$c=expandPhrases(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),reservedClauses$c=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","ON DUPLICATE KEY UPDATE","SET"]),standardOnelineClauses$b=expandPhrases(["CREATE [TEMPORARY] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$b=expandPhrases(["CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","{CHANGE | MODIFY} [COLUMN]","DROP [COLUMN]","RENAME [TO | AS]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","TRUNCATE [TABLE]","ALTER DATABASE","ALTER EVENT","ALTER FUNCTION","ALTER INSTANCE","ALTER LOGFILE GROUP","ALTER PROCEDURE","ALTER RESOURCE GROUP","ALTER SERVER","ALTER TABLESPACE","ALTER USER","ALTER VIEW","ANALYZE TABLE","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK TABLE","CHECKSUM TABLE","CLONE","COMMIT","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE FUNCTION","CREATE INDEX","CREATE LOGFILE GROUP","CREATE PROCEDURE","CREATE RESOURCE GROUP","CREATE ROLE","CREATE SERVER","CREATE SPATIAL REFERENCE SYSTEM","CREATE TABLESPACE","CREATE TRIGGER","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP FUNCTION","DROP INDEX","DROP LOGFILE GROUP","DROP PROCEDURE","DROP RESOURCE GROUP","DROP ROLE","DROP SERVER","DROP SPATIAL REFERENCE SYSTEM","DROP TABLESPACE","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GRANT","HANDLER","HELP","IMPORT TABLE","INSTALL COMPONENT","INSTALL PLUGIN","KILL","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SOURCE_POS_WAIT","START GROUP_REPLICATION","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP REPLICA","STOP SLAVE","TABLE","UNINSTALL COMPONENT","UNINSTALL PLUGIN","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),reservedSetOperations$c=expandPhrases(["UNION [ALL | DISTINCT]"]),reservedJoins$c=expandPhrases(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),reservedKeywordPhrases$c=expandPhrases(["ON {UPDATE | DELETE} [SET NULL]","CHARACTER SET","{ROWS | RANGE} BETWEEN","IDENTIFIED BY"]),reservedDataTypePhrases$c=expandPhrases([]),mysql={name:"mysql",tokenizerOptions:{reservedSelect:reservedSelect$c,reservedClauses:[...reservedClauses$c,...standardOnelineClauses$b,...tabularOnelineClauses$b],reservedSetOperations:reservedSetOperations$c,reservedJoins:reservedJoins$c,reservedKeywordPhrases:reservedKeywordPhrases$c,reservedDataTypePhrases:reservedDataTypePhrases$c,supportsXor:!0,reservedKeywords:keywords$c,reservedDataTypes:dataTypes$c,reservedFunctionNames:functions$c,stringTypes:['""-qq-bs',{quote:"''-qq-bs",prefixes:["N"]},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","->","->>","&&","||","!","*.*"],postProcess:postProcess$2},formatOptions:{onelineClauses:[...standardOnelineClauses$b,...tabularOnelineClauses$b],tabularOnelineClauses:tabularOnelineClauses$b}},keywords$b=["ADD","ALL","ALTER","ANALYZE","AND","ARRAY","AS","ASC","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHECK","COLLATE","COLUMN","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEFAULT","DELAYED","DELETE","DESC","DESCRIBE","DISTINCT","DISTINCTROW","DIV","DOUBLE","DROP","DUAL","ELSE","ELSEIF","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FOR","FORCE","FOREIGN","FROM","FULLTEXT","GENERATED","GRANT","GROUP","GROUPS","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","ILIKE","IN","INDEX","INFILE","INNER","INOUT","INSERT","INTERSECT","INTERVAL","INTO","IS","ITERATE","JOIN","KEY","KEYS","KILL","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LONG","LOW_PRIORITY","MATCH","MAXVALUE","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","NATURAL","NOT","NO_WRITE_TO_BINLOG","NULL","OF","ON","OPTIMIZE","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PARTITION","PRIMARY","PROCEDURE","RANGE","READ","RECURSIVE","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESTRICT","REVOKE","RIGHT","RLIKE","ROW","ROWS","SECOND_MICROSECOND","SELECT","SET","SHOW","SPATIAL","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STATS_EXTENDED","STORED","STRAIGHT_JOIN","TABLE","TABLESAMPLE","TERMINATED","THEN","TO","TRAILING","TRIGGER","TRUE","TiDB_CURRENT_TSO","UNION","UNIQUE","UNLOCK","UNSIGNED","UNTIL","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","VIRTUAL","WHEN","WHERE","WHILE","WINDOW","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"],dataTypes$b=["BIGINT","BINARY","BIT","BLOB","BOOL","BOOLEAN","CHAR","CHARACTER","DATE","DATETIME","DEC","DECIMAL","DOUBLE PRECISION","DOUBLE","ENUM","FIXED","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","LONGBLOB","LONGTEXT","MEDIUMBLOB","MEDIUMINT","MIDDLEINT","NATIONAL CHAR","NATIONAL VARCHAR","NUMERIC","PRECISION","SMALLINT","TEXT","TIME","TIMESTAMP","TINYBLOB","TINYINT","TINYTEXT","VARBINARY","VARCHAR","VARCHARACTER","VARYING","YEAR"],functions$b=["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","ASCII","ASIN","ATAN","ATAN2","AVG","BENCHMARK","BIN","BIN_TO_UUID","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_XOR","BITAND","BITNEG","BITOR","BITXOR","CASE","CAST","CEIL","CEILING","CHAR_FUNC","CHAR_LENGTH","CHARACTER_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COMPRESS","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CRC32","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_RESOURCE_GROUP","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECODE","DEFAULT_FUNC","DEGREES","DENSE_RANK","DES_DECRYPT","DES_ENCRYPT","DIV","ELT","ENCODE","ENCRYPT","EQ","EXP","EXPORT_SET","EXTRACT","FIELD","FIND_IN_SET","FIRST_VALUE","FLOOR","FORMAT","FORMAT_BYTES","FORMAT_NANO_TIME","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GE","GET_FORMAT","GET_LOCK","GETPARAM","GREATEST","GROUP_CONCAT","GROUPING","GT","HEX","HOUR","IF","IFNULL","ILIKE","INET6_ATON","INET6_NTOA","INET_ATON","INET_NTOA","INSERT_FUNC","INSTR","INTDIV","INTERVAL","IS_FREE_LOCK","IS_IPV4","IS_IPV4_COMPAT","IS_IPV4_MAPPED","IS_IPV6","IS_USED_LOCK","IS_UUID","ISFALSE","ISNULL","ISTRUE","JSON_ARRAY","JSON_ARRAYAGG","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_MEMBEROF","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_OBJECT","JSON_OBJECTAGG","JSON_OVERLAPS","JSON_PRETTY","JSON_QUOTE","JSON_REMOVE","JSON_REPLACE","JSON_SEARCH","JSON_SET","JSON_STORAGE_FREE","JSON_STORAGE_SIZE","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","LAG","LAST_DAY","LAST_INSERT_ID","LAST_VALUE","LASTVAL","LCASE","LE","LEAD","LEAST","LEFT","LEFTSHIFT","LENGTH","LIKE","LN","LOAD_FILE","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LT","LTRIM","MAKE_SET","MAKEDATE","MAKETIME","MASTER_POS_WAIT","MAX","MD5","MICROSECOND","MID","MIN","MINUS","MINUTE","MOD","MONTH","MONTHNAME","MUL","NAME_CONST","NE","NEXTVAL","NOT","NOW","NTH_VALUE","NTILE","NULLEQ","OCT","OCTET_LENGTH","OLD_PASSWORD","ORD","PASSWORD_FUNC","PERCENT_RANK","PERIOD_ADD","PERIOD_DIFF","PI","PLUS","POSITION","POW","POWER","QUARTER","QUOTE","RADIANS","RAND","RANDOM_BYTES","RANK","REGEXP","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPEAT","REPLACE","REVERSE","RIGHT","RIGHTSHIFT","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCHEMA","SEC_TO_TIME","SECOND","SESSION_USER","SETVAL","SETVAR","SHA","SHA1","SHA2","SIGN","SIN","SLEEP","SM3","SPACE","SQRT","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","STRCMP","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUBTIME","SUM","SYSDATE","SYSTEM_USER","TAN","TIDB_BOUNDED_STALENESS","TIDB_CURRENT_TSO","TIDB_DECODE_BINARY_PLAN","TIDB_DECODE_KEY","TIDB_DECODE_PLAN","TIDB_DECODE_SQL_DIGESTS","TIDB_ENCODE_SQL_DIGEST","TIDB_IS_DDL_OWNER","TIDB_PARSE_TSO","TIDB_PARSE_TSO_LOGICAL","TIDB_ROW_CHECKSUM","TIDB_SHARD","TIDB_VERSION","TIME","TIME_FORMAT","TIME_TO_SEC","TIMEDIFF","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TO_BASE64","TO_DAYS","TO_SECONDS","TRANSLATE","TRIM","TRUNCATE","UCASE","UNARYMINUS","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPPER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","UUID_SHORT","UUID_TO_BIN","VALIDATE_PASSWORD_STRENGTH","VAR_POP","VAR_SAMP","VARIANCE","VERSION","VITESS_HASH","WEEK","WEEKDAY","WEEKOFYEAR","WEIGHT_STRING","YEAR","YEARWEEK"],reservedSelect$b=expandPhrases(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),reservedClauses$b=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","ON DUPLICATE KEY UPDATE","SET"]),standardOnelineClauses$a=expandPhrases(["CREATE [TEMPORARY] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$a=expandPhrases(["CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","{CHANGE | MODIFY} [COLUMN]","DROP [COLUMN]","RENAME [TO | AS]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","TRUNCATE [TABLE]","ALTER DATABASE","ALTER INSTANCE","ALTER RESOURCE GROUP","ALTER SEQUENCE","ALTER USER","ALTER VIEW","ANALYZE TABLE","CHECK TABLE","CHECKSUM TABLE","COMMIT","CREATE DATABASE","CREATE INDEX","CREATE RESOURCE GROUP","CREATE ROLE","CREATE SEQUENCE","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP INDEX","DROP RESOURCE GROUP","DROP ROLE","DROP TABLESPACE","DROP USER","DROP VIEW","EXPLAIN","FLUSH","GRANT","IMPORT TABLE","INSTALL COMPONENT","INSTALL PLUGIN","KILL","LOAD DATA","LOCK INSTANCE FOR BACKUP","LOCK TABLES","OPTIMIZE TABLE","PREPARE","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","RESET","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE TABLE","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW VARIABLES","SHOW WARNINGS","TABLE","UNINSTALL COMPONENT","UNINSTALL PLUGIN","UNLOCK INSTANCE","UNLOCK TABLES","USE"]),reservedSetOperations$b=expandPhrases(["UNION [ALL | DISTINCT]"]),reservedJoins$b=expandPhrases(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),reservedKeywordPhrases$b=expandPhrases(["ON {UPDATE | DELETE} [SET NULL]","CHARACTER SET","{ROWS | RANGE} BETWEEN","IDENTIFIED BY"]),reservedDataTypePhrases$b=expandPhrases([]),tidb={name:"tidb",tokenizerOptions:{reservedSelect:reservedSelect$b,reservedClauses:[...reservedClauses$b,...standardOnelineClauses$a,...tabularOnelineClauses$a],reservedSetOperations:reservedSetOperations$b,reservedJoins:reservedJoins$b,reservedKeywordPhrases:reservedKeywordPhrases$b,reservedDataTypePhrases:reservedDataTypePhrases$b,supportsXor:!0,reservedKeywords:keywords$b,reservedDataTypes:dataTypes$b,reservedFunctionNames:functions$b,stringTypes:['""-qq-bs',{quote:"''-qq-bs",prefixes:["N"]},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","->","->>","&&","||","!","*.*"],postProcess:postProcess$2},formatOptions:{onelineClauses:[...standardOnelineClauses$a,...tabularOnelineClauses$a],tabularOnelineClauses:tabularOnelineClauses$a}},functions$a=["ABORT","ABS","ACOS","ADVISOR","ARRAY_AGG","ARRAY_AGG","ARRAY_APPEND","ARRAY_AVG","ARRAY_BINARY_SEARCH","ARRAY_CONCAT","ARRAY_CONTAINS","ARRAY_COUNT","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_FLATTEN","ARRAY_IFNULL","ARRAY_INSERT","ARRAY_INTERSECT","ARRAY_LENGTH","ARRAY_MAX","ARRAY_MIN","ARRAY_MOVE","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_PUT","ARRAY_RANGE","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_REPLACE","ARRAY_REVERSE","ARRAY_SORT","ARRAY_STAR","ARRAY_SUM","ARRAY_SYMDIFF","ARRAY_SYMDIFF1","ARRAY_SYMDIFFN","ARRAY_UNION","ASIN","ATAN","ATAN2","AVG","BASE64","BASE64_DECODE","BASE64_ENCODE","BITAND ","BITCLEAR ","BITNOT ","BITOR ","BITSET ","BITSHIFT ","BITTEST ","BITXOR ","CEIL","CLOCK_LOCAL","CLOCK_MILLIS","CLOCK_STR","CLOCK_TZ","CLOCK_UTC","COALESCE","CONCAT","CONCAT2","CONTAINS","CONTAINS_TOKEN","CONTAINS_TOKEN_LIKE","CONTAINS_TOKEN_REGEXP","COS","COUNT","COUNT","COUNTN","CUME_DIST","CURL","DATE_ADD_MILLIS","DATE_ADD_STR","DATE_DIFF_MILLIS","DATE_DIFF_STR","DATE_FORMAT_STR","DATE_PART_MILLIS","DATE_PART_STR","DATE_RANGE_MILLIS","DATE_RANGE_STR","DATE_TRUNC_MILLIS","DATE_TRUNC_STR","DECODE","DECODE_JSON","DEGREES","DENSE_RANK","DURATION_TO_STR","ENCODED_SIZE","ENCODE_JSON","EXP","FIRST_VALUE","FLOOR","GREATEST","HAS_TOKEN","IFINF","IFMISSING","IFMISSINGORNULL","IFNAN","IFNANORINF","IFNULL","INITCAP","ISARRAY","ISATOM","ISBITSET","ISBOOLEAN","ISNUMBER","ISOBJECT","ISSTRING","LAG","LAST_VALUE","LEAD","LEAST","LENGTH","LN","LOG","LOWER","LTRIM","MAX","MEAN","MEDIAN","META","MILLIS","MILLIS_TO_LOCAL","MILLIS_TO_STR","MILLIS_TO_TZ","MILLIS_TO_UTC","MILLIS_TO_ZONE_NAME","MIN","MISSINGIF","NANIF","NEGINFIF","NOW_LOCAL","NOW_MILLIS","NOW_STR","NOW_TZ","NOW_UTC","NTH_VALUE","NTILE","NULLIF","NVL","NVL2","OBJECT_ADD","OBJECT_CONCAT","OBJECT_INNER_PAIRS","OBJECT_INNER_VALUES","OBJECT_LENGTH","OBJECT_NAMES","OBJECT_PAIRS","OBJECT_PUT","OBJECT_REMOVE","OBJECT_RENAME","OBJECT_REPLACE","OBJECT_UNWRAP","OBJECT_VALUES","PAIRS","PERCENT_RANK","PI","POLY_LENGTH","POSINFIF","POSITION","POWER","RADIANS","RANDOM","RANK","RATIO_TO_REPORT","REGEXP_CONTAINS","REGEXP_LIKE","REGEXP_MATCHES","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGEX_CONTAINS","REGEX_LIKE","REGEX_MATCHES","REGEX_POSITION","REGEX_REPLACE","REGEX_SPLIT","REPEAT","REPLACE","REVERSE","ROUND","ROW_NUMBER","RTRIM","SEARCH","SEARCH_META","SEARCH_SCORE","SIGN","SIN","SPLIT","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DURATION","STR_TO_MILLIS","STR_TO_TZ","STR_TO_UTC","STR_TO_ZONE_NAME","SUBSTR","SUFFIXES","SUM","TAN","TITLE","TOARRAY","TOATOM","TOBOOLEAN","TOKENS","TOKENS","TONUMBER","TOOBJECT","TOSTRING","TRIM","TRUNC","UPPER","UUID","VARIANCE","VARIANCE_POP","VARIANCE_SAMP","VAR_POP","VAR_SAMP","WEEKDAY_MILLIS","WEEKDAY_STR","CAST"],keywords$a=["ADVISE","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","BEGIN","BETWEEN","BINARY","BOOLEAN","BREAK","BUCKET","BUILD","BY","CALL","CASE","CAST","CLUSTER","COLLATE","COLLECTION","COMMIT","COMMITTED","CONNECT","CONTINUE","CORRELATED","COVER","CREATE","CURRENT","DATABASE","DATASET","DATASTORE","DECLARE","DECREMENT","DELETE","DERIVED","DESC","DESCRIBE","DISTINCT","DO","DROP","EACH","ELEMENT","ELSE","END","EVERY","EXCEPT","EXCLUDE","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FILTER","FIRST","FLATTEN","FLUSH","FOLLOWING","FOR","FORCE","FROM","FTS","FUNCTION","GOLANG","GRANT","GROUP","GROUPS","GSI","HASH","HAVING","IF","IGNORE","ILIKE","IN","INCLUDE","INCREMENT","INDEX","INFER","INLINE","INNER","INSERT","INTERSECT","INTO","IS","ISOLATION","JAVASCRIPT","JOIN","KEY","KEYS","KEYSPACE","KNOWN","LANGUAGE","LAST","LEFT","LET","LETTING","LEVEL","LIKE","LIMIT","LSM","MAP","MAPPING","MATCHED","MATERIALIZED","MERGE","MINUS","MISSING","NAMESPACE","NEST","NL","NO","NOT","NTH_VALUE","NULL","NULLS","NUMBER","OBJECT","OFFSET","ON","OPTION","OPTIONS","OR","ORDER","OTHERS","OUTER","OVER","PARSE","PARTITION","PASSWORD","PATH","POOL","PRECEDING","PREPARE","PRIMARY","PRIVATE","PRIVILEGE","PROBE","PROCEDURE","PUBLIC","RANGE","RAW","REALM","REDUCE","RENAME","RESPECT","RETURN","RETURNING","REVOKE","RIGHT","ROLE","ROLLBACK","ROW","ROWS","SATISFIES","SAVEPOINT","SCHEMA","SCOPE","SELECT","SELF","SEMI","SET","SHOW","SOME","START","STATISTICS","STRING","SYSTEM","THEN","TIES","TO","TRAN","TRANSACTION","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNDER","UNION","UNIQUE","UNKNOWN","UNNEST","UNSET","UPDATE","UPSERT","USE","USER","USING","VALIDATE","VALUE","VALUED","VALUES","VIA","VIEW","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WORK","XOR"],dataTypes$a=[],reservedSelect$a=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$a=expandPhrases(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED THEN","UPDATE SET","INSERT","NEST","UNNEST","RETURNING"]),onelineClauses=expandPhrases(["UPDATE","DELETE FROM","SET SCHEMA","ADVISE","ALTER INDEX","BEGIN TRANSACTION","BUILD INDEX","COMMIT TRANSACTION","CREATE COLLECTION","CREATE FUNCTION","CREATE INDEX","CREATE PRIMARY INDEX","CREATE SCOPE","DROP COLLECTION","DROP FUNCTION","DROP INDEX","DROP PRIMARY INDEX","DROP SCOPE","EXECUTE","EXECUTE FUNCTION","EXPLAIN","GRANT","INFER","PREPARE","REVOKE","ROLLBACK TRANSACTION","SAVEPOINT","SET TRANSACTION","UPDATE STATISTICS","UPSERT","LET","SET CURRENT SCHEMA","SHOW","USE [PRIMARY] KEYS"]),reservedSetOperations$a=expandPhrases(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),reservedJoins$a=expandPhrases(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","INNER JOIN"]),reservedKeywordPhrases$a=expandPhrases(["{ROWS | RANGE | GROUPS} BETWEEN"]),reservedDataTypePhrases$a=expandPhrases([]),n1ql={name:"n1ql",tokenizerOptions:{reservedSelect:reservedSelect$a,reservedClauses:[...reservedClauses$a,...onelineClauses],reservedSetOperations:reservedSetOperations$a,reservedJoins:reservedJoins$a,reservedKeywordPhrases:reservedKeywordPhrases$a,reservedDataTypePhrases:reservedDataTypePhrases$a,supportsXor:!0,reservedKeywords:keywords$a,reservedDataTypes:dataTypes$a,reservedFunctionNames:functions$a,stringTypes:['""-bs',"''-bs"],identTypes:["``"],extraParens:["[]","{}"],paramTypes:{positional:!0,numbered:["$"],named:["$"]},lineCommentTypes:["#","--"],operators:["%","==",":","||"]},formatOptions:{onelineClauses}},keywords$9=["ADD","AGENT","AGGREGATE","ALL","ALTER","AND","ANY","ARROW","AS","ASC","AT","ATTRIBUTE","AUTHID","AVG","BEGIN","BETWEEN","BLOCK","BODY","BOTH","BOUND","BULK","BY","BYTE","CALL","CALLING","CASCADE","CASE","CHARSET","CHARSETFORM","CHARSETID","CHECK","CLOSE","CLUSTER","CLUSTERS","COLAUTH","COLLECT","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPILED","COMPRESS","CONNECT","CONSTANT","CONSTRUCTOR","CONTEXT","CONVERT","COUNT","CRASH","CREATE","CURRENT","CURSOR","CUSTOMDATUM","DANGLING","DATA","DAY","DECLARE","DEFAULT","DEFINE","DELETE","DESC","DETERMINISTIC","DISTINCT","DROP","DURATION","ELEMENT","ELSE","ELSIF","EMPTY","END","ESCAPE","EXCEPT","EXCEPTION","EXCEPTIONS","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FINAL","FIXED","FOR","FORALL","FORCE","FORM","FROM","FUNCTION","GENERAL","GOTO","GRANT","GROUP","HASH","HAVING","HEAP","HIDDEN","HOUR","IDENTIFIED","IF","IMMEDIATE","IN","INCLUDING","INDEX","INDEXES","INDICATOR","INDICES","INFINITE","INSERT","INSTANTIABLE","INTERFACE","INTERSECT","INTERVAL","INTO","INVALIDATE","IS","ISOLATION","JAVA","LANGUAGE","LARGE","LEADING","LENGTH","LEVEL","LIBRARY","LIKE","LIKE2","LIKE4","LIKEC","LIMIT","LIMITED","LOCAL","LOCK","LOOP","MAP","MAX","MAXLEN","MEMBER","MERGE","MIN","MINUS","MINUTE","MOD","MODE","MODIFY","MONTH","MULTISET","NAME","NAN","NATIONAL","NATIVE","NEW","NOCOMPRESS","NOCOPY","NOT","NOWAIT","NULL","OBJECT","OCICOLL","OCIDATE","OCIDATETIME","OCIDURATION","OCIINTERVAL","OCILOBLOCATOR","OCINUMBER","OCIRAW","OCIREF","OCIREFCURSOR","OCIROWID","OCISTRING","OCITYPE","OF","ON","ONLY","OPAQUE","OPEN","OPERATOR","OPTION","OR","ORACLE","ORADATA","ORDER","OVERLAPS","ORGANIZATION","ORLANY","ORLVARY","OTHERS","OUT","OVERRIDING","PACKAGE","PARALLEL_ENABLE","PARAMETER","PARAMETERS","PARTITION","PASCAL","PIPE","PIPELINED","PRAGMA","PRIOR","PRIVATE","PROCEDURE","PUBLIC","RAISE","RANGE","READ","RECORD","REF","REFERENCE","REM","REMAINDER","RENAME","RESOURCE","RESULT","RETURN","RETURNING","REVERSE","REVOKE","ROLLBACK","ROW","SAMPLE","SAVE","SAVEPOINT","SB1","SB2","SB4","SECOND","SEGMENT","SELECT","SELF","SEPARATE","SEQUENCE","SERIALIZABLE","SET","SHARE","SHORT","SIZE","SIZE_T","SOME","SPARSE","SQL","SQLCODE","SQLDATA","SQLNAME","SQLSTATE","STANDARD","START","STATIC","STDDEV","STORED","STRING","STRUCT","STYLE","SUBMULTISET","SUBPARTITION","SUBSTITUTABLE","SUBTYPE","SUM","SYNONYM","TABAUTH","TABLE","TDO","THE","THEN","TIME","TIMEZONE_ABBR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_REGION","TO","TRAILING","TRANSAC","TRANSACTIONAL","TRUSTED","TYPE","UB1","UB2","UB4","UNDER","UNION","UNIQUE","UNSIGNED","UNTRUSTED","UPDATE","USE","USING","VALIST","VALUE","VALUES","VARIABLE","VARIANCE","VARRAY","VIEW","VIEWS","VOID","WHEN","WHERE","WHILE","WITH","WORK","WRAPPED","WRITE","YEAR","ZONE"],dataTypes$9=["ARRAY","BFILE_BASE","BINARY","BLOB_BASE","CHAR VARYING","CHAR_BASE","CHAR","CHARACTER VARYING","CHARACTER","CLOB_BASE","DATE_BASE","DATE","DECIMAL","DOUBLE","FLOAT","INT","INTERVAL DAY","INTERVAL YEAR","LONG","NATIONAL CHAR VARYING","NATIONAL CHAR","NATIONAL CHARACTER VARYING","NATIONAL CHARACTER","NCHAR VARYING","NCHAR","NCHAR","NUMBER_BASE","NUMBER","NUMBERIC","NVARCHAR","PRECISION","RAW","TIMESTAMP","UROWID","VARCHAR","VARCHAR2"],functions$9=["ABS","ACOS","ASIN","ATAN","ATAN2","BITAND","CEIL","COS","COSH","EXP","FLOOR","LN","LOG","MOD","NANVL","POWER","REMAINDER","ROUND","SIGN","SIN","SINH","SQRT","TAN","TANH","TRUNC","WIDTH_BUCKET","CHR","CONCAT","INITCAP","LOWER","LPAD","LTRIM","NLS_INITCAP","NLS_LOWER","NLSSORT","NLS_UPPER","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","RPAD","RTRIM","SOUNDEX","SUBSTR","TRANSLATE","TREAT","TRIM","UPPER","NLS_CHARSET_DECL_LEN","NLS_CHARSET_ID","NLS_CHARSET_NAME","ASCII","INSTR","LENGTH","REGEXP_INSTR","ADD_MONTHS","CURRENT_DATE","CURRENT_TIMESTAMP","DBTIMEZONE","EXTRACT","FROM_TZ","LAST_DAY","LOCALTIMESTAMP","MONTHS_BETWEEN","NEW_TIME","NEXT_DAY","NUMTODSINTERVAL","NUMTOYMINTERVAL","ROUND","SESSIONTIMEZONE","SYS_EXTRACT_UTC","SYSDATE","SYSTIMESTAMP","TO_CHAR","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_DSINTERVAL","TO_YMINTERVAL","TRUNC","TZ_OFFSET","GREATEST","LEAST","ASCIISTR","BIN_TO_NUM","CAST","CHARTOROWID","COMPOSE","CONVERT","DECOMPOSE","HEXTORAW","NUMTODSINTERVAL","NUMTOYMINTERVAL","RAWTOHEX","RAWTONHEX","ROWIDTOCHAR","ROWIDTONCHAR","SCN_TO_TIMESTAMP","TIMESTAMP_TO_SCN","TO_BINARY_DOUBLE","TO_BINARY_FLOAT","TO_CHAR","TO_CLOB","TO_DATE","TO_DSINTERVAL","TO_LOB","TO_MULTI_BYTE","TO_NCHAR","TO_NCLOB","TO_NUMBER","TO_DSINTERVAL","TO_SINGLE_BYTE","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_YMINTERVAL","TO_YMINTERVAL","TRANSLATE","UNISTR","BFILENAME","EMPTY_BLOB,","EMPTY_CLOB","CARDINALITY","COLLECT","POWERMULTISET","POWERMULTISET_BY_CARDINALITY","SET","SYS_CONNECT_BY_PATH","CLUSTER_ID","CLUSTER_PROBABILITY","CLUSTER_SET","FEATURE_ID","FEATURE_SET","FEATURE_VALUE","PREDICTION","PREDICTION_COST","PREDICTION_DETAILS","PREDICTION_PROBABILITY","PREDICTION_SET","APPENDCHILDXML","DELETEXML","DEPTH","EXTRACT","EXISTSNODE","EXTRACTVALUE","INSERTCHILDXML","INSERTXMLBEFORE","PATH","SYS_DBURIGEN","SYS_XMLAGG","SYS_XMLGEN","UPDATEXML","XMLAGG","XMLCDATA","XMLCOLATTVAL","XMLCOMMENT","XMLCONCAT","XMLFOREST","XMLPARSE","XMLPI","XMLQUERY","XMLROOT","XMLSEQUENCE","XMLSERIALIZE","XMLTABLE","XMLTRANSFORM","DECODE","DUMP","ORA_HASH","VSIZE","COALESCE","LNNVL","NULLIF","NVL","NVL2","SYS_CONTEXT","SYS_GUID","SYS_TYPEID","UID","USER","USERENV","AVG","COLLECT","CORR","CORR_S","CORR_K","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","FIRST","GROUP_ID","GROUPING","GROUPING_ID","LAST","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANK","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","STATS_BINOMIAL_TEST","STATS_CROSSTAB","STATS_F_TEST","STATS_KS_TEST","STATS_MODE","STATS_MW_TEST","STATS_ONE_WAY_ANOVA","STATS_T_TEST_ONE","STATS_T_TEST_PAIRED","STATS_T_TEST_INDEP","STATS_T_TEST_INDEPU","STATS_WSR_TEST","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTILE","RATIO_TO_REPORT","ROW_NUMBER","DEREF","MAKE_REF","REF","REFTOHEX","VALUE","CV","ITERATION_NUMBER","PRESENTNNV","PRESENTV","PREVIOUS"],reservedSelect$9=expandPhrases(["SELECT [ALL | DISTINCT | UNIQUE]"]),reservedClauses$9=expandPhrases(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER [SIBLINGS] BY","OFFSET","FETCH {FIRST | NEXT}","FOR UPDATE [OF]","INSERT [INTO | ALL INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [THEN]","UPDATE SET","RETURNING"]),standardOnelineClauses$9=expandPhrases(["CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE"]),tabularOnelineClauses$9=expandPhrases(["CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW","CREATE MATERIALIZED VIEW","UPDATE [ONLY]","DELETE FROM [ONLY]","DROP TABLE","ALTER TABLE","ADD","DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}","MODIFY","RENAME TO","RENAME COLUMN","TRUNCATE TABLE","SET SCHEMA","BEGIN","CONNECT BY","DECLARE","EXCEPT","EXCEPTION","LOOP","START WITH"]),reservedSetOperations$9=expandPhrases(["UNION [ALL]","MINUS","INTERSECT"]),reservedJoins$9=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | OUTER} APPLY"]),reservedKeywordPhrases$9=expandPhrases(["ON {UPDATE | DELETE} [SET NULL]","ON COMMIT","{ROWS | RANGE} BETWEEN"]),reservedDataTypePhrases$9=expandPhrases([]),plsql={name:"plsql",tokenizerOptions:{reservedSelect:reservedSelect$9,reservedClauses:[...reservedClauses$9,...standardOnelineClauses$9,...tabularOnelineClauses$9],reservedSetOperations:reservedSetOperations$9,reservedJoins:reservedJoins$9,reservedKeywordPhrases:reservedKeywordPhrases$9,reservedDataTypePhrases:reservedDataTypePhrases$9,supportsXor:!0,reservedKeywords:keywords$9,reservedDataTypes:dataTypes$9,reservedFunctionNames:functions$9,stringTypes:[{quote:"''-qq",prefixes:["N"]},{quote:"q''",prefixes:["N"]}],identTypes:['""-qq'],identChars:{rest:"$#"},variableTypes:[{regex:"&{1,2}[A-Za-z][A-Za-z0-9_$#]*"}],paramTypes:{numbered:[":"],named:[":"]},operators:["**",":=","%","~=","^=",">>","<<","=>","@","||"],postProcess:postProcess$1},formatOptions:{alwaysDenseOperators:["@"],onelineClauses:[...standardOnelineClauses$9,...tabularOnelineClauses$9],tabularOnelineClauses:tabularOnelineClauses$9}};function postProcess$1(E){let T=EOF_TOKEN;return E.map(e=>isToken.SET(e)&&isToken.BY(T)?Object.assign(Object.assign({},e),{type:TokenType.RESERVED_KEYWORD}):(isReserved(e.type)&&(T=e),e))}const functions$8=["ABS","ACOS","ACOSD","ACOSH","ASIN","ASIND","ASINH","ATAN","ATAN2","ATAN2D","ATAND","ATANH","CBRT","CEIL","CEILING","COS","COSD","COSH","COT","COTD","DEGREES","DIV","EXP","FACTORIAL","FLOOR","GCD","LCM","LN","LOG","LOG10","MIN_SCALE","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SCALE","SETSEED","SIGN","SIN","SIND","SINH","SQRT","TAN","TAND","TANH","TRIM_SCALE","TRUNC","WIDTH_BUCKET","ABS","ASCII","BIT_LENGTH","BTRIM","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CONCAT","CONCAT_WS","FORMAT","INITCAP","LEFT","LENGTH","LOWER","LPAD","LTRIM","MD5","NORMALIZE","OCTET_LENGTH","OVERLAY","PARSE_IDENT","PG_CLIENT_ENCODING","POSITION","QUOTE_IDENT","QUOTE_LITERAL","QUOTE_NULLABLE","REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","REPEAT","REPLACE","REVERSE","RIGHT","RPAD","RTRIM","SPLIT_PART","SPRINTF","STARTS_WITH","STRING_AGG","STRING_TO_ARRAY","STRING_TO_TABLE","STRPOS","SUBSTR","SUBSTRING","TO_ASCII","TO_HEX","TRANSLATE","TRIM","UNISTR","UPPER","BIT_COUNT","BIT_LENGTH","BTRIM","CONVERT","CONVERT_FROM","CONVERT_TO","DECODE","ENCODE","GET_BIT","GET_BYTE","LENGTH","LTRIM","MD5","OCTET_LENGTH","OVERLAY","POSITION","RTRIM","SET_BIT","SET_BYTE","SHA224","SHA256","SHA384","SHA512","STRING_AGG","SUBSTR","SUBSTRING","TRIM","BIT_COUNT","BIT_LENGTH","GET_BIT","LENGTH","OCTET_LENGTH","OVERLAY","POSITION","SET_BIT","SUBSTRING","REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","TO_CHAR","TO_DATE","TO_NUMBER","TO_TIMESTAMP","CLOCK_TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_BIN","DATE_PART","DATE_TRUNC","EXTRACT","ISFINITE","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL","LOCALTIME","LOCALTIMESTAMP","MAKE_DATE","MAKE_INTERVAL","MAKE_TIME","MAKE_TIMESTAMP","MAKE_TIMESTAMPTZ","NOW","PG_SLEEP","PG_SLEEP_FOR","PG_SLEEP_UNTIL","STATEMENT_TIMESTAMP","TIMEOFDAY","TO_TIMESTAMP","TRANSACTION_TIMESTAMP","ENUM_FIRST","ENUM_LAST","ENUM_RANGE","AREA","BOUND_BOX","BOX","CENTER","CIRCLE","DIAGONAL","DIAMETER","HEIGHT","ISCLOSED","ISOPEN","LENGTH","LINE","LSEG","NPOINTS","PATH","PCLOSE","POINT","POLYGON","POPEN","RADIUS","SLOPE","WIDTH","ABBREV","BROADCAST","FAMILY","HOST","HOSTMASK","INET_MERGE","INET_SAME_FAMILY","MACADDR8_SET7BIT","MASKLEN","NETMASK","NETWORK","SET_MASKLEN","TRUNC","ARRAY_TO_TSVECTOR","GET_CURRENT_TS_CONFIG","JSONB_TO_TSVECTOR","JSON_TO_TSVECTOR","LENGTH","NUMNODE","PHRASETO_TSQUERY","PLAINTO_TSQUERY","QUERYTREE","SETWEIGHT","STRIP","TO_TSQUERY","TO_TSVECTOR","TSQUERY_PHRASE","TSVECTOR_TO_ARRAY","TS_DEBUG","TS_DELETE","TS_FILTER","TS_HEADLINE","TS_LEXIZE","TS_PARSE","TS_RANK","TS_RANK_CD","TS_REWRITE","TS_STAT","TS_TOKEN_TYPE","WEBSEARCH_TO_TSQUERY","GEN_RANDOM_UUID","CURSOR_TO_XML","CURSOR_TO_XMLSCHEMA","DATABASE_TO_XML","DATABASE_TO_XMLSCHEMA","DATABASE_TO_XML_AND_XMLSCHEMA","NEXTVAL","QUERY_TO_XML","QUERY_TO_XMLSCHEMA","QUERY_TO_XML_AND_XMLSCHEMA","SCHEMA_TO_XML","SCHEMA_TO_XMLSCHEMA","SCHEMA_TO_XML_AND_XMLSCHEMA","STRING","TABLE_TO_XML","TABLE_TO_XMLSCHEMA","TABLE_TO_XML_AND_XMLSCHEMA","XMLAGG","XMLCOMMENT","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","XML_IS_WELL_FORMED","XML_IS_WELL_FORMED_CONTENT","XML_IS_WELL_FORMED_DOCUMENT","XPATH","XPATH_EXISTS","ARRAY_TO_JSON","JSONB_AGG","JSONB_ARRAY_ELEMENTS","JSONB_ARRAY_ELEMENTS_TEXT","JSONB_ARRAY_LENGTH","JSONB_BUILD_ARRAY","JSONB_BUILD_OBJECT","JSONB_EACH","JSONB_EACH_TEXT","JSONB_EXTRACT_PATH","JSONB_EXTRACT_PATH_TEXT","JSONB_INSERT","JSONB_OBJECT","JSONB_OBJECT_AGG","JSONB_OBJECT_KEYS","JSONB_PATH_EXISTS","JSONB_PATH_EXISTS_TZ","JSONB_PATH_MATCH","JSONB_PATH_MATCH_TZ","JSONB_PATH_QUERY","JSONB_PATH_QUERY_ARRAY","JSONB_PATH_QUERY_ARRAY_TZ","JSONB_PATH_QUERY_FIRST","JSONB_PATH_QUERY_FIRST_TZ","JSONB_PATH_QUERY_TZ","JSONB_POPULATE_RECORD","JSONB_POPULATE_RECORDSET","JSONB_PRETTY","JSONB_SET","JSONB_SET_LAX","JSONB_STRIP_NULLS","JSONB_TO_RECORD","JSONB_TO_RECORDSET","JSONB_TYPEOF","JSON_AGG","JSON_ARRAY_ELEMENTS","JSON_ARRAY_ELEMENTS_TEXT","JSON_ARRAY_LENGTH","JSON_BUILD_ARRAY","JSON_BUILD_OBJECT","JSON_EACH","JSON_EACH_TEXT","JSON_EXTRACT_PATH","JSON_EXTRACT_PATH_TEXT","JSON_OBJECT","JSON_OBJECT_AGG","JSON_OBJECT_KEYS","JSON_POPULATE_RECORD","JSON_POPULATE_RECORDSET","JSON_STRIP_NULLS","JSON_TO_RECORD","JSON_TO_RECORDSET","JSON_TYPEOF","ROW_TO_JSON","TO_JSON","TO_JSONB","TO_TIMESTAMP","CURRVAL","LASTVAL","NEXTVAL","SETVAL","COALESCE","GREATEST","LEAST","NULLIF","ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_DIMS","ARRAY_FILL","ARRAY_LENGTH","ARRAY_LOWER","ARRAY_NDIMS","ARRAY_POSITION","ARRAY_POSITIONS","ARRAY_PREPEND","ARRAY_REMOVE","ARRAY_REPLACE","ARRAY_TO_STRING","ARRAY_UPPER","CARDINALITY","STRING_TO_ARRAY","TRIM_ARRAY","UNNEST","ISEMPTY","LOWER","LOWER_INC","LOWER_INF","MULTIRANGE","RANGE_MERGE","UPPER","UPPER_INC","UPPER_INF","ARRAY_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COALESCE","CORR","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","EVERY","GROUPING","JSONB_AGG","JSONB_OBJECT_AGG","JSON_AGG","JSON_OBJECT_AGG","MAX","MIN","MODE","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANGE_AGG","RANGE_INTERSECT_AGG","RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","TO_JSON","TO_JSONB","VARIANCE","VAR_POP","VAR_SAMP","XMLAGG","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER","GENERATE_SERIES","GENERATE_SUBSCRIPTS","ACLDEFAULT","ACLEXPLODE","COL_DESCRIPTION","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_QUERY","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","FORMAT_TYPE","HAS_ANY_COLUMN_PRIVILEGE","HAS_COLUMN_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE","HAS_FUNCTION_PRIVILEGE","HAS_LANGUAGE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_SEQUENCE_PRIVILEGE","HAS_SERVER_PRIVILEGE","HAS_TABLESPACE_PRIVILEGE","HAS_TABLE_PRIVILEGE","HAS_TYPE_PRIVILEGE","INET_CLIENT_ADDR","INET_CLIENT_PORT","INET_SERVER_ADDR","INET_SERVER_PORT","MAKEACLITEM","OBJ_DESCRIPTION","PG_BACKEND_PID","PG_BLOCKING_PIDS","PG_COLLATION_IS_VISIBLE","PG_CONF_LOAD_TIME","PG_CONTROL_CHECKPOINT","PG_CONTROL_INIT","PG_CONTROL_SYSTEM","PG_CONVERSION_IS_VISIBLE","PG_CURRENT_LOGFILE","PG_CURRENT_SNAPSHOT","PG_CURRENT_XACT_ID","PG_CURRENT_XACT_ID_IF_ASSIGNED","PG_DESCRIBE_OBJECT","PG_FUNCTION_IS_VISIBLE","PG_GET_CATALOG_FOREIGN_KEYS","PG_GET_CONSTRAINTDEF","PG_GET_EXPR","PG_GET_FUNCTIONDEF","PG_GET_FUNCTION_ARGUMENTS","PG_GET_FUNCTION_IDENTITY_ARGUMENTS","PG_GET_FUNCTION_RESULT","PG_GET_INDEXDEF","PG_GET_KEYWORDS","PG_GET_OBJECT_ADDRESS","PG_GET_OWNED_SEQUENCE","PG_GET_RULEDEF","PG_GET_SERIAL_SEQUENCE","PG_GET_STATISTICSOBJDEF","PG_GET_TRIGGERDEF","PG_GET_USERBYID","PG_GET_VIEWDEF","PG_HAS_ROLE","PG_IDENTIFY_OBJECT","PG_IDENTIFY_OBJECT_AS_ADDRESS","PG_INDEXAM_HAS_PROPERTY","PG_INDEX_COLUMN_HAS_PROPERTY","PG_INDEX_HAS_PROPERTY","PG_IS_OTHER_TEMP_SCHEMA","PG_JIT_AVAILABLE","PG_LAST_COMMITTED_XACT","PG_LISTENING_CHANNELS","PG_MY_TEMP_SCHEMA","PG_NOTIFICATION_QUEUE_USAGE","PG_OPCLASS_IS_VISIBLE","PG_OPERATOR_IS_VISIBLE","PG_OPFAMILY_IS_VISIBLE","PG_OPTIONS_TO_TABLE","PG_POSTMASTER_START_TIME","PG_SAFE_SNAPSHOT_BLOCKING_PIDS","PG_SNAPSHOT_XIP","PG_SNAPSHOT_XMAX","PG_SNAPSHOT_XMIN","PG_STATISTICS_OBJ_IS_VISIBLE","PG_TABLESPACE_DATABASES","PG_TABLESPACE_LOCATION","PG_TABLE_IS_VISIBLE","PG_TRIGGER_DEPTH","PG_TS_CONFIG_IS_VISIBLE","PG_TS_DICT_IS_VISIBLE","PG_TS_PARSER_IS_VISIBLE","PG_TS_TEMPLATE_IS_VISIBLE","PG_TYPEOF","PG_TYPE_IS_VISIBLE","PG_VISIBLE_IN_SNAPSHOT","PG_XACT_COMMIT_TIMESTAMP","PG_XACT_COMMIT_TIMESTAMP_ORIGIN","PG_XACT_STATUS","PQSERVERVERSION","ROW_SECURITY_ACTIVE","SESSION_USER","SHOBJ_DESCRIPTION","TO_REGCLASS","TO_REGCOLLATION","TO_REGNAMESPACE","TO_REGOPER","TO_REGOPERATOR","TO_REGPROC","TO_REGPROCEDURE","TO_REGROLE","TO_REGTYPE","TXID_CURRENT","TXID_CURRENT_IF_ASSIGNED","TXID_CURRENT_SNAPSHOT","TXID_SNAPSHOT_XIP","TXID_SNAPSHOT_XMAX","TXID_SNAPSHOT_XMIN","TXID_STATUS","TXID_VISIBLE_IN_SNAPSHOT","USER","VERSION","BRIN_DESUMMARIZE_RANGE","BRIN_SUMMARIZE_NEW_VALUES","BRIN_SUMMARIZE_RANGE","CONVERT_FROM","CURRENT_SETTING","GIN_CLEAN_PENDING_LIST","PG_ADVISORY_LOCK","PG_ADVISORY_LOCK_SHARED","PG_ADVISORY_UNLOCK","PG_ADVISORY_UNLOCK_ALL","PG_ADVISORY_UNLOCK_SHARED","PG_ADVISORY_XACT_LOCK","PG_ADVISORY_XACT_LOCK_SHARED","PG_BACKUP_START_TIME","PG_CANCEL_BACKEND","PG_COLLATION_ACTUAL_VERSION","PG_COLUMN_COMPRESSION","PG_COLUMN_SIZE","PG_COPY_LOGICAL_REPLICATION_SLOT","PG_COPY_PHYSICAL_REPLICATION_SLOT","PG_CREATE_LOGICAL_REPLICATION_SLOT","PG_CREATE_PHYSICAL_REPLICATION_SLOT","PG_CREATE_RESTORE_POINT","PG_CURRENT_WAL_FLUSH_LSN","PG_CURRENT_WAL_INSERT_LSN","PG_CURRENT_WAL_LSN","PG_DATABASE_SIZE","PG_DROP_REPLICATION_SLOT","PG_EXPORT_SNAPSHOT","PG_FILENODE_RELATION","PG_GET_WAL_REPLAY_PAUSE_STATE","PG_IMPORT_SYSTEM_COLLATIONS","PG_INDEXES_SIZE","PG_IS_IN_BACKUP","PG_IS_IN_RECOVERY","PG_IS_WAL_REPLAY_PAUSED","PG_LAST_WAL_RECEIVE_LSN","PG_LAST_WAL_REPLAY_LSN","PG_LAST_XACT_REPLAY_TIMESTAMP","PG_LOGICAL_EMIT_MESSAGE","PG_LOGICAL_SLOT_GET_BINARY_CHANGES","PG_LOGICAL_SLOT_GET_CHANGES","PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES","PG_LOGICAL_SLOT_PEEK_CHANGES","PG_LOG_BACKEND_MEMORY_CONTEXTS","PG_LS_ARCHIVE_STATUSDIR","PG_LS_DIR","PG_LS_LOGDIR","PG_LS_TMPDIR","PG_LS_WALDIR","PG_PARTITION_ANCESTORS","PG_PARTITION_ROOT","PG_PARTITION_TREE","PG_PROMOTE","PG_READ_BINARY_FILE","PG_READ_FILE","PG_RELATION_FILENODE","PG_RELATION_FILEPATH","PG_RELATION_SIZE","PG_RELOAD_CONF","PG_REPLICATION_ORIGIN_ADVANCE","PG_REPLICATION_ORIGIN_CREATE","PG_REPLICATION_ORIGIN_DROP","PG_REPLICATION_ORIGIN_OID","PG_REPLICATION_ORIGIN_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_IS_SETUP","PG_REPLICATION_ORIGIN_SESSION_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_RESET","PG_REPLICATION_ORIGIN_SESSION_SETUP","PG_REPLICATION_ORIGIN_XACT_RESET","PG_REPLICATION_ORIGIN_XACT_SETUP","PG_REPLICATION_SLOT_ADVANCE","PG_ROTATE_LOGFILE","PG_SIZE_BYTES","PG_SIZE_PRETTY","PG_START_BACKUP","PG_STAT_FILE","PG_STOP_BACKUP","PG_SWITCH_WAL","PG_TABLESPACE_SIZE","PG_TABLE_SIZE","PG_TERMINATE_BACKEND","PG_TOTAL_RELATION_SIZE","PG_TRY_ADVISORY_LOCK","PG_TRY_ADVISORY_LOCK_SHARED","PG_TRY_ADVISORY_XACT_LOCK","PG_TRY_ADVISORY_XACT_LOCK_SHARED","PG_WALFILE_NAME","PG_WALFILE_NAME_OFFSET","PG_WAL_LSN_DIFF","PG_WAL_REPLAY_PAUSE","PG_WAL_REPLAY_RESUME","SET_CONFIG","SUPPRESS_REDUNDANT_UPDATES_TRIGGER","TSVECTOR_UPDATE_TRIGGER","TSVECTOR_UPDATE_TRIGGER_COLUMN","PG_EVENT_TRIGGER_DDL_COMMANDS","PG_EVENT_TRIGGER_DROPPED_OBJECTS","PG_EVENT_TRIGGER_TABLE_REWRITE_OID","PG_EVENT_TRIGGER_TABLE_REWRITE_REASON","PG_GET_OBJECT_ADDRESS","PG_MCV_LIST_ITEMS","CAST"],keywords$8=["ALL","ANALYSE","ANALYZE","AND","ANY","AS","ASC","ASYMMETRIC","AUTHORIZATION","BETWEEN","BINARY","BOTH","CASE","CAST","CHECK","COLLATE","COLLATION","COLUMN","CONCURRENTLY","CONSTRAINT","CREATE","CROSS","CURRENT_CATALOG","CURRENT_DATE","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DAY","DEFAULT","DEFERRABLE","DESC","DISTINCT","DO","ELSE","END","EXCEPT","EXISTS","FALSE","FETCH","FILTER","FOR","FOREIGN","FREEZE","FROM","FULL","GRANT","GROUP","HAVING","HOUR","ILIKE","IN","INITIALLY","INNER","INOUT","INTERSECT","INTO","IS","ISNULL","JOIN","LATERAL","LEADING","LEFT","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","MINUTE","MONTH","NATURAL","NOT","NOTNULL","NULL","NULLIF","OFFSET","ON","ONLY","OR","ORDER","OUT","OUTER","OVER","OVERLAPS","PLACING","PRIMARY","REFERENCES","RETURNING","RIGHT","ROW","SECOND","SELECT","SESSION_USER","SIMILAR","SOME","SYMMETRIC","TABLE","TABLESAMPLE","THEN","TO","TRAILING","TRUE","UNION","UNIQUE","USER","USING","VALUES","VARIADIC","VERBOSE","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT","YEAR"],dataTypes$8=["ARRAY","BIGINT","BIT","BIT VARYING","BOOL","BOOLEAN","CHAR","CHARACTER","CHARACTER VARYING","DECIMAL","DEC","DOUBLE","ENUM","FLOAT","INT","INTEGER","INTERVAL","NCHAR","NUMERIC","JSON","JSONB","PRECISION","REAL","SMALLINT","TEXT","TIME","TIMESTAMP","TIMESTAMPTZ","UUID","VARCHAR","XML","ZONE"],reservedSelect$8=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$8=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","FOR {UPDATE | NO KEY UPDATE | SHARE | KEY SHARE} [OF]","INSERT INTO","VALUES","DEFAULT VALUES","SET","RETURNING"]),standardOnelineClauses$8=expandPhrases(["CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$8=expandPhrases(["CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW","CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]","UPDATE [ONLY]","WHERE CURRENT OF","ON CONFLICT","DELETE FROM [ONLY]","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS] [ONLY]","ALTER TABLE ALL IN TABLESPACE","RENAME [COLUMN]","RENAME TO","ADD [COLUMN] [IF NOT EXISTS]","DROP [COLUMN] [IF EXISTS]","ALTER [COLUMN]","SET DATA TYPE","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","TRUNCATE [TABLE] [ONLY]","SET SCHEMA","AFTER","ABORT","ALTER AGGREGATE","ALTER COLLATION","ALTER CONVERSION","ALTER DATABASE","ALTER DEFAULT PRIVILEGES","ALTER DOMAIN","ALTER EVENT TRIGGER","ALTER EXTENSION","ALTER FOREIGN DATA WRAPPER","ALTER FOREIGN TABLE","ALTER FUNCTION","ALTER GROUP","ALTER INDEX","ALTER LANGUAGE","ALTER LARGE OBJECT","ALTER MATERIALIZED VIEW","ALTER OPERATOR","ALTER OPERATOR CLASS","ALTER OPERATOR FAMILY","ALTER POLICY","ALTER PROCEDURE","ALTER PUBLICATION","ALTER ROLE","ALTER ROUTINE","ALTER RULE","ALTER SCHEMA","ALTER SEQUENCE","ALTER SERVER","ALTER STATISTICS","ALTER SUBSCRIPTION","ALTER SYSTEM","ALTER TABLESPACE","ALTER TEXT SEARCH CONFIGURATION","ALTER TEXT SEARCH DICTIONARY","ALTER TEXT SEARCH PARSER","ALTER TEXT SEARCH TEMPLATE","ALTER TRIGGER","ALTER TYPE","ALTER USER","ALTER USER MAPPING","ALTER VIEW","ANALYZE","BEGIN","CALL","CHECKPOINT","CLOSE","CLUSTER","COMMIT","COMMIT PREPARED","COPY","CREATE ACCESS METHOD","CREATE [OR REPLACE] AGGREGATE","CREATE CAST","CREATE COLLATION","CREATE [DEFAULT] CONVERSION","CREATE DATABASE","CREATE DOMAIN","CREATE EVENT TRIGGER","CREATE EXTENSION","CREATE FOREIGN DATA WRAPPER","CREATE FOREIGN TABLE","CREATE [OR REPLACE] FUNCTION","CREATE GROUP","CREATE [UNIQUE] INDEX","CREATE [OR REPLACE] [TRUSTED] [PROCEDURAL] LANGUAGE","CREATE OPERATOR","CREATE OPERATOR CLASS","CREATE OPERATOR FAMILY","CREATE POLICY","CREATE [OR REPLACE] PROCEDURE","CREATE PUBLICATION","CREATE ROLE","CREATE [OR REPLACE] RULE","CREATE SCHEMA [AUTHORIZATION]","CREATE [TEMPORARY | TEMP | UNLOGGED] SEQUENCE","CREATE SERVER","CREATE STATISTICS","CREATE SUBSCRIPTION","CREATE TABLESPACE","CREATE TEXT SEARCH CONFIGURATION","CREATE TEXT SEARCH DICTIONARY","CREATE TEXT SEARCH PARSER","CREATE TEXT SEARCH TEMPLATE","CREATE [OR REPLACE] TRANSFORM","CREATE [OR REPLACE] [CONSTRAINT] TRIGGER","CREATE TYPE","CREATE USER","CREATE USER MAPPING","DEALLOCATE","DECLARE","DISCARD","DROP ACCESS METHOD","DROP AGGREGATE","DROP CAST","DROP COLLATION","DROP CONVERSION","DROP DATABASE","DROP DOMAIN","DROP EVENT TRIGGER","DROP EXTENSION","DROP FOREIGN DATA WRAPPER","DROP FOREIGN TABLE","DROP FUNCTION","DROP GROUP","DROP IDENTITY","DROP INDEX","DROP LANGUAGE","DROP MATERIALIZED VIEW [IF EXISTS]","DROP OPERATOR","DROP OPERATOR CLASS","DROP OPERATOR FAMILY","DROP OWNED","DROP POLICY","DROP PROCEDURE","DROP PUBLICATION","DROP ROLE","DROP ROUTINE","DROP RULE","DROP SCHEMA","DROP SEQUENCE","DROP SERVER","DROP STATISTICS","DROP SUBSCRIPTION","DROP TABLESPACE","DROP TEXT SEARCH CONFIGURATION","DROP TEXT SEARCH DICTIONARY","DROP TEXT SEARCH PARSER","DROP TEXT SEARCH TEMPLATE","DROP TRANSFORM","DROP TRIGGER","DROP TYPE","DROP USER","DROP USER MAPPING","DROP VIEW","EXECUTE","EXPLAIN","FETCH","GRANT","IMPORT FOREIGN SCHEMA","LISTEN","LOAD","LOCK","MOVE","NOTIFY","OVERRIDING SYSTEM VALUE","PREPARE","PREPARE TRANSACTION","REASSIGN OWNED","REFRESH MATERIALIZED VIEW","REINDEX","RELEASE SAVEPOINT","RESET [ALL|ROLE|SESSION AUTHORIZATION]","REVOKE","ROLLBACK","ROLLBACK PREPARED","ROLLBACK TO SAVEPOINT","SAVEPOINT","SECURITY LABEL","SELECT INTO","SET CONSTRAINTS","SET ROLE","SET SESSION AUTHORIZATION","SET TRANSACTION","SHOW","START TRANSACTION","UNLISTEN","VACUUM"]),reservedSetOperations$8=expandPhrases(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),reservedJoins$8=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),reservedKeywordPhrases$8=expandPhrases(["PRIMARY KEY","GENERATED {ALWAYS | BY DEFAULT} AS IDENTITY","ON {UPDATE | DELETE} [NO ACTION | RESTRICT | CASCADE | SET NULL | SET DEFAULT]","DO {NOTHING | UPDATE}","AS MATERIALIZED","{ROWS | RANGE | GROUPS} BETWEEN","IS [NOT] DISTINCT FROM","NULLS {FIRST | LAST}","WITH ORDINALITY"]),reservedDataTypePhrases$8=expandPhrases(["[TIMESTAMP | TIME] {WITH | WITHOUT} TIME ZONE"]),postgresql={name:"postgresql",tokenizerOptions:{reservedSelect:reservedSelect$8,reservedClauses:[...reservedClauses$8,...standardOnelineClauses$8,...tabularOnelineClauses$8],reservedSetOperations:reservedSetOperations$8,reservedJoins:reservedJoins$8,reservedKeywordPhrases:reservedKeywordPhrases$8,reservedDataTypePhrases:reservedDataTypePhrases$8,reservedKeywords:keywords$8,reservedDataTypes:dataTypes$8,reservedFunctionNames:functions$8,nestedBlockComments:!0,extraParens:["[]"],underscoresInNumbers:!0,stringTypes:["$$",{quote:"''-qq",prefixes:["U&"]},{quote:"''-qq-bs",prefixes:["E"],requirePrefix:!0},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:[{quote:'""-qq',prefixes:["U&"]}],identChars:{rest:"$"},paramTypes:{numbered:["$"]},operators:["%","^","|/","||/","@",":=","&","|","#","~","<<",">>","~>~","~<~","~>=~","~<=~","@-@","@@","##","<->","&&","&<","&>","<<|","&<|","|>>","|&>","<^","^>","?#","?-","?|","?-|","?||","@>","<@","~=","?","@?","?&","->","->>","#>","#>>","#-","=>",">>=","<<=","~~","~~*","!~~","!~~*","~","~*","!~","!~*","-|-","||","@@@","!!","^@","<%","%>","<<%","%>>","<<->","<->>","<<<->","<->>>","::",":","<#>","<=>","<+>","<~>","<%>"],operatorKeyword:!0},formatOptions:{alwaysDenseOperators:["::",":"],onelineClauses:[...standardOnelineClauses$8,...tabularOnelineClauses$8],tabularOnelineClauses:tabularOnelineClauses$8}},functions$7=["ANY_VALUE","APPROXIMATE PERCENTILE_DISC","AVG","COUNT","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP","array_concat","array_flatten","get_array_length","split_to_array","subarray","BIT_AND","BIT_OR","BOOL_AND","BOOL_OR","COALESCE","DECODE","GREATEST","LEAST","NVL","NVL2","NULLIF","ADD_MONTHS","AT TIME ZONE","CONVERT_TIMEZONE","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_CMP","DATE_CMP_TIMESTAMP","DATE_CMP_TIMESTAMPTZ","DATE_PART_YEAR","DATEADD","DATEDIFF","DATE_PART","DATE_TRUNC","EXTRACT","GETDATE","INTERVAL_CMP","LAST_DAY","MONTHS_BETWEEN","NEXT_DAY","SYSDATE","TIMEOFDAY","TIMESTAMP_CMP","TIMESTAMP_CMP_DATE","TIMESTAMP_CMP_TIMESTAMPTZ","TIMESTAMPTZ_CMP","TIMESTAMPTZ_CMP_DATE","TIMESTAMPTZ_CMP_TIMESTAMP","TIMEZONE","TO_TIMESTAMP","TRUNC","AddBBox","DropBBox","GeometryType","ST_AddPoint","ST_Angle","ST_Area","ST_AsBinary","ST_AsEWKB","ST_AsEWKT","ST_AsGeoJSON","ST_AsText","ST_Azimuth","ST_Boundary","ST_Collect","ST_Contains","ST_ContainsProperly","ST_ConvexHull","ST_CoveredBy","ST_Covers","ST_Crosses","ST_Dimension","ST_Disjoint","ST_Distance","ST_DistanceSphere","ST_DWithin","ST_EndPoint","ST_Envelope","ST_Equals","ST_ExteriorRing","ST_Force2D","ST_Force3D","ST_Force3DM","ST_Force3DZ","ST_Force4D","ST_GeometryN","ST_GeometryType","ST_GeomFromEWKB","ST_GeomFromEWKT","ST_GeomFromText","ST_GeomFromWKB","ST_InteriorRingN","ST_Intersects","ST_IsPolygonCCW","ST_IsPolygonCW","ST_IsClosed","ST_IsCollection","ST_IsEmpty","ST_IsSimple","ST_IsValid","ST_Length","ST_LengthSphere","ST_Length2D","ST_LineFromMultiPoint","ST_LineInterpolatePoint","ST_M","ST_MakeEnvelope","ST_MakeLine","ST_MakePoint","ST_MakePolygon","ST_MemSize","ST_MMax","ST_MMin","ST_Multi","ST_NDims","ST_NPoints","ST_NRings","ST_NumGeometries","ST_NumInteriorRings","ST_NumPoints","ST_Perimeter","ST_Perimeter2D","ST_Point","ST_PointN","ST_Points","ST_Polygon","ST_RemovePoint","ST_Reverse","ST_SetPoint","ST_SetSRID","ST_Simplify","ST_SRID","ST_StartPoint","ST_Touches","ST_Within","ST_X","ST_XMax","ST_XMin","ST_Y","ST_YMax","ST_YMin","ST_Z","ST_ZMax","ST_ZMin","SupportsBBox","CHECKSUM","FUNC_SHA1","FNV_HASH","MD5","SHA","SHA1","SHA2","HLL","HLL_CREATE_SKETCH","HLL_CARDINALITY","HLL_COMBINE","IS_VALID_JSON","IS_VALID_JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_EXTRACT_ARRAY_ELEMENT_TEXT","JSON_EXTRACT_PATH_TEXT","JSON_PARSE","JSON_SERIALIZE","ABS","ACOS","ASIN","ATAN","ATAN2","CBRT","CEILING","CEIL","COS","COT","DEGREES","DEXP","DLOG1","DLOG10","EXP","FLOOR","LN","LOG","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SIN","SIGN","SQRT","TAN","TO_HEX","TRUNC","EXPLAIN_MODEL","ASCII","BPCHARCMP","BTRIM","BTTEXT_PATTERN_CMP","CHAR_LENGTH","CHARACTER_LENGTH","CHARINDEX","CHR","COLLATE","CONCAT","CRC32","DIFFERENCE","INITCAP","LEFT","RIGHT","LEN","LENGTH","LOWER","LPAD","RPAD","LTRIM","OCTETINDEX","OCTET_LENGTH","POSITION","QUOTE_IDENT","QUOTE_LITERAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","REPLICATE","REVERSE","RTRIM","SOUNDEX","SPLIT_PART","STRPOS","STRTOL","SUBSTRING","TEXTLEN","TRANSLATE","TRIM","UPPER","decimal_precision","decimal_scale","is_array","is_bigint","is_boolean","is_char","is_decimal","is_float","is_integer","is_object","is_scalar","is_smallint","is_varchar","json_typeof","AVG","COUNT","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAST_VALUE","LAG","LEAD","LISTAGG","MAX","MEDIAN","MIN","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP","CAST","CONVERT","TO_CHAR","TO_DATE","TO_NUMBER","TEXT_TO_INT_ALT","TEXT_TO_NUMERIC_ALT","CHANGE_QUERY_PRIORITY","CHANGE_SESSION_PRIORITY","CHANGE_USER_PRIORITY","CURRENT_SETTING","PG_CANCEL_BACKEND","PG_TERMINATE_BACKEND","REBOOT_CLUSTER","SET_CONFIG","CURRENT_AWS_ACCOUNT","CURRENT_DATABASE","CURRENT_NAMESPACE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","CURRENT_USER_ID","HAS_ASSUMEROLE_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_TABLE_PRIVILEGE","PG_BACKEND_PID","PG_GET_COLS","PG_GET_GRANTEE_BY_IAM_ROLE","PG_GET_IAM_ROLE_BY_USER","PG_GET_LATE_BINDING_VIEW_COLS","PG_LAST_COPY_COUNT","PG_LAST_COPY_ID","PG_LAST_UNLOAD_ID","PG_LAST_QUERY_ID","PG_LAST_UNLOAD_COUNT","SESSION_USER","SLICE_NUM","USER","VERSION"],keywords$7=["AES128","AES256","ALL","ALLOWOVERWRITE","ANY","AS","ASC","AUTHORIZATION","BACKUP","BETWEEN","BINARY","BOTH","CHECK","COLUMN","CONSTRAINT","CREATE","CROSS","DEFAULT","DEFERRABLE","DEFLATE","DEFRAG","DESC","DISABLE","DISTINCT","DO","ENABLE","ENCODE","ENCRYPT","ENCRYPTION","EXPLICIT","FALSE","FOR","FOREIGN","FREEZE","FROM","FULL","GLOBALDICT256","GLOBALDICT64K","GROUP","IDENTITY","IGNORE","ILIKE","IN","INITIALLY","INNER","INTO","IS","ISNULL","LANGUAGE","LEADING","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","LUN","LUNS","MINUS","NATURAL","NEW","NOT","NOTNULL","NULL","NULLS","OFF","OFFLINE","OFFSET","OID","OLD","ON","ONLY","OPEN","ORDER","OUTER","OVERLAPS","PARALLEL","PARTITION","PERCENT","PERMISSIONS","PLACING","PRIMARY","RECOVER","REFERENCES","REJECTLOG","RESORT","RESPECT","RESTORE","SIMILAR","SNAPSHOT","SOME","SYSTEM","TABLE","TAG","TDES","THEN","TIMESTAMP","TO","TOP","TRAILING","TRUE","UNIQUE","USING","VERBOSE","WALLET","WITHOUT","ACCEPTANYDATE","ACCEPTINVCHARS","BLANKSASNULL","DATEFORMAT","EMPTYASNULL","ENCODING","ESCAPE","EXPLICIT_IDS","FILLRECORD","IGNOREBLANKLINES","IGNOREHEADER","REMOVEQUOTES","ROUNDEC","TIMEFORMAT","TRIMBLANKS","TRUNCATECOLUMNS","COMPROWS","COMPUPDATE","MAXERROR","NOLOAD","STATUPDATE","FORMAT","CSV","DELIMITER","FIXEDWIDTH","SHAPEFILE","AVRO","JSON","PARQUET","ORC","ACCESS_KEY_ID","CREDENTIALS","ENCRYPTED","IAM_ROLE","MASTER_SYMMETRIC_KEY","SECRET_ACCESS_KEY","SESSION_TOKEN","BZIP2","GZIP","LZOP","ZSTD","MANIFEST","READRATIO","REGION","SSH","RAW","AZ64","BYTEDICT","DELTA","DELTA32K","LZO","MOSTLY8","MOSTLY16","MOSTLY32","RUNLENGTH","TEXT255","TEXT32K","CATALOG_ROLE","SECRET_ARN","EXTERNAL","AUTO","EVEN","KEY","PREDICATE","COMPRESSION"],dataTypes$7=["ARRAY","BIGINT","BPCHAR","CHAR","CHARACTER VARYING","CHARACTER","DECIMAL","INT","INT2","INT4","INT8","INTEGER","NCHAR","NUMERIC","NVARCHAR","SMALLINT","TEXT","VARBYTE","VARCHAR"],reservedSelect$7=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$7=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","QUALIFY","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","SET"]),standardOnelineClauses$7=expandPhrases(["CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$7=expandPhrases(["CREATE [OR REPLACE | MATERIALIZED] VIEW","UPDATE","DELETE [FROM]","DROP TABLE [IF EXISTS]","ALTER TABLE","ALTER TABLE APPEND","ADD [COLUMN]","DROP [COLUMN]","RENAME TO","RENAME COLUMN","ALTER COLUMN","TYPE","ENCODE","TRUNCATE [TABLE]","ABORT","ALTER DATABASE","ALTER DATASHARE","ALTER DEFAULT PRIVILEGES","ALTER GROUP","ALTER MATERIALIZED VIEW","ALTER PROCEDURE","ALTER SCHEMA","ALTER USER","ANALYSE","ANALYZE","ANALYSE COMPRESSION","ANALYZE COMPRESSION","BEGIN","CALL","CANCEL","CLOSE","COMMIT","COPY","CREATE DATABASE","CREATE DATASHARE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL SCHEMA","CREATE EXTERNAL TABLE","CREATE FUNCTION","CREATE GROUP","CREATE LIBRARY","CREATE MODEL","CREATE PROCEDURE","CREATE SCHEMA","CREATE USER","DEALLOCATE","DECLARE","DESC DATASHARE","DROP DATABASE","DROP DATASHARE","DROP FUNCTION","DROP GROUP","DROP LIBRARY","DROP MODEL","DROP MATERIALIZED VIEW","DROP PROCEDURE","DROP SCHEMA","DROP USER","DROP VIEW","DROP","EXECUTE","EXPLAIN","FETCH","GRANT","LOCK","PREPARE","REFRESH MATERIALIZED VIEW","RESET","REVOKE","ROLLBACK","SELECT INTO","SET SESSION AUTHORIZATION","SET SESSION CHARACTERISTICS","SHOW","SHOW EXTERNAL TABLE","SHOW MODEL","SHOW DATASHARES","SHOW PROCEDURE","SHOW TABLE","SHOW VIEW","START TRANSACTION","UNLOAD","VACUUM"]),reservedSetOperations$7=expandPhrases(["UNION [ALL]","EXCEPT","INTERSECT","MINUS"]),reservedJoins$7=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),reservedKeywordPhrases$7=expandPhrases(["NULL AS","DATA CATALOG","HIVE METASTORE","{ROWS | RANGE} BETWEEN"]),reservedDataTypePhrases$7=expandPhrases([]),redshift={name:"redshift",tokenizerOptions:{reservedSelect:reservedSelect$7,reservedClauses:[...reservedClauses$7,...standardOnelineClauses$7,...tabularOnelineClauses$7],reservedSetOperations:reservedSetOperations$7,reservedJoins:reservedJoins$7,reservedKeywordPhrases:reservedKeywordPhrases$7,reservedDataTypePhrases:reservedDataTypePhrases$7,reservedKeywords:keywords$7,reservedDataTypes:dataTypes$7,reservedFunctionNames:functions$7,extraParens:["[]"],stringTypes:["''-qq"],identTypes:['""-qq'],identChars:{first:"#"},paramTypes:{numbered:["$"]},operators:["^","%","@","|/","||/","&","|","~","<<",">>","||","::"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:[...standardOnelineClauses$7,...tabularOnelineClauses$7],tabularOnelineClauses:tabularOnelineClauses$7}},keywords$6=["ADD","AFTER","ALL","ALTER","ANALYZE","AND","ANTI","ANY","ARCHIVE","AS","ASC","AT","AUTHORIZATION","BETWEEN","BOTH","BUCKET","BUCKETS","BY","CACHE","CASCADE","CAST","CHANGE","CHECK","CLEAR","CLUSTER","CLUSTERED","CODEGEN","COLLATE","COLLECTION","COLUMN","COLUMNS","COMMENT","COMMIT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONSTRAINT","COST","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATA","DATABASE","DATABASES","DAY","DBPROPERTIES","DEFINED","DELETE","DELIMITED","DESC","DESCRIBE","DFS","DIRECTORIES","DIRECTORY","DISTINCT","DISTRIBUTE","DIV","DROP","ESCAPE","ESCAPED","EXCEPT","EXCHANGE","EXISTS","EXPORT","EXTENDED","EXTERNAL","EXTRACT","FALSE","FETCH","FIELDS","FILTER","FILEFORMAT","FIRST","FIRST_VALUE","FOLLOWING","FOR","FOREIGN","FORMAT","FORMATTED","FULL","FUNCTION","FUNCTIONS","GLOBAL","GRANT","GROUP","GROUPING","HOUR","IF","IGNORE","IMPORT","IN","INDEX","INDEXES","INNER","INPATH","INPUTFORMAT","INTERSECT","INTO","IS","ITEMS","KEYS","LAST","LAST_VALUE","LATERAL","LAZY","LEADING","LEFT","LIKE","LINES","LIST","LOCAL","LOCATION","LOCK","LOCKS","LOGICAL","MACRO","MATCHED","MERGE","MINUTE","MONTH","MSCK","NAMESPACE","NAMESPACES","NATURAL","NO","NOT","NULL","NULLS","OF","ONLY","OPTION","OPTIONS","OR","ORDER","OUT","OUTER","OUTPUTFORMAT","OVER","OVERLAPS","OVERLAY","OVERWRITE","OWNER","PARTITION","PARTITIONED","PARTITIONS","PERCENT","PLACING","POSITION","PRECEDING","PRIMARY","PRINCIPALS","PROPERTIES","PURGE","QUERY","RANGE","RECORDREADER","RECORDWRITER","RECOVER","REDUCE","REFERENCES","RENAME","REPAIR","REPLACE","RESPECT","RESTRICT","REVOKE","RIGHT","RLIKE","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","SCHEMA","SECOND","SELECT","SEMI","SEPARATED","SERDE","SERDEPROPERTIES","SESSION_USER","SETS","SHOW","SKEWED","SOME","SORT","SORTED","START","STATISTICS","STORED","STRATIFY","SUBSTR","SUBSTRING","TABLE","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","THEN","TO","TOUCH","TRAILING","TRANSACTION","TRANSACTIONS","TRIM","TRUE","TRUNCATE","UNARCHIVE","UNBOUNDED","UNCACHE","UNIQUE","UNKNOWN","UNLOCK","UNSET","USE","USER","USING","VIEW","WINDOW","YEAR","ANALYSE","ARRAY_ZIP","COALESCE","CONTAINS","CONVERT","DAYS","DAY_HOUR","DAY_MINUTE","DAY_SECOND","DECODE","DEFAULT","DISTINCTROW","ENCODE","EXPLODE","EXPLODE_OUTER","FIXED","GREATEST","GROUP_CONCAT","HOURS","HOUR_MINUTE","HOUR_SECOND","IFNULL","LEAST","LEVEL","MINUTE_SECOND","NULLIF","OFFSET","ON","OPTIMIZE","REGEXP","SEPARATOR","SIZE","TYPE","TYPES","UNSIGNED","VARIABLES","YEAR_MONTH"],dataTypes$6=["ARRAY","BIGINT","BINARY","BOOLEAN","BYTE","CHAR","DATE","DEC","DECIMAL","DOUBLE","FLOAT","INT","INTEGER","INTERVAL","LONG","MAP","NUMERIC","REAL","SHORT","SMALLINT","STRING","STRUCT","TIMESTAMP_LTZ","TIMESTAMP_NTZ","TIMESTAMP","TINYINT","VARCHAR"],functions$6=["APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COUNT","COUNT","COUNT_IF","COUNT_MIN_SKETCH","COVAR_POP","COVAR_SAMP","EVERY","FIRST","FIRST_VALUE","GROUPING","GROUPING_ID","KURTOSIS","LAST","LAST_VALUE","MAX","MAX_BY","MEAN","MIN","MIN_BY","PERCENTILE","PERCENTILE","PERCENTILE_APPROX","SKEWNESS","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE","CUME_DIST","DENSE_RANK","LAG","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER","ARRAY","ARRAY_CONTAINS","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_UNION","ARRAYS_OVERLAP","ARRAYS_ZIP","FLATTEN","SEQUENCE","SHUFFLE","SLICE","SORT_ARRAY","ELEMENT_AT","ELEMENT_AT","MAP_CONCAT","MAP_ENTRIES","MAP_FROM_ARRAYS","MAP_FROM_ENTRIES","MAP_KEYS","MAP_VALUES","STR_TO_MAP","ADD_MONTHS","CURRENT_DATE","CURRENT_DATE","CURRENT_TIMESTAMP","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","DATE_ADD","DATE_FORMAT","DATE_FROM_UNIX_DATE","DATE_PART","DATE_SUB","DATE_TRUNC","DATEDIFF","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MAKE_DATE","MAKE_DT_INTERVAL","MAKE_INTERVAL","MAKE_TIMESTAMP","MAKE_YM_INTERVAL","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","NOW","QUARTER","SECOND","SESSION_WINDOW","TIMESTAMP_MICROS","TIMESTAMP_MILLIS","TIMESTAMP_SECONDS","TO_DATE","TO_TIMESTAMP","TO_UNIX_TIMESTAMP","TO_UTC_TIMESTAMP","TRUNC","UNIX_DATE","UNIX_MICROS","UNIX_MILLIS","UNIX_SECONDS","UNIX_TIMESTAMP","WEEKDAY","WEEKOFYEAR","WINDOW","YEAR","FROM_JSON","GET_JSON_OBJECT","JSON_ARRAY_LENGTH","JSON_OBJECT_KEYS","JSON_TUPLE","SCHEMA_OF_JSON","TO_JSON","ABS","ACOS","ACOSH","AGGREGATE","ARRAY_SORT","ASCII","ASIN","ASINH","ASSERT_TRUE","ATAN","ATAN2","ATANH","BASE64","BIN","BIT_COUNT","BIT_GET","BIT_LENGTH","BROUND","BTRIM","CARDINALITY","CBRT","CEIL","CEILING","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONV","COS","COSH","COT","CRC32","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_USER","DEGREES","ELT","EXP","EXPM1","FACTORIAL","FIND_IN_SET","FLOOR","FORALL","FORMAT_NUMBER","FORMAT_STRING","FROM_CSV","GETBIT","HASH","HEX","HYPOT","INITCAP","INLINE","INLINE_OUTER","INPUT_FILE_BLOCK_LENGTH","INPUT_FILE_BLOCK_START","INPUT_FILE_NAME","INSTR","ISNAN","ISNOTNULL","ISNULL","JAVA_METHOD","LCASE","LEFT","LENGTH","LEVENSHTEIN","LN","LOCATE","LOG","LOG10","LOG1P","LOG2","LOWER","LPAD","LTRIM","MAP_FILTER","MAP_ZIP_WITH","MD5","MOD","MONOTONICALLY_INCREASING_ID","NAMED_STRUCT","NANVL","NEGATIVE","NVL","NVL2","OCTET_LENGTH","OVERLAY","PARSE_URL","PI","PMOD","POSEXPLODE","POSEXPLODE_OUTER","POSITION","POSITIVE","POW","POWER","PRINTF","RADIANS","RAISE_ERROR","RAND","RANDN","RANDOM","REFLECT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_REPLACE","REPEAT","REPLACE","REVERSE","RIGHT","RINT","ROUND","RPAD","RTRIM","SCHEMA_OF_CSV","SENTENCES","SHA","SHA1","SHA2","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIGNUM","SIN","SINH","SOUNDEX","SPACE","SPARK_PARTITION_ID","SPLIT","SQRT","STACK","SUBSTR","SUBSTRING","SUBSTRING_INDEX","TAN","TANH","TO_CSV","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRY_ADD","TRY_DIVIDE","TYPEOF","UCASE","UNBASE64","UNHEX","UPPER","UUID","VERSION","WIDTH_BUCKET","XPATH","XPATH_BOOLEAN","XPATH_DOUBLE","XPATH_FLOAT","XPATH_INT","XPATH_LONG","XPATH_NUMBER","XPATH_SHORT","XPATH_STRING","XXHASH64","ZIP_WITH","CAST","COALESCE","NULLIF"],reservedSelect$6=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$6=expandPhrases(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT [INTO | OVERWRITE] [TABLE]","VALUES","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE"]),standardOnelineClauses$6=expandPhrases(["CREATE [EXTERNAL] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$6=expandPhrases(["CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD COLUMNS","DROP {COLUMN | COLUMNS}","RENAME TO","RENAME COLUMN","ALTER COLUMN","TRUNCATE TABLE","LATERAL VIEW","ALTER DATABASE","ALTER VIEW","CREATE DATABASE","CREATE FUNCTION","DROP DATABASE","DROP FUNCTION","DROP VIEW","REPAIR TABLE","USE DATABASE","TABLESAMPLE","PIVOT","TRANSFORM","EXPLAIN","ADD FILE","ADD JAR","ANALYZE TABLE","CACHE TABLE","CLEAR CACHE","DESCRIBE DATABASE","DESCRIBE FUNCTION","DESCRIBE QUERY","DESCRIBE TABLE","LIST FILE","LIST JAR","REFRESH","REFRESH TABLE","REFRESH FUNCTION","RESET","SHOW COLUMNS","SHOW CREATE TABLE","SHOW DATABASES","SHOW FUNCTIONS","SHOW PARTITIONS","SHOW TABLE EXTENDED","SHOW TABLES","SHOW TBLPROPERTIES","SHOW VIEWS","UNCACHE TABLE"]),reservedSetOperations$6=expandPhrases(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),reservedJoins$6=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","[LEFT] {ANTI | SEMI} JOIN","NATURAL [LEFT] {ANTI | SEMI} JOIN"]),reservedKeywordPhrases$6=expandPhrases(["ON DELETE","ON UPDATE","CURRENT ROW","{ROWS | RANGE} BETWEEN"]),reservedDataTypePhrases$6=expandPhrases([]),spark={name:"spark",tokenizerOptions:{reservedSelect:reservedSelect$6,reservedClauses:[...reservedClauses$6,...standardOnelineClauses$6,...tabularOnelineClauses$6],reservedSetOperations:reservedSetOperations$6,reservedJoins:reservedJoins$6,reservedKeywordPhrases:reservedKeywordPhrases$6,reservedDataTypePhrases:reservedDataTypePhrases$6,supportsXor:!0,reservedKeywords:keywords$6,reservedDataTypes:dataTypes$6,reservedFunctionNames:functions$6,extraParens:["[]"],stringTypes:["''-bs",'""-bs',{quote:"''-raw",prefixes:["R","X"],requirePrefix:!0},{quote:'""-raw',prefixes:["R","X"],requirePrefix:!0}],identTypes:["``"],identChars:{allowFirstCharNumber:!0},variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||","->"],postProcess},formatOptions:{onelineClauses:[...standardOnelineClauses$6,...tabularOnelineClauses$6],tabularOnelineClauses:tabularOnelineClauses$6}};function postProcess(E){return E.map((T,e)=>{const R=E[e-1]||EOF_TOKEN,A=E[e+1]||EOF_TOKEN;return isToken.WINDOW(T)&&A.type===TokenType.OPEN_PAREN?Object.assign(Object.assign({},T),{type:TokenType.RESERVED_FUNCTION_NAME}):T.text==="ITEMS"&&T.type===TokenType.RESERVED_KEYWORD&&!(R.text==="COLLECTION"&&A.text==="TERMINATED")?Object.assign(Object.assign({},T),{type:TokenType.IDENTIFIER,text:T.raw}):T})}const functions$5=["ABS","CHANGES","CHAR","COALESCE","FORMAT","GLOB","HEX","IFNULL","IIF","INSTR","LAST_INSERT_ROWID","LENGTH","LIKE","LIKELIHOOD","LIKELY","LOAD_EXTENSION","LOWER","LTRIM","NULLIF","PRINTF","QUOTE","RANDOM","RANDOMBLOB","REPLACE","ROUND","RTRIM","SIGN","SOUNDEX","SQLITE_COMPILEOPTION_GET","SQLITE_COMPILEOPTION_USED","SQLITE_OFFSET","SQLITE_SOURCE_ID","SQLITE_VERSION","SUBSTR","SUBSTRING","TOTAL_CHANGES","TRIM","TYPEOF","UNICODE","UNLIKELY","UPPER","ZEROBLOB","AVG","COUNT","GROUP_CONCAT","MAX","MIN","SUM","TOTAL","DATE","TIME","DATETIME","JULIANDAY","UNIXEPOCH","STRFTIME","row_number","rank","dense_rank","percent_rank","cume_dist","ntile","lag","lead","first_value","last_value","nth_value","ACOS","ACOSH","ASIN","ASINH","ATAN","ATAN2","ATANH","CEIL","CEILING","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG","LOG10","LOG2","MOD","PI","POW","POWER","RADIANS","SIN","SINH","SQRT","TAN","TANH","TRUNC","JSON","JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_ARRAY_LENGTH","JSON_EXTRACT","JSON_INSERT","JSON_OBJECT","JSON_PATCH","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_TYPE","JSON_TYPE","JSON_VALID","JSON_QUOTE","JSON_GROUP_ARRAY","JSON_GROUP_OBJECT","JSON_EACH","JSON_TREE","CAST"],keywords$5=["ABORT","ACTION","ADD","AFTER","ALL","ALTER","AND","ARE","ALWAYS","ANALYZE","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DETACH","DISTINCT","DO","DROP","EACH","ELSE","END","ESCAPE","EXCEPT","EXCLUDE","EXCLUSIVE","EXISTS","EXPLAIN","FAIL","FILTER","FIRST","FOLLOWING","FOR","FOREIGN","FROM","FULL","GENERATED","GLOB","GROUP","HAVING","IF","IGNORE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LEFT","LIKE","LIMIT","MATCH","MATERIALIZED","NATURAL","NO","NOT","NOTHING","NOTNULL","NULL","NULLS","OF","OFFSET","ON","ONLY","OPEN","OR","ORDER","OTHERS","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRECEDING","PRIMARY","QUERY","RAISE","RANGE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWS","SAVEPOINT","SELECT","SET","TABLE","TEMP","TEMPORARY","THEN","TIES","TO","TRANSACTION","TRIGGER","UNBOUNDED","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHOUT"],dataTypes$5=["ANY","ARRAY","BLOB","CHARACTER","DECIMAL","INT","INTEGER","NATIVE CHARACTER","NCHAR","NUMERIC","NVARCHAR","REAL","TEXT","VARCHAR","VARYING CHARACTER"],reservedSelect$5=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$5=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO","REPLACE INTO","VALUES","SET","RETURNING"]),standardOnelineClauses$5=expandPhrases(["CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$5=expandPhrases(["CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]","UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]","ON CONFLICT","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","RENAME TO","SET SCHEMA"]),reservedSetOperations$5=expandPhrases(["UNION [ALL]","EXCEPT","INTERSECT"]),reservedJoins$5=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),reservedKeywordPhrases$5=expandPhrases(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN","DO UPDATE"]),reservedDataTypePhrases$5=expandPhrases([]),sqlite={name:"sqlite",tokenizerOptions:{reservedSelect:reservedSelect$5,reservedClauses:[...reservedClauses$5,...standardOnelineClauses$5,...tabularOnelineClauses$5],reservedSetOperations:reservedSetOperations$5,reservedJoins:reservedJoins$5,reservedKeywordPhrases:reservedKeywordPhrases$5,reservedDataTypePhrases:reservedDataTypePhrases$5,reservedKeywords:keywords$5,reservedDataTypes:dataTypes$5,reservedFunctionNames:functions$5,stringTypes:["''-qq",{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``","[]"],paramTypes:{positional:!0,numbered:["?"],named:[":","@","$"]},operators:["%","~","&","|","<<",">>","==","->","->>","||"]},formatOptions:{onelineClauses:[...standardOnelineClauses$5,...tabularOnelineClauses$5],tabularOnelineClauses:tabularOnelineClauses$5}},functions$4=["GROUPING","RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","ROW_NUMBER","POSITION","OCCURRENCES_REGEX","POSITION_REGEX","EXTRACT","CHAR_LENGTH","CHARACTER_LENGTH","OCTET_LENGTH","CARDINALITY","ABS","MOD","LN","EXP","POWER","SQRT","FLOOR","CEIL","CEILING","WIDTH_BUCKET","SUBSTRING","SUBSTRING_REGEX","UPPER","LOWER","CONVERT","TRANSLATE","TRANSLATE_REGEX","TRIM","OVERLAY","NORMALIZE","SPECIFICTYPE","CURRENT_DATE","CURRENT_TIME","LOCALTIME","CURRENT_TIMESTAMP","LOCALTIMESTAMP","COUNT","AVG","MAX","MIN","SUM","STDDEV_POP","STDDEV_SAMP","VAR_SAMP","VAR_POP","COLLECT","FUSION","INTERSECTION","COVAR_POP","COVAR_SAMP","CORR","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","PERCENTILE_CONT","PERCENTILE_DISC","CAST","COALESCE","NULLIF","ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN"],keywords$4=["ALL","ALLOCATE","ALTER","ANY","ARE","AS","ASC","ASENSITIVE","ASYMMETRIC","AT","ATOMIC","AUTHORIZATION","BEGIN","BETWEEN","BOTH","BY","CALL","CALLED","CASCADED","CAST","CHECK","CLOSE","COALESCE","COLLATE","COLUMN","COMMIT","CONDITION","CONNECT","CONSTRAINT","CORRESPONDING","CREATE","CROSS","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DEFAULT_TRANSFORM_GROUP","CURRENT_PATH","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TRANSFORM_GROUP_FOR_TYPE","CURRENT_USER","CURSOR","CYCLE","DEALLOCATE","DAY","DECLARE","DEFAULT","DELETE","DEREF","DESC","DESCRIBE","DETERMINISTIC","DISCONNECT","DISTINCT","DROP","DYNAMIC","EACH","ELEMENT","END-EXEC","ESCAPE","EVERY","EXCEPT","EXEC","EXECUTE","EXISTS","EXTERNAL","FALSE","FETCH","FILTER","FOR","FOREIGN","FREE","FROM","FULL","FUNCTION","GET","GLOBAL","GRANT","GROUP","HAVING","HOLD","HOUR","IDENTITY","IN","INDICATOR","INNER","INOUT","INSENSITIVE","INSERT","INTERSECT","INTO","IS","LANGUAGE","LARGE","LATERAL","LEADING","LEFT","LIKE","LIKE_REGEX","LOCAL","MATCH","MEMBER","MERGE","METHOD","MINUTE","MODIFIES","MODULE","MONTH","NATURAL","NEW","NO","NONE","NOT","NULL","NULLIF","OF","OLD","ON","ONLY","OPEN","ORDER","OUT","OUTER","OVER","OVERLAPS","PARAMETER","PARTITION","PRECISION","PREPARE","PRIMARY","PROCEDURE","RANGE","READS","REAL","RECURSIVE","REF","REFERENCES","REFERENCING","RELEASE","RESULT","RETURN","RETURNS","REVOKE","RIGHT","ROLLBACK","ROLLUP","ROW","ROWS","SAVEPOINT","SCOPE","SCROLL","SEARCH","SECOND","SELECT","SENSITIVE","SESSION_USER","SET","SIMILAR","SOME","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","START","STATIC","SUBMULTISET","SYMMETRIC","SYSTEM","SYSTEM_USER","TABLE","TABLESAMPLE","THEN","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSLATION","TREAT","TRIGGER","TRUE","UESCAPE","UNION","UNIQUE","UNKNOWN","UNNEST","UPDATE","USER","USING","VALUE","VALUES","WHENEVER","WINDOW","WITHIN","WITHOUT","YEAR"],dataTypes$4=["ARRAY","BIGINT","BINARY LARGE OBJECT","BINARY VARYING","BINARY","BLOB","BOOLEAN","CHAR LARGE OBJECT","CHAR VARYING","CHAR","CHARACTER LARGE OBJECT","CHARACTER VARYING","CHARACTER","CLOB","DATE","DEC","DECIMAL","DOUBLE","FLOAT","INT","INTEGER","INTERVAL","MULTISET","NATIONAL CHAR VARYING","NATIONAL CHAR","NATIONAL CHARACTER LARGE OBJECT","NATIONAL CHARACTER VARYING","NATIONAL CHARACTER","NCHAR LARGE OBJECT","NCHAR VARYING","NCHAR","NCLOB","NUMERIC","SMALLINT","TIME","TIMESTAMP","VARBINARY","VARCHAR"],reservedSelect$4=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$4=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","SET"]),standardOnelineClauses$4=expandPhrases(["CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE"]),tabularOnelineClauses$4=expandPhrases(["CREATE [RECURSIVE] VIEW","UPDATE","WHERE CURRENT OF","DELETE FROM","DROP TABLE","ALTER TABLE","ADD COLUMN","DROP [COLUMN]","RENAME COLUMN","RENAME TO","ALTER [COLUMN]","{SET | DROP} DEFAULT","ADD SCOPE","DROP SCOPE {CASCADE | RESTRICT}","RESTART WITH","TRUNCATE TABLE","SET SCHEMA"]),reservedSetOperations$4=expandPhrases(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),reservedJoins$4=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),reservedKeywordPhrases$4=expandPhrases(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]),reservedDataTypePhrases$4=expandPhrases([]),sql={name:"sql",tokenizerOptions:{reservedSelect:reservedSelect$4,reservedClauses:[...reservedClauses$4,...standardOnelineClauses$4,...tabularOnelineClauses$4],reservedSetOperations:reservedSetOperations$4,reservedJoins:reservedJoins$4,reservedKeywordPhrases:reservedKeywordPhrases$4,reservedDataTypePhrases:reservedDataTypePhrases$4,reservedKeywords:keywords$4,reservedDataTypes:dataTypes$4,reservedFunctionNames:functions$4,stringTypes:[{quote:"''-qq-bs",prefixes:["N","U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``"],paramTypes:{positional:!0},operators:["||"]},formatOptions:{onelineClauses:[...standardOnelineClauses$4,...tabularOnelineClauses$4],tabularOnelineClauses:tabularOnelineClauses$4}},functions$3=["ABS","ACOS","ALL_MATCH","ANY_MATCH","APPROX_DISTINCT","APPROX_MOST_FREQUENT","APPROX_PERCENTILE","APPROX_SET","ARBITRARY","ARRAYS_OVERLAP","ARRAY_AGG","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_SORT","ARRAY_UNION","ASIN","ATAN","ATAN2","AT_TIMEZONE","AVG","BAR","BETA_CDF","BING_TILE","BING_TILES_AROUND","BING_TILE_AT","BING_TILE_COORDINATES","BING_TILE_POLYGON","BING_TILE_QUADKEY","BING_TILE_ZOOM_LEVEL","BITWISE_AND","BITWISE_AND_AGG","BITWISE_LEFT_SHIFT","BITWISE_NOT","BITWISE_OR","BITWISE_OR_AGG","BITWISE_RIGHT_SHIFT","BITWISE_RIGHT_SHIFT_ARITHMETIC","BITWISE_XOR","BIT_COUNT","BOOL_AND","BOOL_OR","CARDINALITY","CAST","CBRT","CEIL","CEILING","CHAR2HEXINT","CHECKSUM","CHR","CLASSIFY","COALESCE","CODEPOINT","COLOR","COMBINATIONS","CONCAT","CONCAT_WS","CONTAINS","CONTAINS_SEQUENCE","CONVEX_HULL_AGG","CORR","COS","COSH","COSINE_SIMILARITY","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CRC32","CUME_DIST","CURRENT_CATALOG","CURRENT_DATE","CURRENT_GROUPS","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","DATE","DATE_ADD","DATE_DIFF","DATE_FORMAT","DATE_PARSE","DATE_TRUNC","DAY","DAY_OF_MONTH","DAY_OF_WEEK","DAY_OF_YEAR","DEGREES","DENSE_RANK","DOW","DOY","E","ELEMENT_AT","EMPTY_APPROX_SET","EVALUATE_CLASSIFIER_PREDICTIONS","EVERY","EXP","EXTRACT","FEATURES","FILTER","FIRST_VALUE","FLATTEN","FLOOR","FORMAT","FORMAT_DATETIME","FORMAT_NUMBER","FROM_BASE","FROM_BASE32","FROM_BASE64","FROM_BASE64URL","FROM_BIG_ENDIAN_32","FROM_BIG_ENDIAN_64","FROM_ENCODED_POLYLINE","FROM_GEOJSON_GEOMETRY","FROM_HEX","FROM_IEEE754_32","FROM_IEEE754_64","FROM_ISO8601_DATE","FROM_ISO8601_TIMESTAMP","FROM_ISO8601_TIMESTAMP_NANOS","FROM_UNIXTIME","FROM_UNIXTIME_NANOS","FROM_UTF8","GEOMETRIC_MEAN","GEOMETRY_FROM_HADOOP_SHAPE","GEOMETRY_INVALID_REASON","GEOMETRY_NEAREST_POINTS","GEOMETRY_TO_BING_TILES","GEOMETRY_UNION","GEOMETRY_UNION_AGG","GREATEST","GREAT_CIRCLE_DISTANCE","HAMMING_DISTANCE","HASH_COUNTS","HISTOGRAM","HMAC_MD5","HMAC_SHA1","HMAC_SHA256","HMAC_SHA512","HOUR","HUMAN_READABLE_SECONDS","IF","INDEX","INFINITY","INTERSECTION_CARDINALITY","INVERSE_BETA_CDF","INVERSE_NORMAL_CDF","IS_FINITE","IS_INFINITE","IS_JSON_SCALAR","IS_NAN","JACCARD_INDEX","JSON_ARRAY_CONTAINS","JSON_ARRAY_GET","JSON_ARRAY_LENGTH","JSON_EXISTS","JSON_EXTRACT","JSON_EXTRACT_SCALAR","JSON_FORMAT","JSON_PARSE","JSON_QUERY","JSON_SIZE","JSON_VALUE","KURTOSIS","LAG","LAST_DAY_OF_MONTH","LAST_VALUE","LEAD","LEARN_CLASSIFIER","LEARN_LIBSVM_CLASSIFIER","LEARN_LIBSVM_REGRESSOR","LEARN_REGRESSOR","LEAST","LENGTH","LEVENSHTEIN_DISTANCE","LINE_INTERPOLATE_POINT","LINE_INTERPOLATE_POINTS","LINE_LOCATE_POINT","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","LUHN_CHECK","MAKE_SET_DIGEST","MAP","MAP_AGG","MAP_CONCAT","MAP_ENTRIES","MAP_FILTER","MAP_FROM_ENTRIES","MAP_KEYS","MAP_UNION","MAP_VALUES","MAP_ZIP_WITH","MAX","MAX_BY","MD5","MERGE","MERGE_SET_DIGEST","MILLISECOND","MIN","MINUTE","MIN_BY","MOD","MONTH","MULTIMAP_AGG","MULTIMAP_FROM_ENTRIES","MURMUR3","NAN","NGRAMS","NONE_MATCH","NORMALIZE","NORMAL_CDF","NOW","NTH_VALUE","NTILE","NULLIF","NUMERIC_HISTOGRAM","OBJECTID","OBJECTID_TIMESTAMP","PARSE_DATA_SIZE","PARSE_DATETIME","PARSE_DURATION","PERCENT_RANK","PI","POSITION","POW","POWER","QDIGEST_AGG","QUARTER","RADIANS","RAND","RANDOM","RANK","REDUCE","REDUCE_AGG","REGEXP_COUNT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGRESS","REGR_INTERCEPT","REGR_SLOPE","RENDER","REPEAT","REPLACE","REVERSE","RGB","ROUND","ROW_NUMBER","RPAD","RTRIM","SECOND","SEQUENCE","SHA1","SHA256","SHA512","SHUFFLE","SIGN","SIMPLIFY_GEOMETRY","SIN","SKEWNESS","SLICE","SOUNDEX","SPATIAL_PARTITIONING","SPATIAL_PARTITIONS","SPLIT","SPLIT_PART","SPLIT_TO_MAP","SPLIT_TO_MULTIMAP","SPOOKY_HASH_V2_32","SPOOKY_HASH_V2_64","SQRT","STARTS_WITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRPOS","ST_AREA","ST_ASBINARY","ST_ASTEXT","ST_BOUNDARY","ST_BUFFER","ST_CENTROID","ST_CONTAINS","ST_CONVEXHULL","ST_COORDDIM","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_ENDPOINT","ST_ENVELOPE","ST_ENVELOPEASPTS","ST_EQUALS","ST_EXTERIORRING","ST_GEOMETRIES","ST_GEOMETRYFROMTEXT","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMBINARY","ST_INTERIORRINGN","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISRING","ST_ISSIMPLE","ST_ISVALID","ST_LENGTH","ST_LINEFROMTEXT","ST_LINESTRING","ST_MULTIPOINT","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINT","ST_POINTN","ST_POINTS","ST_POLYGON","ST_RELATE","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_TOUCHES","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","SUBSTR","SUBSTRING","SUM","TAN","TANH","TDIGEST_AGG","TIMESTAMP_OBJECTID","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO_BASE","TO_BASE32","TO_BASE64","TO_BASE64URL","TO_BIG_ENDIAN_32","TO_BIG_ENDIAN_64","TO_CHAR","TO_DATE","TO_ENCODED_POLYLINE","TO_GEOJSON_GEOMETRY","TO_GEOMETRY","TO_HEX","TO_IEEE754_32","TO_IEEE754_64","TO_ISO8601","TO_MILLISECONDS","TO_SPHERICAL_GEOGRAPHY","TO_TIMESTAMP","TO_UNIXTIME","TO_UTF8","TRANSFORM","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRY","TRY_CAST","TYPEOF","UPPER","URL_DECODE","URL_ENCODE","URL_EXTRACT_FRAGMENT","URL_EXTRACT_HOST","URL_EXTRACT_PARAMETER","URL_EXTRACT_PATH","URL_EXTRACT_PORT","URL_EXTRACT_PROTOCOL","URL_EXTRACT_QUERY","UUID","VALUES_AT_QUANTILES","VALUE_AT_QUANTILE","VARIANCE","VAR_POP","VAR_SAMP","VERSION","WEEK","WEEK_OF_YEAR","WIDTH_BUCKET","WILSON_INTERVAL_LOWER","WILSON_INTERVAL_UPPER","WITH_TIMEZONE","WORD_STEM","XXHASH64","YEAR","YEAR_OF_WEEK","YOW","ZIP","ZIP_WITH","CLASSIFIER","FIRST","LAST","MATCH_NUMBER","NEXT","PERMUTE","PREV"],keywords$3=["ABSENT","ADD","ADMIN","AFTER","ALL","ALTER","ANALYZE","AND","ANY","AS","ASC","AT","AUTHORIZATION","BERNOULLI","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CATALOGS","COLUMN","COLUMNS","COMMENT","COMMIT","COMMITTED","CONDITIONAL","CONSTRAINT","COPARTITION","CREATE","CROSS","CUBE","CURRENT","CURRENT_PATH","CURRENT_ROLE","DATA","DEALLOCATE","DEFAULT","DEFINE","DEFINER","DELETE","DENY","DESC","DESCRIBE","DESCRIPTOR","DISTINCT","DISTRIBUTED","DOUBLE","DROP","ELSE","EMPTY","ENCODING","END","ERROR","ESCAPE","EXCEPT","EXCLUDING","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FINAL","FIRST","FOLLOWING","FOR","FROM","FULL","FUNCTIONS","GRANT","GRANTED","GRANTS","GRAPHVIZ","GROUP","GROUPING","GROUPS","HAVING","IGNORE","IN","INCLUDING","INITIAL","INNER","INPUT","INSERT","INTERSECT","INTERVAL","INTO","INVOKER","IO","IS","ISOLATION","JOIN","JSON","JSON_ARRAY","JSON_OBJECT","KEEP","KEY","KEYS","LAST","LATERAL","LEADING","LEFT","LEVEL","LIKE","LIMIT","LOCAL","LOGICAL","MATCH","MATCHED","MATCHES","MATCH_RECOGNIZE","MATERIALIZED","MEASURES","NATURAL","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NOT","NULL","NULLS","OBJECT","OF","OFFSET","OMIT","ON","ONE","ONLY","OPTION","OR","ORDER","ORDINALITY","OUTER","OUTPUT","OVER","OVERFLOW","PARTITION","PARTITIONS","PASSING","PAST","PATH","PATTERN","PER","PERMUTE","PRECEDING","PRECISION","PREPARE","PRIVILEGES","PROPERTIES","PRUNE","QUOTES","RANGE","READ","RECURSIVE","REFRESH","RENAME","REPEATABLE","RESET","RESPECT","RESTRICT","RETURNING","REVOKE","RIGHT","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","RUNNING","SCALAR","SCHEMA","SCHEMAS","SECURITY","SEEK","SELECT","SERIALIZABLE","SESSION","SET","SETS","SHOW","SKIP","SOME","START","STATS","STRING","SUBSET","SYSTEM","TABLE","TABLES","TABLESAMPLE","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRUE","TYPE","UESCAPE","UNBOUNDED","UNCOMMITTED","UNCONDITIONAL","UNION","UNIQUE","UNKNOWN","UNMATCHED","UNNEST","UPDATE","USE","USER","USING","UTF16","UTF32","UTF8","VALIDATE","VALUE","VALUES","VERBOSE","VIEW","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","ZONE"],dataTypes$3=["BIGINT","INT","INTEGER","SMALLINT","TINYINT","BOOLEAN","DATE","DECIMAL","REAL","DOUBLE","HYPERLOGLOG","QDIGEST","TDIGEST","P4HYPERLOGLOG","INTERVAL","TIMESTAMP","TIME","VARBINARY","VARCHAR","CHAR","ROW","ARRAY","MAP","JSON","JSON2016","IPADDRESS","GEOMETRY","UUID","SETDIGEST","JONIREGEXP","RE2JREGEXP","LIKEPATTERN","COLOR","CODEPOINTS","FUNCTION","JSONPATH"],reservedSelect$3=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$3=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","SET","MATCH_RECOGNIZE","MEASURES","ONE ROW PER MATCH","ALL ROWS PER MATCH","AFTER MATCH","PATTERN","SUBSET","DEFINE"]),standardOnelineClauses$3=expandPhrases(["CREATE TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$3=expandPhrases(["CREATE [OR REPLACE] [MATERIALIZED] VIEW","UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME COLUMN [IF EXISTS]","RENAME TO","SET AUTHORIZATION [USER | ROLE]","SET PROPERTIES","EXECUTE","TRUNCATE TABLE","ALTER SCHEMA","ALTER MATERIALIZED VIEW","ALTER VIEW","CREATE SCHEMA","CREATE ROLE","DROP SCHEMA","DROP MATERIALIZED VIEW","DROP VIEW","DROP ROLE","EXPLAIN","ANALYZE","EXPLAIN ANALYZE","EXPLAIN ANALYZE VERBOSE","USE","DESCRIBE INPUT","DESCRIBE OUTPUT","REFRESH MATERIALIZED VIEW","RESET SESSION","SET SESSION","SET PATH","SET TIME ZONE","SHOW GRANTS","SHOW CREATE TABLE","SHOW CREATE SCHEMA","SHOW CREATE VIEW","SHOW CREATE MATERIALIZED VIEW","SHOW TABLES","SHOW SCHEMAS","SHOW CATALOGS","SHOW COLUMNS","SHOW STATS FOR","SHOW ROLES","SHOW CURRENT ROLES","SHOW ROLE GRANTS","SHOW FUNCTIONS","SHOW SESSION"]),reservedSetOperations$3=expandPhrases(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),reservedJoins$3=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),reservedKeywordPhrases$3=expandPhrases(["{ROWS | RANGE | GROUPS} BETWEEN","IS [NOT] DISTINCT FROM"]),reservedDataTypePhrases$3=expandPhrases([]),trino={name:"trino",tokenizerOptions:{reservedSelect:reservedSelect$3,reservedClauses:[...reservedClauses$3,...standardOnelineClauses$3,...tabularOnelineClauses$3],reservedSetOperations:reservedSetOperations$3,reservedJoins:reservedJoins$3,reservedKeywordPhrases:reservedKeywordPhrases$3,reservedDataTypePhrases:reservedDataTypePhrases$3,reservedKeywords:keywords$3,reservedDataTypes:dataTypes$3,reservedFunctionNames:functions$3,extraParens:["[]","{}"],stringTypes:[{quote:"''-qq",prefixes:["U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq'],paramTypes:{positional:!0},operators:["%","->","=>",":","||","|","^","$"]},formatOptions:{onelineClauses:[...standardOnelineClauses$3,...tabularOnelineClauses$3],tabularOnelineClauses:tabularOnelineClauses$3}},functions$2=["APPROX_COUNT_DISTINCT","AVG","CHECKSUM_AGG","COUNT","COUNT_BIG","GROUPING","GROUPING_ID","MAX","MIN","STDEV","STDEVP","SUM","VAR","VARP","CUME_DIST","FIRST_VALUE","LAG","LAST_VALUE","LEAD","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","Collation - COLLATIONPROPERTY","Collation - TERTIARY_WEIGHTS","@@DBTS","@@LANGID","@@LANGUAGE","@@LOCK_TIMEOUT","@@MAX_CONNECTIONS","@@MAX_PRECISION","@@NESTLEVEL","@@OPTIONS","@@REMSERVER","@@SERVERNAME","@@SERVICENAME","@@SPID","@@TEXTSIZE","@@VERSION","CAST","CONVERT","PARSE","TRY_CAST","TRY_CONVERT","TRY_PARSE","ASYMKEY_ID","ASYMKEYPROPERTY","CERTPROPERTY","CERT_ID","CRYPT_GEN_RANDOM","DECRYPTBYASYMKEY","DECRYPTBYCERT","DECRYPTBYKEY","DECRYPTBYKEYAUTOASYMKEY","DECRYPTBYKEYAUTOCERT","DECRYPTBYPASSPHRASE","ENCRYPTBYASYMKEY","ENCRYPTBYCERT","ENCRYPTBYKEY","ENCRYPTBYPASSPHRASE","HASHBYTES","IS_OBJECTSIGNED","KEY_GUID","KEY_ID","KEY_NAME","SIGNBYASYMKEY","SIGNBYCERT","SYMKEYPROPERTY","VERIFYSIGNEDBYCERT","VERIFYSIGNEDBYASYMKEY","@@CURSOR_ROWS","@@FETCH_STATUS","CURSOR_STATUS","DATALENGTH","IDENT_CURRENT","IDENT_INCR","IDENT_SEED","IDENTITY","SQL_VARIANT_PROPERTY","@@DATEFIRST","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_TIMEZONE_ID","DATEADD","DATEDIFF","DATEDIFF_BIG","DATEFROMPARTS","DATENAME","DATEPART","DATETIME2FROMPARTS","DATETIMEFROMPARTS","DATETIMEOFFSETFROMPARTS","DAY","EOMONTH","GETDATE","GETUTCDATE","ISDATE","MONTH","SMALLDATETIMEFROMPARTS","SWITCHOFFSET","SYSDATETIME","SYSDATETIMEOFFSET","SYSUTCDATETIME","TIMEFROMPARTS","TODATETIMEOFFSET","YEAR","JSON","ISJSON","JSON_VALUE","JSON_QUERY","JSON_MODIFY","ABS","ACOS","ASIN","ATAN","ATN2","CEILING","COS","COT","DEGREES","EXP","FLOOR","LOG","LOG10","PI","POWER","RADIANS","RAND","ROUND","SIGN","SIN","SQRT","SQUARE","TAN","CHOOSE","GREATEST","IIF","LEAST","@@PROCID","APP_NAME","APPLOCK_MODE","APPLOCK_TEST","ASSEMBLYPROPERTY","COL_LENGTH","COL_NAME","COLUMNPROPERTY","DATABASEPROPERTYEX","DB_ID","DB_NAME","FILE_ID","FILE_IDEX","FILE_NAME","FILEGROUP_ID","FILEGROUP_NAME","FILEGROUPPROPERTY","FILEPROPERTY","FILEPROPERTYEX","FULLTEXTCATALOGPROPERTY","FULLTEXTSERVICEPROPERTY","INDEX_COL","INDEXKEY_PROPERTY","INDEXPROPERTY","NEXT VALUE FOR","OBJECT_DEFINITION","OBJECT_ID","OBJECT_NAME","OBJECT_SCHEMA_NAME","OBJECTPROPERTY","OBJECTPROPERTYEX","ORIGINAL_DB_NAME","PARSENAME","SCHEMA_ID","SCHEMA_NAME","SCOPE_IDENTITY","SERVERPROPERTY","STATS_DATE","TYPE_ID","TYPE_NAME","TYPEPROPERTY","DENSE_RANK","NTILE","RANK","ROW_NUMBER","PUBLISHINGSERVERNAME","CERTENCODED","CERTPRIVATEKEY","CURRENT_USER","DATABASE_PRINCIPAL_ID","HAS_DBACCESS","HAS_PERMS_BY_NAME","IS_MEMBER","IS_ROLEMEMBER","IS_SRVROLEMEMBER","LOGINPROPERTY","ORIGINAL_LOGIN","PERMISSIONS","PWDENCRYPT","PWDCOMPARE","SESSION_USER","SESSIONPROPERTY","SUSER_ID","SUSER_NAME","SUSER_SID","SUSER_SNAME","SYSTEM_USER","USER","USER_ID","USER_NAME","ASCII","CHARINDEX","CONCAT","CONCAT_WS","DIFFERENCE","FORMAT","LEFT","LEN","LOWER","LTRIM","PATINDEX","QUOTENAME","REPLACE","REPLICATE","REVERSE","RIGHT","RTRIM","SOUNDEX","SPACE","STR","STRING_AGG","STRING_ESCAPE","STUFF","SUBSTRING","TRANSLATE","TRIM","UNICODE","UPPER","$PARTITION","@@ERROR","@@IDENTITY","@@PACK_RECEIVED","@@ROWCOUNT","@@TRANCOUNT","BINARY_CHECKSUM","CHECKSUM","COMPRESS","CONNECTIONPROPERTY","CONTEXT_INFO","CURRENT_REQUEST_ID","CURRENT_TRANSACTION_ID","DECOMPRESS","ERROR_LINE","ERROR_MESSAGE","ERROR_NUMBER","ERROR_PROCEDURE","ERROR_SEVERITY","ERROR_STATE","FORMATMESSAGE","GET_FILESTREAM_TRANSACTION_CONTEXT","GETANSINULL","HOST_ID","HOST_NAME","ISNULL","ISNUMERIC","MIN_ACTIVE_ROWVERSION","NEWID","NEWSEQUENTIALID","ROWCOUNT_BIG","SESSION_CONTEXT","XACT_STATE","@@CONNECTIONS","@@CPU_BUSY","@@IDLE","@@IO_BUSY","@@PACK_SENT","@@PACKET_ERRORS","@@TIMETICKS","@@TOTAL_ERRORS","@@TOTAL_READ","@@TOTAL_WRITE","TEXTPTR","TEXTVALID","COLUMNS_UPDATED","EVENTDATA","TRIGGER_NESTLEVEL","UPDATE","COALESCE","NULLIF"],keywords$2=["ADD","ALL","ALTER","AND","ANY","AS","ASC","AUTHORIZATION","BACKUP","BEGIN","BETWEEN","BREAK","BROWSE","BULK","BY","CASCADE","CHECK","CHECKPOINT","CLOSE","CLUSTERED","COALESCE","COLLATE","COLUMN","COMMIT","COMPUTE","CONSTRAINT","CONTAINS","CONTAINSTABLE","CONTINUE","CONVERT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DBCC","DEALLOCATE","DECLARE","DEFAULT","DELETE","DENY","DESC","DISK","DISTINCT","DISTRIBUTED","DROP","DUMP","ERRLVL","ESCAPE","EXEC","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FILE","FILLFACTOR","FOR","FOREIGN","FREETEXT","FREETEXTTABLE","FROM","FULL","FUNCTION","GOTO","GRANT","GROUP","HAVING","HOLDLOCK","IDENTITY","IDENTITYCOL","IDENTITY_INSERT","IF","IN","INDEX","INNER","INSERT","INTERSECT","INTO","IS","JOIN","KEY","KILL","LEFT","LIKE","LINENO","LOAD","MERGE","NOCHECK","NONCLUSTERED","NOT","NULL","NULLIF","OF","OFF","OFFSETS","ON","OPEN","OPENDATASOURCE","OPENQUERY","OPENROWSET","OPENXML","OPTION","OR","ORDER","OUTER","OVER","PERCENT","PIVOT","PLAN","PRIMARY","PRINT","PROC","PROCEDURE","PUBLIC","RAISERROR","READ","READTEXT","RECONFIGURE","REFERENCES","REPLICATION","RESTORE","RESTRICT","RETURN","REVERT","REVOKE","RIGHT","ROLLBACK","ROWCOUNT","ROWGUIDCOL","RULE","SAVE","SCHEMA","SECURITYAUDIT","SELECT","SEMANTICKEYPHRASETABLE","SEMANTICSIMILARITYDETAILSTABLE","SEMANTICSIMILARITYTABLE","SESSION_USER","SET","SETUSER","SHUTDOWN","SOME","STATISTICS","SYSTEM_USER","TABLE","TABLESAMPLE","TEXTSIZE","THEN","TO","TOP","TRAN","TRANSACTION","TRIGGER","TRUNCATE","TRY_CONVERT","TSEQUAL","UNION","UNIQUE","UNPIVOT","UPDATE","UPDATETEXT","USE","USER","VALUES","VIEW","WAITFOR","WHERE","WHILE","WITH","WITHIN GROUP","WRITETEXT","$ACTION"],dataTypes$2=["BINARY","BIT","CHAR","CHAR","CHARACTER","DATE","DATETIME2","DATETIMEOFFSET","DEC","DECIMAL","DOUBLE","FLOAT","INT","INTEGER","NATIONAL","NCHAR","NUMERIC","NVARCHAR","PRECISION","REAL","SMALLINT","TIME","TIMESTAMP","VARBINARY","VARCHAR"],reservedSelect$2=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses$2=expandPhrases(["WITH","INTO","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","OFFSET","FETCH {FIRST | NEXT}","FOR {BROWSE | XML | JSON}","OPTION","INSERT [INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]","UPDATE SET"]),standardOnelineClauses$2=expandPhrases(["CREATE TABLE"]),tabularOnelineClauses$2=expandPhrases(["CREATE [OR ALTER] [MATERIALIZED] VIEW","UPDATE","WHERE CURRENT OF","DELETE [FROM]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD","DROP COLUMN [IF EXISTS]","ALTER COLUMN","TRUNCATE TABLE","CREATE [UNIQUE] [CLUSTERED] INDEX","CREATE DATABASE","ALTER DATABASE","DROP DATABASE [IF EXISTS]","CREATE [OR ALTER] [PARTITION] {FUNCTION | PROCEDURE | PROC}","ALTER [PARTITION] {FUNCTION | PROCEDURE | PROC}","DROP [PARTITION] {FUNCTION | PROCEDURE | PROC} [IF EXISTS]","GO","USE","ADD SENSITIVITY CLASSIFICATION","ADD SIGNATURE","AGGREGATE","ANSI_DEFAULTS","ANSI_NULLS","ANSI_NULL_DFLT_OFF","ANSI_NULL_DFLT_ON","ANSI_PADDING","ANSI_WARNINGS","APPLICATION ROLE","ARITHABORT","ARITHIGNORE","ASSEMBLY","ASYMMETRIC KEY","AUTHORIZATION","AVAILABILITY GROUP","BACKUP","BACKUP CERTIFICATE","BACKUP MASTER KEY","BACKUP SERVICE MASTER KEY","BEGIN CONVERSATION TIMER","BEGIN DIALOG CONVERSATION","BROKER PRIORITY","BULK INSERT","CERTIFICATE","CLOSE MASTER KEY","CLOSE SYMMETRIC KEY","COLUMN ENCRYPTION KEY","COLUMN MASTER KEY","COLUMNSTORE INDEX","CONCAT_NULL_YIELDS_NULL","CONTEXT_INFO","CONTRACT","CREDENTIAL","CRYPTOGRAPHIC PROVIDER","CURSOR_CLOSE_ON_COMMIT","DATABASE","DATABASE AUDIT SPECIFICATION","DATABASE ENCRYPTION KEY","DATABASE HADR","DATABASE SCOPED CONFIGURATION","DATABASE SCOPED CREDENTIAL","DATABASE SET","DATEFIRST","DATEFORMAT","DEADLOCK_PRIORITY","DENY","DENY XML","DISABLE TRIGGER","ENABLE TRIGGER","END CONVERSATION","ENDPOINT","EVENT NOTIFICATION","EVENT SESSION","EXECUTE AS","EXTERNAL DATA SOURCE","EXTERNAL FILE FORMAT","EXTERNAL LANGUAGE","EXTERNAL LIBRARY","EXTERNAL RESOURCE POOL","EXTERNAL TABLE","FIPS_FLAGGER","FMTONLY","FORCEPLAN","FULLTEXT CATALOG","FULLTEXT INDEX","FULLTEXT STOPLIST","GET CONVERSATION GROUP","GET_TRANSMISSION_STATUS","GRANT","GRANT XML","IDENTITY_INSERT","IMPLICIT_TRANSACTIONS","INDEX","LANGUAGE","LOCK_TIMEOUT","LOGIN","MASTER KEY","MESSAGE TYPE","MOVE CONVERSATION","NOCOUNT","NOEXEC","NUMERIC_ROUNDABORT","OFFSETS","OPEN MASTER KEY","OPEN SYMMETRIC KEY","PARSEONLY","PARTITION SCHEME","QUERY_GOVERNOR_COST_LIMIT","QUEUE","QUOTED_IDENTIFIER","RECEIVE","REMOTE SERVICE BINDING","REMOTE_PROC_TRANSACTIONS","RESOURCE GOVERNOR","RESOURCE POOL","RESTORE","RESTORE FILELISTONLY","RESTORE HEADERONLY","RESTORE LABELONLY","RESTORE MASTER KEY","RESTORE REWINDONLY","RESTORE SERVICE MASTER KEY","RESTORE VERIFYONLY","REVERT","REVOKE","REVOKE XML","ROLE","ROUTE","ROWCOUNT","RULE","SCHEMA","SEARCH PROPERTY LIST","SECURITY POLICY","SELECTIVE XML INDEX","SEND","SENSITIVITY CLASSIFICATION","SEQUENCE","SERVER AUDIT","SERVER AUDIT SPECIFICATION","SERVER CONFIGURATION","SERVER ROLE","SERVICE","SERVICE MASTER KEY","SETUSER","SHOWPLAN_ALL","SHOWPLAN_TEXT","SHOWPLAN_XML","SIGNATURE","SPATIAL INDEX","STATISTICS","STATISTICS IO","STATISTICS PROFILE","STATISTICS TIME","STATISTICS XML","SYMMETRIC KEY","SYNONYM","TABLE","TABLE IDENTITY","TEXTSIZE","TRANSACTION ISOLATION LEVEL","TRIGGER","TYPE","UPDATE STATISTICS","USER","WORKLOAD GROUP","XACT_ABORT","XML INDEX","XML SCHEMA COLLECTION"]),reservedSetOperations$2=expandPhrases(["UNION [ALL]","EXCEPT","INTERSECT"]),reservedJoins$2=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","{CROSS | OUTER} APPLY"]),reservedKeywordPhrases$2=expandPhrases(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]),reservedDataTypePhrases$2=expandPhrases([]),transactsql={name:"transactsql",tokenizerOptions:{reservedSelect:reservedSelect$2,reservedClauses:[...reservedClauses$2,...standardOnelineClauses$2,...tabularOnelineClauses$2],reservedSetOperations:reservedSetOperations$2,reservedJoins:reservedJoins$2,reservedKeywordPhrases:reservedKeywordPhrases$2,reservedDataTypePhrases:reservedDataTypePhrases$2,reservedKeywords:keywords$2,reservedDataTypes:dataTypes$2,reservedFunctionNames:functions$2,nestedBlockComments:!0,stringTypes:[{quote:"''-qq",prefixes:["N"]},"{}"],identTypes:['""-qq',"[]"],identChars:{first:"#@",rest:"#@$"},paramTypes:{named:["@"],quoted:["@"]},operators:["%","&","|","^","~","!<","!>","+=","-=","*=","/=","%=","|=","&=","^=","::",":"],propertyAccessOperators:[".."]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:[...standardOnelineClauses$2,...tabularOnelineClauses$2],tabularOnelineClauses:tabularOnelineClauses$2}},keywords$1=["ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","_BINARY","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DECLARE","DEFAULT","DELAYED","DELETE","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DROP","DUAL","EACH","ELSE","ELSEIF","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","EXTRA_JOIN","FALSE","FETCH","FOR","FORCE","FORCE_COMPILED_MODE","FORCE_INTERPRETER_MODE","FOREIGN","FROM","FULL","FULLTEXT","GRANT","GROUP","HAVING","HEARTBEAT_NO_LOGGING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","IN","_INTERNAL_DYNAMIC_TYPECAST","INTERSECT","INTERVAL","INTO","ITERATE","JOIN","KEY","KEYS","KILL","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LOOP","LOW_PRIORITY","MATCH","MAXVALUE","MINUS","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NO_QUERY_REWRITE","NOT","NO_WRITE_TO_BINLOG","NO_QUERY_REWRITE","NULL","ON","OPTIMIZE","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PRIMARY","PROCEDURE","PURGE","RANGE","READ","READS","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESTRICT","RETURN","REVOKE","RIGHT","RIGHT_ANTI_JOIN","RIGHT_SEMI_JOIN","RIGHT_STRAIGHT_JOIN","RLIKE","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SEMI_JOIN","SENSITIVE","SEPARATOR","SET","SHOW","SIGNAL","SPATIAL","SPECIFIC","SQL","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQLEXCEPTION","SQL_NO_CACHE","SQL_NO_LOGGING","SQL_SMALL_RESULT","SQLSTATE","SQLWARNING","STRAIGHT_JOIN","TABLE","TERMINATED","THEN","TO","TRAILING","TRIGGER","TRUE","UNBOUNDED","UNDO","UNION","UNIQUE","UNLOCK","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","_UTF8","VALUES","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WRITE","XOR","YEAR_MONTH","ZEROFILL"],dataTypes$1=["BIGINT","BINARY","BIT","BLOB","CHAR","CHARACTER","DATETIME","DEC","DECIMAL","DOUBLE PRECISION","DOUBLE","ENUM","FIXED","FLOAT","FLOAT4","FLOAT8","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","LONG","LONGBLOB","LONGTEXT","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","NATIONAL CHAR","NATIONAL VARCHAR","NUMERIC","PRECISION","REAL","SMALLINT","TEXT","TIME","TIMESTAMP","TINYBLOB","TINYINT","TINYTEXT","UNSIGNED","VARBINARY","VARCHAR","VARCHARACTER","YEAR"],functions$1=["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_COUNT_DISTINCT_ACCUMULATE","APPROX_COUNT_DISTINCT_COMBINE","APPROX_COUNT_DISTINCT_ESTIMATE","APPROX_GEOGRAPHY_INTERSECTS","APPROX_PERCENTILE","ASCII","ASIN","ATAN","ATAN2","AVG","BIN","BINARY","BIT_AND","BIT_COUNT","BIT_OR","BIT_XOR","CAST","CEIL","CEILING","CHAR","CHARACTER_LENGTH","CHAR_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COLLECT","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATEDIFF","DATE_FORMAT","DATE_SUB","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECODE","DEFAULT","DEGREES","DENSE_RANK","DIV","DOT_PRODUCT","ELT","EUCLIDEAN_DISTANCE","EXP","EXTRACT","FIELD","FIRST","FIRST_VALUE","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOGRAPHY_AREA","GEOGRAPHY_CONTAINS","GEOGRAPHY_DISTANCE","GEOGRAPHY_INTERSECTS","GEOGRAPHY_LATITUDE","GEOGRAPHY_LENGTH","GEOGRAPHY_LONGITUDE","GEOGRAPHY_POINT","GEOGRAPHY_WITHIN_DISTANCE","GEOMETRY_AREA","GEOMETRY_CONTAINS","GEOMETRY_DISTANCE","GEOMETRY_FILTER","GEOMETRY_INTERSECTS","GEOMETRY_LENGTH","GEOMETRY_POINT","GEOMETRY_WITHIN_DISTANCE","GEOMETRY_X","GEOMETRY_Y","GREATEST","GROUPING","GROUP_CONCAT","HEX","HIGHLIGHT","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INITCAP","INSERT","INSTR","INTERVAL","IS","IS NULL","JSON_AGG","JSON_ARRAY_CONTAINS_DOUBLE","JSON_ARRAY_CONTAINS_JSON","JSON_ARRAY_CONTAINS_STRING","JSON_ARRAY_PUSH_DOUBLE","JSON_ARRAY_PUSH_JSON","JSON_ARRAY_PUSH_STRING","JSON_DELETE_KEY","JSON_EXTRACT_DOUBLE","JSON_EXTRACT_JSON","JSON_EXTRACT_STRING","JSON_EXTRACT_BIGINT","JSON_GET_TYPE","JSON_LENGTH","JSON_SET_DOUBLE","JSON_SET_JSON","JSON_SET_STRING","JSON_SPLICE_DOUBLE","JSON_SPLICE_JSON","JSON_SPLICE_STRING","LAG","LAST_DAY","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LN","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LPAD","LTRIM","MATCH","MAX","MD5","MEDIAN","MICROSECOND","MIN","MINUTE","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","NOT","NOW","NTH_VALUE","NTILE","NULLIF","OCTET_LENGTH","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIVOT","POSITION","POW","POWER","QUARTER","QUOTE","RADIANS","RAND","RANK","REGEXP","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCALAR","SCHEMA","SEC_TO_TIME","SHA1","SHA2","SIGMOID","SIGN","SIN","SLEEP","SPLIT","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUM","SYS_GUID","TAN","TIME","TIMEDIFF","TIME_BUCKET","TIME_FORMAT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_JSON","TO_NUMBER","TO_SECONDS","TO_TIMESTAMP","TRIM","TRUNC","TRUNCATE","UCASE","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","VALUES","VARIANCE","VAR_POP","VAR_SAMP","VECTOR_SUB","VERSION","WEEK","WEEKDAY","WEEKOFYEAR","YEAR"],reservedSelect$1=expandPhrases(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),reservedClauses$1=expandPhrases(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [IGNORE] [INTO]","VALUES","REPLACE [INTO]","ON DUPLICATE KEY UPDATE","SET","CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] [EXTERNAL] FUNCTION"]),standardOnelineClauses$1=expandPhrases(["CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]"]),tabularOnelineClauses$1=expandPhrases(["CREATE VIEW","UPDATE","DELETE [FROM]","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] TABLE","ADD [COLUMN]","ADD [UNIQUE] {INDEX | KEY}","DROP [COLUMN]","MODIFY [COLUMN]","CHANGE","RENAME [TO | AS]","TRUNCATE [TABLE]","ADD AGGREGATOR","ADD LEAF","AGGREGATOR SET AS MASTER","ALTER DATABASE","ALTER PIPELINE","ALTER RESOURCE POOL","ALTER USER","ALTER VIEW","ANALYZE TABLE","ATTACH DATABASE","ATTACH LEAF","ATTACH LEAF ALL","BACKUP DATABASE","BINLOG","BOOTSTRAP AGGREGATOR","CACHE INDEX","CALL","CHANGE","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK BLOB CHECKSUM","CHECK TABLE","CHECKSUM TABLE","CLEAR ORPHAN DATABASES","CLONE","COMMIT","CREATE DATABASE","CREATE GROUP","CREATE INDEX","CREATE LINK","CREATE MILESTONE","CREATE PIPELINE","CREATE RESOURCE POOL","CREATE ROLE","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DETACH DATABASE","DETACH PIPELINE","DROP DATABASE","DROP FUNCTION","DROP INDEX","DROP LINK","DROP PIPELINE","DROP PROCEDURE","DROP RESOURCE POOL","DROP ROLE","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","FORCE","GRANT","HANDLER","HELP","KILL CONNECTION","KILLALL QUERIES","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","REBALANCE PARTITIONS","RELEASE SAVEPOINT","REMOVE AGGREGATOR","REMOVE LEAF","REPAIR TABLE","REPLACE","REPLICATE DATABASE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","RESTORE DATABASE","RESTORE REDUNDANCY","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE FUNCTION","SHOW CREATE PIPELINE","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SNAPSHOT DATABASE","SOURCE_POS_WAIT","START GROUP_REPLICATION","START PIPELINE","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP PIPELINE","STOP REPLICA","STOP REPLICATING","STOP SLAVE","TEST PIPELINE","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),reservedSetOperations$1=expandPhrases(["UNION [ALL | DISTINCT]","EXCEPT","INTERSECT","MINUS"]),reservedJoins$1=expandPhrases(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),reservedKeywordPhrases$1=expandPhrases(["ON DELETE","ON UPDATE","CHARACTER SET","{ROWS | RANGE} BETWEEN","IDENTIFIED BY"]),reservedDataTypePhrases$1=expandPhrases([]),singlestoredb={name:"singlestoredb",tokenizerOptions:{reservedSelect:reservedSelect$1,reservedClauses:[...reservedClauses$1,...standardOnelineClauses$1,...tabularOnelineClauses$1],reservedSetOperations:reservedSetOperations$1,reservedJoins:reservedJoins$1,reservedKeywordPhrases:reservedKeywordPhrases$1,reservedDataTypePhrases:reservedDataTypePhrases$1,reservedKeywords:keywords$1,reservedDataTypes:dataTypes$1,reservedFunctionNames:functions$1,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_$]+"},{quote:"``",prefixes:["@"],requirePrefix:!0}],lineCommentTypes:["--","#"],operators:[":=","&","|","^","~","<<",">>","<=>","&&","||","::","::$","::%",":>","!:>","*.*"],postProcess:postProcess$2},formatOptions:{alwaysDenseOperators:["::","::$","::%"],onelineClauses:[...standardOnelineClauses$1,...tabularOnelineClauses$1],tabularOnelineClauses:tabularOnelineClauses$1}},functions=["ABS","ACOS","ACOSH","ADD_MONTHS","ALL_USER_NAMES","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","APPROX_PERCENTILE_ACCUMULATE","APPROX_PERCENTILE_COMBINE","APPROX_PERCENTILE_ESTIMATE","APPROX_TOP_K","APPROX_TOP_K_ACCUMULATE","APPROX_TOP_K_COMBINE","APPROX_TOP_K_ESTIMATE","APPROXIMATE_JACCARD_INDEX","APPROXIMATE_SIMILARITY","ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_COMPACT","ARRAY_CONSTRUCT","ARRAY_CONSTRUCT_COMPACT","ARRAY_CONTAINS","ARRAY_INSERT","ARRAY_INTERSECTION","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_SIZE","ARRAY_SLICE","ARRAY_TO_STRING","ARRAY_UNION_AGG","ARRAY_UNIQUE_AGG","ARRAYS_OVERLAP","AS_ARRAY","AS_BINARY","AS_BOOLEAN","AS_CHAR","AS_VARCHAR","AS_DATE","AS_DECIMAL","AS_NUMBER","AS_DOUBLE","AS_REAL","AS_INTEGER","AS_OBJECT","AS_TIME","AS_TIMESTAMP_LTZ","AS_TIMESTAMP_NTZ","AS_TIMESTAMP_TZ","ASCII","ASIN","ASINH","ATAN","ATAN2","ATANH","AUTO_REFRESH_REGISTRATION_HISTORY","AUTOMATIC_CLUSTERING_HISTORY","AVG","BASE64_DECODE_BINARY","BASE64_DECODE_STRING","BASE64_ENCODE","BIT_LENGTH","BITAND","BITAND_AGG","BITMAP_BIT_POSITION","BITMAP_BUCKET_NUMBER","BITMAP_CONSTRUCT_AGG","BITMAP_COUNT","BITMAP_OR_AGG","BITNOT","BITOR","BITOR_AGG","BITSHIFTLEFT","BITSHIFTRIGHT","BITXOR","BITXOR_AGG","BOOLAND","BOOLAND_AGG","BOOLNOT","BOOLOR","BOOLOR_AGG","BOOLXOR","BOOLXOR_AGG","BUILD_SCOPED_FILE_URL","BUILD_STAGE_FILE_URL","CASE","CAST","CBRT","CEIL","CHARINDEX","CHECK_JSON","CHECK_XML","CHR","CHAR","COALESCE","COLLATE","COLLATION","COMPLETE_TASK_GRAPHS","COMPRESS","CONCAT","CONCAT_WS","CONDITIONAL_CHANGE_EVENT","CONDITIONAL_TRUE_EVENT","CONTAINS","CONVERT_TIMEZONE","COPY_HISTORY","CORR","COS","COSH","COT","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CUME_DIST","CURRENT_ACCOUNT","CURRENT_AVAILABLE_ROLES","CURRENT_CLIENT","CURRENT_DATABASE","CURRENT_DATE","CURRENT_IP_ADDRESS","CURRENT_REGION","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_SECONDARY_ROLES","CURRENT_SESSION","CURRENT_STATEMENT","CURRENT_TASK_GRAPHS","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TRANSACTION","CURRENT_USER","CURRENT_VERSION","CURRENT_WAREHOUSE","DATA_TRANSFER_HISTORY","DATABASE_REFRESH_HISTORY","DATABASE_REFRESH_PROGRESS","DATABASE_REFRESH_PROGRESS_BY_JOB","DATABASE_STORAGE_USAGE_HISTORY","DATE_FROM_PARTS","DATE_PART","DATE_TRUNC","DATEADD","DATEDIFF","DAYNAME","DECODE","DECOMPRESS_BINARY","DECOMPRESS_STRING","DECRYPT","DECRYPT_RAW","DEGREES","DENSE_RANK","DIV0","EDITDISTANCE","ENCRYPT","ENCRYPT_RAW","ENDSWITH","EQUAL_NULL","EXP","EXPLAIN_JSON","EXTERNAL_FUNCTIONS_HISTORY","EXTERNAL_TABLE_FILES","EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY","EXTRACT","EXTRACT_SEMANTIC_CATEGORIES","FACTORIAL","FILTER","FIRST_VALUE","FLATTEN","FLOOR","GENERATE_COLUMN_DESCRIPTION","GENERATOR","GET","GET_ABSOLUTE_PATH","GET_DDL","GET_IGNORE_CASE","GET_OBJECT_REFERENCES","GET_PATH","GET_PRESIGNED_URL","GET_RELATIVE_PATH","GET_STAGE_LOCATION","GETBIT","GREATEST","GREATEST_IGNORE_NULLS","GROUPING","GROUPING_ID","HASH","HASH_AGG","HAVERSINE","HEX_DECODE_BINARY","HEX_DECODE_STRING","HEX_ENCODE","HLL","HLL_ACCUMULATE","HLL_COMBINE","HLL_ESTIMATE","HLL_EXPORT","HLL_IMPORT","HOUR","MINUTE","SECOND","IDENTIFIER","IFF","IFNULL","ILIKE","ILIKE ANY","INFER_SCHEMA","INITCAP","INSERT","INVOKER_ROLE","INVOKER_SHARE","IS_ARRAY","IS_BINARY","IS_BOOLEAN","IS_CHAR","IS_VARCHAR","IS_DATE","IS_DATE_VALUE","IS_DECIMAL","IS_DOUBLE","IS_REAL","IS_GRANTED_TO_INVOKER_ROLE","IS_INTEGER","IS_NULL_VALUE","IS_OBJECT","IS_ROLE_IN_SESSION","IS_TIME","IS_TIMESTAMP_LTZ","IS_TIMESTAMP_NTZ","IS_TIMESTAMP_TZ","JAROWINKLER_SIMILARITY","JSON_EXTRACT_PATH_TEXT","KURTOSIS","LAG","LAST_DAY","LAST_QUERY_ID","LAST_TRANSACTION","LAST_VALUE","LEAD","LEAST","LEFT","LENGTH","LEN","LIKE","LIKE ALL","LIKE ANY","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOGIN_HISTORY","LOGIN_HISTORY_BY_USER","LOWER","LPAD","LTRIM","MATERIALIZED_VIEW_REFRESH_HISTORY","MD5","MD5_HEX","MD5_BINARY","MD5_NUMBER — Obsoleted","MD5_NUMBER_LOWER64","MD5_NUMBER_UPPER64","MEDIAN","MIN","MAX","MINHASH","MINHASH_COMBINE","MOD","MODE","MONTHNAME","MONTHS_BETWEEN","NEXT_DAY","NORMAL","NTH_VALUE","NTILE","NULLIF","NULLIFZERO","NVL","NVL2","OBJECT_AGG","OBJECT_CONSTRUCT","OBJECT_CONSTRUCT_KEEP_NULL","OBJECT_DELETE","OBJECT_INSERT","OBJECT_KEYS","OBJECT_PICK","OCTET_LENGTH","PARSE_IP","PARSE_JSON","PARSE_URL","PARSE_XML","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIPE_USAGE_HISTORY","POLICY_CONTEXT","POLICY_REFERENCES","POSITION","POW","POWER","PREVIOUS_DAY","QUERY_ACCELERATION_HISTORY","QUERY_HISTORY","QUERY_HISTORY_BY_SESSION","QUERY_HISTORY_BY_USER","QUERY_HISTORY_BY_WAREHOUSE","RADIANS","RANDOM","RANDSTR","RANK","RATIO_TO_REPORT","REGEXP","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REGEXP_SUBSTR_ALL","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","REGR_VALX","REGR_VALY","REPEAT","REPLACE","REPLICATION_GROUP_REFRESH_HISTORY","REPLICATION_GROUP_REFRESH_PROGRESS","REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB","REPLICATION_GROUP_USAGE_HISTORY","REPLICATION_USAGE_HISTORY","REST_EVENT_HISTORY","RESULT_SCAN","REVERSE","RIGHT","RLIKE","ROUND","ROW_NUMBER","RPAD","RTRIM","RTRIMMED_LENGTH","SEARCH_OPTIMIZATION_HISTORY","SEQ1","SEQ2","SEQ4","SEQ8","SERVERLESS_TASK_HISTORY","SHA1","SHA1_HEX","SHA1_BINARY","SHA2","SHA2_HEX","SHA2_BINARY","SIGN","SIN","SINH","SKEW","SOUNDEX","SPACE","SPLIT","SPLIT_PART","SPLIT_TO_TABLE","SQRT","SQUARE","ST_AREA","ST_ASEWKB","ST_ASEWKT","ST_ASGEOJSON","ST_ASWKB","ST_ASBINARY","ST_ASWKT","ST_ASTEXT","ST_AZIMUTH","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DWITHIN","ST_ENDPOINT","ST_ENVELOPE","ST_GEOGFROMGEOHASH","ST_GEOGPOINTFROMGEOHASH","ST_GEOGRAPHYFROMWKB","ST_GEOGRAPHYFROMWKT","ST_GEOHASH","ST_GEOMETRYFROMWKB","ST_GEOMETRYFROMWKT","ST_HAUSDORFFDISTANCE","ST_INTERSECTION","ST_INTERSECTS","ST_LENGTH","ST_MAKEGEOMPOINT","ST_GEOM_POINT","ST_MAKELINE","ST_MAKEPOINT","ST_POINT","ST_MAKEPOLYGON","ST_POLYGON","ST_NPOINTS","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SETSRID","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","STAGE_DIRECTORY_FILE_REGISTRATION_HISTORY","STAGE_STORAGE_USAGE_HISTORY","STARTSWITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRIP_NULL_VALUE","STRTOK","STRTOK_SPLIT_TO_TABLE","STRTOK_TO_ARRAY","SUBSTR","SUBSTRING","SUM","SYSDATE","SYSTEM$ABORT_SESSION","SYSTEM$ABORT_TRANSACTION","SYSTEM$AUTHORIZE_PRIVATELINK","SYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS","SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS","SYSTEM$CANCEL_ALL_QUERIES","SYSTEM$CANCEL_QUERY","SYSTEM$CLUSTERING_DEPTH","SYSTEM$CLUSTERING_INFORMATION","SYSTEM$CLUSTERING_RATIO ","SYSTEM$CURRENT_USER_TASK_NAME","SYSTEM$DATABASE_REFRESH_HISTORY ","SYSTEM$DATABASE_REFRESH_PROGRESS","SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB ","SYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$DISABLE_DATABASE_REPLICATION","SYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$ESTIMATE_QUERY_ACCELERATION","SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS","SYSTEM$EXPLAIN_JSON_TO_TEXT","SYSTEM$EXPLAIN_PLAN_JSON","SYSTEM$EXTERNAL_TABLE_PIPE_STATUS","SYSTEM$GENERATE_SAML_CSR","SYSTEM$GENERATE_SCIM_ACCESS_TOKEN","SYSTEM$GET_AWS_SNS_IAM_POLICY","SYSTEM$GET_PREDECESSOR_RETURN_VALUE","SYSTEM$GET_PRIVATELINK","SYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS","SYSTEM$GET_PRIVATELINK_CONFIG","SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO","SYSTEM$GET_TAG","SYSTEM$GET_TAG_ALLOWED_VALUES","SYSTEM$GET_TAG_ON_CURRENT_COLUMN","SYSTEM$GET_TAG_ON_CURRENT_TABLE","SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER","SYSTEM$LAST_CHANGE_COMMIT_TIME","SYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME","SYSTEM$MIGRATE_SAML_IDP_REGISTRATION","SYSTEM$PIPE_FORCE_RESUME","SYSTEM$PIPE_STATUS","SYSTEM$REVOKE_PRIVATELINK","SYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS","SYSTEM$SET_RETURN_VALUE","SYSTEM$SHOW_OAUTH_CLIENT_SECRETS","SYSTEM$STREAM_GET_TABLE_TIMESTAMP","SYSTEM$STREAM_HAS_DATA","SYSTEM$TASK_DEPENDENTS_ENABLE","SYSTEM$TYPEOF","SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS","SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN","SYSTEM$WAIT","SYSTEM$WHITELIST","SYSTEM$WHITELIST_PRIVATELINK","TAG_REFERENCES","TAG_REFERENCES_ALL_COLUMNS","TAG_REFERENCES_WITH_LINEAGE","TAN","TANH","TASK_DEPENDENTS","TASK_HISTORY","TIME_FROM_PARTS","TIME_SLICE","TIMEADD","TIMEDIFF","TIMESTAMP_FROM_PARTS","TIMESTAMPADD","TIMESTAMPDIFF","TO_ARRAY","TO_BINARY","TO_BOOLEAN","TO_CHAR","TO_VARCHAR","TO_DATE","DATE","TO_DECIMAL","TO_NUMBER","TO_NUMERIC","TO_DOUBLE","TO_GEOGRAPHY","TO_GEOMETRY","TO_JSON","TO_OBJECT","TO_TIME","TIME","TO_TIMESTAMP","TO_TIMESTAMP_LTZ","TO_TIMESTAMP_NTZ","TO_TIMESTAMP_TZ","TO_VARIANT","TO_XML","TRANSLATE","TRIM","TRUNCATE","TRUNC","TRUNC","TRY_BASE64_DECODE_BINARY","TRY_BASE64_DECODE_STRING","TRY_CAST","TRY_HEX_DECODE_BINARY","TRY_HEX_DECODE_STRING","TRY_PARSE_JSON","TRY_TO_BINARY","TRY_TO_BOOLEAN","TRY_TO_DATE","TRY_TO_DECIMAL","TRY_TO_NUMBER","TRY_TO_NUMERIC","TRY_TO_DOUBLE","TRY_TO_GEOGRAPHY","TRY_TO_GEOMETRY","TRY_TO_TIME","TRY_TO_TIMESTAMP","TRY_TO_TIMESTAMP_LTZ","TRY_TO_TIMESTAMP_NTZ","TRY_TO_TIMESTAMP_TZ","TYPEOF","UNICODE","UNIFORM","UPPER","UUID_STRING","VALIDATE","VALIDATE_PIPE_LOAD","VAR_POP","VAR_SAMP","VARIANCE","VARIANCE_SAMP","VARIANCE_POP","WAREHOUSE_LOAD_HISTORY","WAREHOUSE_METERING_HISTORY","WIDTH_BUCKET","XMLGET","YEAR","YEAROFWEEK","YEAROFWEEKISO","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEKISO","DAYOFYEAR","WEEK","WEEK","WEEKOFYEAR","WEEKISO","MONTH","QUARTER","ZEROIFNULL","ZIPF"],keywords=["ACCOUNT","ALL","ALTER","AND","ANY","AS","BETWEEN","BY","CASE","CAST","CHECK","COLUMN","CONNECT","CONNECTION","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATABASE","DELETE","DISTINCT","DROP","ELSE","EXISTS","FALSE","FOLLOWING","FOR","FROM","FULL","GRANT","GROUP","GSCLUSTER","HAVING","ILIKE","IN","INCREMENT","INNER","INSERT","INTERSECT","INTO","IS","ISSUE","JOIN","LATERAL","LEFT","LIKE","LOCALTIME","LOCALTIMESTAMP","MINUS","NATURAL","NOT","NULL","OF","ON","OR","ORDER","ORGANIZATION","QUALIFY","REGEXP","REVOKE","RIGHT","RLIKE","ROW","ROWS","SAMPLE","SCHEMA","SELECT","SET","SOME","START","TABLE","TABLESAMPLE","THEN","TO","TRIGGER","TRUE","TRY_CAST","UNION","UNIQUE","UPDATE","USING","VALUES","VIEW","WHEN","WHENEVER","WHERE","WITH","COMMENT"],dataTypes=["NUMBER","DECIMAL","NUMERIC","INT","INTEGER","BIGINT","SMALLINT","TINYINT","BYTEINT","FLOAT","FLOAT4","FLOAT8","DOUBLE","DOUBLE PRECISION","REAL","VARCHAR","CHAR","CHARACTER","STRING","TEXT","BINARY","VARBINARY","BOOLEAN","DATE","DATETIME","TIME","TIMESTAMP","TIMESTAMP_LTZ","TIMESTAMP_NTZ","TIMESTAMP","TIMESTAMP_TZ","VARIANT","OBJECT","ARRAY","GEOGRAPHY","GEOMETRY"],reservedSelect=expandPhrases(["SELECT [ALL | DISTINCT]"]),reservedClauses=expandPhrases(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","QUALIFY","LIMIT","OFFSET","FETCH [FIRST | NEXT]","INSERT [OVERWRITE] [ALL INTO | INTO | ALL | FIRST]","{THEN | ELSE} INTO","VALUES","SET","CLUSTER BY","[WITH] {MASKING POLICY | TAG | ROW ACCESS POLICY}","COPY GRANTS","USING TEMPLATE","MERGE INTO","WHEN MATCHED [AND]","THEN {UPDATE SET | DELETE}","WHEN NOT MATCHED THEN INSERT"]),standardOnelineClauses=expandPhrases(["CREATE [OR REPLACE] [VOLATILE] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [LOCAL | GLOBAL] {TEMP|TEMPORARY} TABLE [IF NOT EXISTS]"]),tabularOnelineClauses=expandPhrases(["CREATE [OR REPLACE] [SECURE] [RECURSIVE] VIEW [IF NOT EXISTS]","UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","RENAME TO","SWAP WITH","[SUSPEND | RESUME] RECLUSTER","DROP CLUSTERING KEY","ADD [COLUMN]","RENAME COLUMN","{ALTER | MODIFY} [COLUMN]","DROP [COLUMN]","{ADD | ALTER | MODIFY | DROP} [CONSTRAINT]","RENAME CONSTRAINT","{ADD | DROP} SEARCH OPTIMIZATION","{SET | UNSET} TAG","{ADD | DROP} ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","SET DATA TYPE","UNSET COMMENT","{SET | UNSET} MASKING POLICY","TRUNCATE [TABLE] [IF EXISTS]","ALTER ACCOUNT","ALTER API INTEGRATION","ALTER CONNECTION","ALTER DATABASE","ALTER EXTERNAL TABLE","ALTER FAILOVER GROUP","ALTER FILE FORMAT","ALTER FUNCTION","ALTER INTEGRATION","ALTER MASKING POLICY","ALTER MATERIALIZED VIEW","ALTER NETWORK POLICY","ALTER NOTIFICATION INTEGRATION","ALTER PIPE","ALTER PROCEDURE","ALTER REPLICATION GROUP","ALTER RESOURCE MONITOR","ALTER ROLE","ALTER ROW ACCESS POLICY","ALTER SCHEMA","ALTER SECURITY INTEGRATION","ALTER SEQUENCE","ALTER SESSION","ALTER SESSION POLICY","ALTER SHARE","ALTER STAGE","ALTER STORAGE INTEGRATION","ALTER STREAM","ALTER TAG","ALTER TASK","ALTER USER","ALTER VIEW","ALTER WAREHOUSE","BEGIN","CALL","COMMIT","COPY INTO","CREATE ACCOUNT","CREATE API INTEGRATION","CREATE CONNECTION","CREATE DATABASE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL TABLE","CREATE FAILOVER GROUP","CREATE FILE FORMAT","CREATE FUNCTION","CREATE INTEGRATION","CREATE MANAGED ACCOUNT","CREATE MASKING POLICY","CREATE MATERIALIZED VIEW","CREATE NETWORK POLICY","CREATE NOTIFICATION INTEGRATION","CREATE PIPE","CREATE PROCEDURE","CREATE REPLICATION GROUP","CREATE RESOURCE MONITOR","CREATE ROLE","CREATE ROW ACCESS POLICY","CREATE SCHEMA","CREATE SECURITY INTEGRATION","CREATE SEQUENCE","CREATE SESSION POLICY","CREATE SHARE","CREATE STAGE","CREATE STORAGE INTEGRATION","CREATE STREAM","CREATE TAG","CREATE TASK","CREATE USER","CREATE WAREHOUSE","DELETE","DESCRIBE DATABASE","DESCRIBE EXTERNAL TABLE","DESCRIBE FILE FORMAT","DESCRIBE FUNCTION","DESCRIBE INTEGRATION","DESCRIBE MASKING POLICY","DESCRIBE MATERIALIZED VIEW","DESCRIBE NETWORK POLICY","DESCRIBE PIPE","DESCRIBE PROCEDURE","DESCRIBE RESULT","DESCRIBE ROW ACCESS POLICY","DESCRIBE SCHEMA","DESCRIBE SEQUENCE","DESCRIBE SESSION POLICY","DESCRIBE SHARE","DESCRIBE STAGE","DESCRIBE STREAM","DESCRIBE TABLE","DESCRIBE TASK","DESCRIBE TRANSACTION","DESCRIBE USER","DESCRIBE VIEW","DESCRIBE WAREHOUSE","DROP CONNECTION","DROP DATABASE","DROP EXTERNAL TABLE","DROP FAILOVER GROUP","DROP FILE FORMAT","DROP FUNCTION","DROP INTEGRATION","DROP MANAGED ACCOUNT","DROP MASKING POLICY","DROP MATERIALIZED VIEW","DROP NETWORK POLICY","DROP PIPE","DROP PROCEDURE","DROP REPLICATION GROUP","DROP RESOURCE MONITOR","DROP ROLE","DROP ROW ACCESS POLICY","DROP SCHEMA","DROP SEQUENCE","DROP SESSION POLICY","DROP SHARE","DROP STAGE","DROP STREAM","DROP TAG","DROP TASK","DROP USER","DROP VIEW","DROP WAREHOUSE","EXECUTE IMMEDIATE","EXECUTE TASK","EXPLAIN","GET","GRANT OWNERSHIP","GRANT ROLE","INSERT","LIST","MERGE","PUT","REMOVE","REVOKE ROLE","ROLLBACK","SHOW COLUMNS","SHOW CONNECTIONS","SHOW DATABASES","SHOW DATABASES IN FAILOVER GROUP","SHOW DATABASES IN REPLICATION GROUP","SHOW DELEGATED AUTHORIZATIONS","SHOW EXTERNAL FUNCTIONS","SHOW EXTERNAL TABLES","SHOW FAILOVER GROUPS","SHOW FILE FORMATS","SHOW FUNCTIONS","SHOW GLOBAL ACCOUNTS","SHOW GRANTS","SHOW INTEGRATIONS","SHOW LOCKS","SHOW MANAGED ACCOUNTS","SHOW MASKING POLICIES","SHOW MATERIALIZED VIEWS","SHOW NETWORK POLICIES","SHOW OBJECTS","SHOW ORGANIZATION ACCOUNTS","SHOW PARAMETERS","SHOW PIPES","SHOW PRIMARY KEYS","SHOW PROCEDURES","SHOW REGIONS","SHOW REPLICATION ACCOUNTS","SHOW REPLICATION DATABASES","SHOW REPLICATION GROUPS","SHOW RESOURCE MONITORS","SHOW ROLES","SHOW ROW ACCESS POLICIES","SHOW SCHEMAS","SHOW SEQUENCES","SHOW SESSION POLICIES","SHOW SHARES","SHOW SHARES IN FAILOVER GROUP","SHOW SHARES IN REPLICATION GROUP","SHOW STAGES","SHOW STREAMS","SHOW TABLES","SHOW TAGS","SHOW TASKS","SHOW TRANSACTIONS","SHOW USER FUNCTIONS","SHOW USERS","SHOW VARIABLES","SHOW VIEWS","SHOW WAREHOUSES","TRUNCATE MATERIALIZED VIEW","UNDROP DATABASE","UNDROP SCHEMA","UNDROP TABLE","UNDROP TAG","UNSET","USE DATABASE","USE ROLE","USE SCHEMA","USE SECONDARY ROLES","USE WAREHOUSE"]),reservedSetOperations=expandPhrases(["UNION [ALL]","MINUS","EXCEPT","INTERSECT"]),reservedJoins=expandPhrases(["[INNER] JOIN","[NATURAL] {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | NATURAL} JOIN"]),reservedKeywordPhrases=expandPhrases(["{ROWS | RANGE} BETWEEN","ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]"]),reservedDataTypePhrases=expandPhrases([]),snowflake={name:"snowflake",tokenizerOptions:{reservedSelect,reservedClauses:[...reservedClauses,...standardOnelineClauses,...tabularOnelineClauses],reservedSetOperations,reservedJoins,reservedKeywordPhrases,reservedDataTypePhrases,reservedKeywords:keywords,reservedDataTypes:dataTypes,reservedFunctionNames:functions,stringTypes:["$$","''-qq-bs"],identTypes:['""-qq'],variableTypes:[{regex:"[$][1-9]\\d*"},{regex:"[$][_a-zA-Z][_a-zA-Z0-9$]*"}],extraParens:["[]"],identChars:{rest:"$"},lineCommentTypes:["--","//"],operators:["%","::","||","=>",":=","->"],propertyAccessOperators:[":"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:[...standardOnelineClauses,...tabularOnelineClauses],tabularOnelineClauses}},allDialects=Object.freeze(Object.defineProperty({__proto__:null,bigquery,db2,db2i,duckdb,hive,mariadb,mysql,n1ql,plsql,postgresql,redshift,singlestoredb,snowflake,spark,sql,sqlite,tidb,transactsql,trino},Symbol.toStringTag,{value:"Module"})),last=E=>E[E.length-1],sortByLengthDesc=E=>E.sort((T,e)=>e.length-T.length||T.localeCompare(e)),equalizeWhitespace=E=>E.replace(/\s+/gu," "),isMultiline=E=>/\n/.test(E),escapeRegExp=E=>E.replace(/[.*+?^${}()|[\]\\]/gu,"\\$&"),WHITESPACE_REGEX=/\s+/uy,patternToRegex=E=>new RegExp(`(?:${E})`,"uy"),toCaseInsensitivePattern=E=>E.split("").map(T=>/ /gu.test(T)?"\\s+":`[${T.toUpperCase()}${T.toLowerCase()}]`).join(""),withDashes=E=>E+"(?:-"+E+")*",prefixesPattern=({prefixes:E,requirePrefix:T})=>`(?:${E.map(toCaseInsensitivePattern).join("|")}${T?"":"|"})`,lineComment=E=>new RegExp(`(?:${E.map(escapeRegExp).join("|")}).*?(?=\r
|\r|
|$)`,"uy"),parenthesis=(E,T=[])=>{const e=E==="open"?0:1,R=["()",...T].map(A=>A[e]);return patternToRegex(R.map(escapeRegExp).join("|"))},operator=E=>patternToRegex(`${sortByLengthDesc(E).map(escapeRegExp).join("|")}`),rejectIdentCharsPattern=({rest:E,dashes:T})=>E||T?`(?![${E||""}${T?"-":""}])`:"",reservedWord=(E,T={})=>{if(E.length===0)return/^\b$/u;const e=rejectIdentCharsPattern(T),R=sortByLengthDesc(E).map(escapeRegExp).join("|").replace(/ /gu,"\\s+");return new RegExp(`(?:${R})${e}\\b`,"iuy")},parameter=(E,T)=>{if(!E.length)return;const e=E.map(escapeRegExp).join("|");return patternToRegex(`(?:${e})(?:${T})`)},buildQStringPatterns=()=>{const E={"<":">","[":"]","(":")","{":"}"},T="{left}(?:(?!{right}').)*?{right}",e=Object.entries(E).map(([S,N])=>T.replace(/{left}/g,escapeRegExp(S)).replace(/{right}/g,escapeRegExp(N))),R=escapeRegExp(Object.keys(E).join(""));return`[Qq]'(?:${String.raw`(?<tag>[^\s${R}])(?:(?!\k<tag>').)*?\k<tag>`}|${e.join("|")})'`},quotePatterns={"``":"(?:`[^`]*`)+","[]":String.raw`(?:\[[^\]]*\])(?:\][^\]]*\])*`,'""-qq':String.raw`(?:"[^"]*")+`,'""-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")`,'""-qq-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")+`,'""-raw':String.raw`(?:"[^"]*")`,"''-qq":String.raw`(?:'[^']*')+`,"''-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')`,"''-qq-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')+`,"''-raw":String.raw`(?:'[^']*')`,$$:String.raw`(?<tag>\$\w*\$)[\s\S]*?\k<tag>`,"'''..'''":String.raw`'''[^\\]*?(?:\\.[^\\]*?)*?'''`,'""".."""':String.raw`"""[^\\]*?(?:\\.[^\\]*?)*?"""`,"{}":String.raw`(?:\{[^\}]*\})`,"q''":buildQStringPatterns()},singleQuotePattern=E=>typeof E=="string"?quotePatterns[E]:"regex"in E?E.regex:prefixesPattern(E)+quotePatterns[E.quote],variable=E=>patternToRegex(E.map(T=>"regex"in T?T.regex:singleQuotePattern(T)).join("|")),stringPattern=E=>E.map(singleQuotePattern).join("|"),string=E=>patternToRegex(stringPattern(E)),identifier=(E={})=>patternToRegex(identifierPattern(E)),identifierPattern=({first:E,rest:T,dashes:e,allowFirstCharNumber:R}={})=>{const A="\\p{Alphabetic}\\p{Mark}_",O="\\p{Decimal_Number}",S=escapeRegExp(E??""),N=escapeRegExp(T??""),n=R?`[${A}${O}${S}][${A}${O}${N}]*`:`[${A}${S}][${A}${O}${N}]*`;return e?withDashes(n):n};function lineColFromIndex(E,T){const e=E.slice(0,T).split(/\n/);return{line:e.length,col:e[e.length-1].length+1}}class TokenizerEngine{constructor(T,e){this.rules=T,this.dialectName=e,this.input="",this.index=0}tokenize(T){this.input=T,this.index=0;const e=[];let R;for(;this.index<this.input.length;){const A=this.getWhitespace();if(this.index<this.input.length){if(R=this.getNextToken(),!R)throw this.createParseError();e.push(Object.assign(Object.assign({},R),{precedingWhitespace:A}))}}return e}createParseError(){const T=this.input.slice(this.index,this.index+10),{line:e,col:R}=lineColFromIndex(this.input,this.index);return new Error(`Parse error: Unexpected "${T}" at line ${e} column ${R}.
${this.dialectInfo()}`)}dialectInfo(){return this.dialectName==="sql"?`This likely happens because you're using the default "sql" dialect.
If possible, please select a more specific dialect (like sqlite, postgresql, etc).`:`SQL dialect used: "${this.dialectName}".`}getWhitespace(){WHITESPACE_REGEX.lastIndex=this.index;const T=WHITESPACE_REGEX.exec(this.input);if(T)return this.index+=T[0].length,T[0]}getNextToken(){for(const T of this.rules){const e=this.match(T);if(e)return e}}match(T){T.regex.lastIndex=this.index;const e=T.regex.exec(this.input);if(e){const R=e[0],A={type:T.type,raw:R,text:T.text?T.text(R):R,start:this.index};return T.key&&(A.key=T.key(R)),this.index+=R.length,A}}}const START=/\/\*/uy,ANY_CHAR=/[\s\S]/uy,END$1=/\*\//uy;class NestedComment{constructor(){this.lastIndex=0}exec(T){let e="",R,A=0;if(R=this.matchSection(START,T))e+=R,A++;else return null;for(;A>0;)if(R=this.matchSection(START,T))e+=R,A++;else if(R=this.matchSection(END$1,T))e+=R,A--;else if(R=this.matchSection(ANY_CHAR,T))e+=R;else return null;return[e]}matchSection(T,e){T.lastIndex=this.lastIndex;const R=T.exec(e);return R&&(this.lastIndex+=R[0].length),R?R[0]:null}}class Tokenizer{constructor(T,e){this.cfg=T,this.dialectName=e,this.rulesBeforeParams=this.buildRulesBeforeParams(T),this.rulesAfterParams=this.buildRulesAfterParams(T)}tokenize(T,e){const R=[...this.rulesBeforeParams,...this.buildParamRules(this.cfg,e),...this.rulesAfterParams],A=new TokenizerEngine(R,this.dialectName).tokenize(T);return this.cfg.postProcess?this.cfg.postProcess(A):A}buildRulesBeforeParams(T){var e,R,A;return this.validRules([{type:TokenType.DISABLE_COMMENT,regex:/(\/\* *sql-formatter-disable *\*\/[\s\S]*?(?:\/\* *sql-formatter-enable *\*\/|$))/uy},{type:TokenType.BLOCK_COMMENT,regex:T.nestedBlockComments?new NestedComment:/(\/\*[^]*?\*\/)/uy},{type:TokenType.LINE_COMMENT,regex:lineComment((e=T.lineCommentTypes)!==null&&e!==void 0?e:["--"])},{type:TokenType.QUOTED_IDENTIFIER,regex:string(T.identTypes)},{type:TokenType.NUMBER,regex:T.underscoresInNumbers?/(?:0x[0-9a-fA-F_]+|0b[01_]+|(?:-\s*)?(?:[0-9_]*\.[0-9_]+|[0-9_]+(?:\.[0-9_]*)?)(?:[eE][-+]?[0-9_]+(?:\.[0-9_]+)?)?)(?![\w\p{Alphabetic}])/uy:/(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\s*)?(?:[0-9]*\.[0-9]+|[0-9]+(?:\.[0-9]*)?)(?:[eE][-+]?[0-9]+(?:\.[0-9]+)?)?)(?![\w\p{Alphabetic}])/uy},{type:TokenType.RESERVED_KEYWORD_PHRASE,regex:reservedWord((R=T.reservedKeywordPhrases)!==null&&R!==void 0?R:[],T.identChars),text:toCanonical},{type:TokenType.RESERVED_DATA_TYPE_PHRASE,regex:reservedWord((A=T.reservedDataTypePhrases)!==null&&A!==void 0?A:[],T.identChars),text:toCanonical},{type:TokenType.CASE,regex:/CASE\b/iuy,text:toCanonical},{type:TokenType.END,regex:/END\b/iuy,text:toCanonical},{type:TokenType.BETWEEN,regex:/BETWEEN\b/iuy,text:toCanonical},{type:TokenType.LIMIT,regex:T.reservedClauses.includes("LIMIT")?/LIMIT\b/iuy:void 0,text:toCanonical},{type:TokenType.RESERVED_CLAUSE,regex:reservedWord(T.reservedClauses,T.identChars),text:toCanonical},{type:TokenType.RESERVED_SELECT,regex:reservedWord(T.reservedSelect,T.identChars),text:toCanonical},{type:TokenType.RESERVED_SET_OPERATION,regex:reservedWord(T.reservedSetOperations,T.identChars),text:toCanonical},{type:TokenType.WHEN,regex:/WHEN\b/iuy,text:toCanonical},{type:TokenType.ELSE,regex:/ELSE\b/iuy,text:toCanonical},{type:TokenType.THEN,regex:/THEN\b/iuy,text:toCanonical},{type:TokenType.RESERVED_JOIN,regex:reservedWord(T.reservedJoins,T.identChars),text:toCanonical},{type:TokenType.AND,regex:/AND\b/iuy,text:toCanonical},{type:TokenType.OR,regex:/OR\b/iuy,text:toCanonical},{type:TokenType.XOR,regex:T.supportsXor?/XOR\b/iuy:void 0,text:toCanonical},...T.operatorKeyword?[{type:TokenType.OPERATOR,regex:/OPERATOR *\([^)]+\)/iuy}]:[],{type:TokenType.RESERVED_FUNCTION_NAME,regex:reservedWord(T.reservedFunctionNames,T.identChars),text:toCanonical},{type:TokenType.RESERVED_DATA_TYPE,regex:reservedWord(T.reservedDataTypes,T.identChars),text:toCanonical},{type:TokenType.RESERVED_KEYWORD,regex:reservedWord(T.reservedKeywords,T.identChars),text:toCanonical}])}buildRulesAfterParams(T){var e,R;return this.validRules([{type:TokenType.VARIABLE,regex:T.variableTypes?variable(T.variableTypes):void 0},{type:TokenType.STRING,regex:string(T.stringTypes)},{type:TokenType.IDENTIFIER,regex:identifier(T.identChars)},{type:TokenType.DELIMITER,regex:/[;]/uy},{type:TokenType.COMMA,regex:/[,]/y},{type:TokenType.OPEN_PAREN,regex:parenthesis("open",T.extraParens)},{type:TokenType.CLOSE_PAREN,regex:parenthesis("close",T.extraParens)},{type:TokenType.OPERATOR,regex:operator(["+","-","/",">","<","=","<>","<=",">=","!=",...(e=T.operators)!==null&&e!==void 0?e:[]])},{type:TokenType.ASTERISK,regex:/[*]/uy},{type:TokenType.PROPERTY_ACCESS_OPERATOR,regex:operator([".",...(R=T.propertyAccessOperators)!==null&&R!==void 0?R:[]])}])}buildParamRules(T,e){var R,A,O,S,N;const n={named:(e==null?void 0:e.named)||((R=T.paramTypes)===null||R===void 0?void 0:R.named)||[],quoted:(e==null?void 0:e.quoted)||((A=T.paramTypes)===null||A===void 0?void 0:A.quoted)||[],numbered:(e==null?void 0:e.numbered)||((O=T.paramTypes)===null||O===void 0?void 0:O.numbered)||[],positional:typeof(e==null?void 0:e.positional)=="boolean"?e.positional:(S=T.paramTypes)===null||S===void 0?void 0:S.positional,custom:(e==null?void 0:e.custom)||((N=T.paramTypes)===null||N===void 0?void 0:N.custom)||[]};return this.validRules([{type:TokenType.NAMED_PARAMETER,regex:parameter(n.named,identifierPattern(T.paramChars||T.identChars)),key:I=>I.slice(1)},{type:TokenType.QUOTED_PARAMETER,regex:parameter(n.quoted,stringPattern(T.identTypes)),key:I=>(({tokenKey:r,quoteChar:t})=>r.replace(new RegExp(escapeRegExp("\\"+t),"gu"),t))({tokenKey:I.slice(2,-1),quoteChar:I.slice(-1)})},{type:TokenType.NUMBERED_PARAMETER,regex:parameter(n.numbered,"[0-9]+"),key:I=>I.slice(1)},{type:TokenType.POSITIONAL_PARAMETER,regex:n.positional?/[?]/y:void 0},...n.custom.map(I=>{var r;return{type:TokenType.CUSTOM_PARAMETER,regex:patternToRegex(I.regex),key:(r=I.key)!==null&&r!==void 0?r:t=>t}})])}validRules(T){return T.filter(e=>!!e.regex)}}const toCanonical=E=>equalizeWhitespace(E.toUpperCase()),cache=new Map,createDialect=E=>{let T=cache.get(E);return T||(T=dialectFromOptions(E),cache.set(E,T)),T},dialectFromOptions=E=>({tokenizer:new Tokenizer(E.tokenizerOptions,E.name),formatOptions:processDialectFormatOptions(E.formatOptions)}),processDialectFormatOptions=E=>{var T;return{alwaysDenseOperators:E.alwaysDenseOperators||[],onelineClauses:Object.fromEntries(E.onelineClauses.map(e=>[e,!0])),tabularOnelineClauses:Object.fromEntries(((T=E.tabularOnelineClauses)!==null&&T!==void 0?T:E.onelineClauses).map(e=>[e,!0]))}};function indentString(E){return E.indentStyle==="tabularLeft"||E.indentStyle==="tabularRight"?" ".repeat(10):E.useTabs?"	":" ".repeat(E.tabWidth)}function isTabularStyle(E){return E.indentStyle==="tabularLeft"||E.indentStyle==="tabularRight"}class Params{constructor(T){this.params=T,this.index=0}get({key:T,text:e}){return this.params?T?this.params[T]:this.params[this.index++]:e}getPositionalParameterIndex(){return this.index}setPositionalParameterIndex(T){this.index=T}}var nearley$2={exports:{}},nearley$1=nearley$2.exports,hasRequiredNearley;function requireNearley(){return hasRequiredNearley||(hasRequiredNearley=1,function(E){(function(T,e){E.exports?E.exports=e():T.nearley=e()})(nearley$1,function(){function T(I,r,t){return this.id=++T.highestId,this.name=I,this.symbols=r,this.postprocess=t,this}T.highestId=0,T.prototype.toString=function(I){var r=typeof I>"u"?this.symbols.map(n).join(" "):this.symbols.slice(0,I).map(n).join(" ")+" ● "+this.symbols.slice(I).map(n).join(" ");return this.name+" → "+r};function e(I,r,t,s){this.rule=I,this.dot=r,this.reference=t,this.data=[],this.wantedBy=s,this.isComplete=this.dot===I.symbols.length}e.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},e.prototype.nextState=function(I){var r=new e(this.rule,this.dot+1,this.reference,this.wantedBy);return r.left=this,r.right=I,r.isComplete&&(r.data=r.build(),r.right=void 0),r},e.prototype.build=function(){var I=[],r=this;do I.push(r.right.data),r=r.left;while(r.left);return I.reverse(),I},e.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,S.fail))};function R(I,r){this.grammar=I,this.index=r,this.states=[],this.wants={},this.scannable=[],this.completed={}}R.prototype.process=function(I){for(var r=this.states,t=this.wants,s=this.completed,L=0;L<r.length;L++){var o=r[L];if(o.isComplete){if(o.finish(),o.data!==S.fail){for(var P=o.wantedBy,c=P.length;c--;){var m=P[c];this.complete(m,o)}if(o.reference===this.index){var U=o.rule.name;(this.completed[U]=this.completed[U]||[]).push(o)}}}else{var U=o.rule.symbols[o.dot];if(typeof U!="string"){this.scannable.push(o);continue}if(t[U]){if(t[U].push(o),s.hasOwnProperty(U))for(var j=s[U],c=0;c<j.length;c++){var rE=j[c];this.complete(o,rE)}}else t[U]=[o],this.predict(U)}}},R.prototype.predict=function(I){for(var r=this.grammar.byName[I]||[],t=0;t<r.length;t++){var s=r[t],L=this.wants[I],o=new e(s,0,this.index,L);this.states.push(o)}},R.prototype.complete=function(I,r){var t=I.nextState(r);this.states.push(t)};function A(I,r){this.rules=I,this.start=r||this.rules[0].name;var t=this.byName={};this.rules.forEach(function(s){t.hasOwnProperty(s.name)||(t[s.name]=[]),t[s.name].push(s)})}A.fromCompiled=function(s,r){var t=s.Lexer;s.ParserStart&&(r=s.ParserStart,s=s.ParserRules);var s=s.map(function(o){return new T(o.name,o.symbols,o.postprocess)}),L=new A(s,r);return L.lexer=t,L};function O(){this.reset("")}O.prototype.reset=function(I,r){this.buffer=I,this.index=0,this.line=r?r.line:1,this.lastLineBreak=r?-r.col:0},O.prototype.next=function(){if(this.index<this.buffer.length){var I=this.buffer[this.index++];return I===`
`&&(this.line+=1,this.lastLineBreak=this.index),{value:I}}},O.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},O.prototype.formatError=function(I,r){var t=this.buffer;if(typeof t=="string"){var s=t.split(`
`).slice(Math.max(0,this.line-5),this.line),L=t.indexOf(`
`,this.index);L===-1&&(L=t.length);var o=this.index-this.lastLineBreak,P=String(this.line).length;return r+=" at line "+this.line+" col "+o+`:

`,r+=s.map(function(m,U){return c(this.line-s.length+U+1,P)+" "+m},this).join(`
`),r+=`
`+c("",P+o)+`^
`,r}else return r+" at index "+(this.index-1);function c(m,U){var j=String(m);return Array(U-j.length+1).join(" ")+j}};function S(I,r,t){if(I instanceof A)var s=I,t=r;else var s=A.fromCompiled(I,r);this.grammar=s,this.options={keepHistory:!1,lexer:s.lexer||new O};for(var L in t||{})this.options[L]=t[L];this.lexer=this.options.lexer,this.lexerState=void 0;var o=new R(s,0);this.table=[o],o.wants[s.start]=[],o.predict(s.start),o.process(),this.current=0}S.fail={},S.prototype.feed=function(I){var r=this.lexer;r.reset(I,this.lexerState);for(var t;;){try{if(t=r.next(),!t)break}catch(y){var P=new R(this.grammar,this.current+1);this.table.push(P);var s=new Error(this.reportLexerError(y));throw s.offset=this.current,s.token=y.token,s}var L=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var o=this.current+1,P=new R(this.grammar,o);this.table.push(P);for(var c=t.text!==void 0?t.text:t.value,m=r.constructor===O?t.value:t,U=L.scannable,j=U.length;j--;){var rE=U[j],IE=rE.rule.symbols[rE.dot];if(IE.test?IE.test(m):IE.type?IE.type===t.type:IE.literal===c){var RE=rE.nextState({data:m,token:t,isToken:!0,reference:o-1});P.states.push(RE)}}if(P.process(),P.states.length===0){var s=new Error(this.reportError(t));throw s.offset=this.current,s.token=t,s}this.options.keepHistory&&(L.lexerState=r.save()),this.current++}return L&&(this.lexerState=r.save()),this.results=this.finish(),this},S.prototype.reportLexerError=function(I){var r,t,s=I.token;return s?(r="input "+JSON.stringify(s.text[0])+" (lexer error)",t=this.lexer.formatError(s,"Syntax error")):(r="input (lexer error)",t=I.message),this.reportErrorCommon(t,r)},S.prototype.reportError=function(I){var r=(I.type?I.type+" token: ":"")+JSON.stringify(I.value!==void 0?I.value:I),t=this.lexer.formatError(I,"Syntax error");return this.reportErrorCommon(t,r)},S.prototype.reportErrorCommon=function(I,r){var t=[];t.push(I);var s=this.table.length-2,L=this.table[s],o=L.states.filter(function(c){var m=c.rule.symbols[c.dot];return m&&typeof m!="string"});if(o.length===0)t.push("Unexpected "+r+`. I did not expect any more input. Here is the state of my parse table:
`),this.displayStateStack(L.states,t);else{t.push("Unexpected "+r+`. Instead, I was expecting to see one of the following:
`);var P=o.map(function(c){return this.buildFirstStateStack(c,[])||[c]},this);P.forEach(function(c){var m=c[0],U=m.rule.symbols[m.dot],j=this.getSymbolDisplay(U);t.push("A "+j+" based on:"),this.displayStateStack(c,t)},this)}return t.push(""),t.join(`
`)},S.prototype.displayStateStack=function(I,r){for(var t,s=0,L=0;L<I.length;L++){var o=I[L],P=o.rule.toString(o.dot);P===t?s++:(s>0&&r.push("    ^ "+s+" more lines identical to this"),s=0,r.push("    "+P)),t=P}},S.prototype.getSymbolDisplay=function(I){return N(I)},S.prototype.buildFirstStateStack=function(I,r){if(r.indexOf(I)!==-1)return null;if(I.wantedBy.length===0)return[I];var t=I.wantedBy[0],s=[I].concat(r),L=this.buildFirstStateStack(t,s);return L===null?null:[I].concat(L)},S.prototype.save=function(){var I=this.table[this.current];return I.lexerState=this.lexerState,I},S.prototype.restore=function(I){var r=I.index;this.current=r,this.table[r]=I,this.table.splice(r+1),this.lexerState=I.lexerState,this.results=this.finish()},S.prototype.rewind=function(I){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[I])},S.prototype.finish=function(){var I=[],r=this.grammar.start,t=this.table[this.table.length-1];return t.states.forEach(function(s){s.rule.name===r&&s.dot===s.rule.symbols.length&&s.reference===0&&s.data!==S.fail&&I.push(s)}),I.map(function(s){return s.data})};function N(I){var r=typeof I;if(r==="string")return I;if(r==="object"){if(I.literal)return JSON.stringify(I.literal);if(I instanceof RegExp)return"character matching "+I;if(I.type)return I.type+" token";if(I.test)return"token matching "+String(I.test);throw new Error("Unknown symbol type: "+I)}}function n(I){var r=typeof I;if(r==="string")return I;if(r==="object"){if(I.literal)return JSON.stringify(I.literal);if(I instanceof RegExp)return I.toString();if(I.type)return"%"+I.type;if(I.test)return"<"+String(I.test)+">";throw new Error("Unknown symbol type: "+I)}}return{Parser:S,Grammar:A,Rule:T}})}(nearley$2)),nearley$2.exports}var nearleyExports=requireNearley();const nearley=getDefaultExportFromCjs(nearleyExports);function disambiguateTokens(E){return E.map(propertyNameKeywordToIdent).map(funcNameToIdent).map(dataTypeToParameterizedDataType).map(identToArrayIdent).map(dataTypeToArrayKeyword)}const propertyNameKeywordToIdent=(E,T,e)=>{if(isReserved(E.type)){const R=prevNonCommentToken(e,T);if(R&&R.type===TokenType.PROPERTY_ACCESS_OPERATOR)return Object.assign(Object.assign({},E),{type:TokenType.IDENTIFIER,text:E.raw});const A=nextNonCommentToken(e,T);if(A&&A.type===TokenType.PROPERTY_ACCESS_OPERATOR)return Object.assign(Object.assign({},E),{type:TokenType.IDENTIFIER,text:E.raw})}return E},funcNameToIdent=(E,T,e)=>{if(E.type===TokenType.RESERVED_FUNCTION_NAME){const R=nextNonCommentToken(e,T);if(!R||!isOpenParen(R))return Object.assign(Object.assign({},E),{type:TokenType.IDENTIFIER,text:E.raw})}return E},dataTypeToParameterizedDataType=(E,T,e)=>{if(E.type===TokenType.RESERVED_DATA_TYPE){const R=nextNonCommentToken(e,T);if(R&&isOpenParen(R))return Object.assign(Object.assign({},E),{type:TokenType.RESERVED_PARAMETERIZED_DATA_TYPE})}return E},identToArrayIdent=(E,T,e)=>{if(E.type===TokenType.IDENTIFIER){const R=nextNonCommentToken(e,T);if(R&&isOpenBracket(R))return Object.assign(Object.assign({},E),{type:TokenType.ARRAY_IDENTIFIER})}return E},dataTypeToArrayKeyword=(E,T,e)=>{if(E.type===TokenType.RESERVED_DATA_TYPE){const R=nextNonCommentToken(e,T);if(R&&isOpenBracket(R))return Object.assign(Object.assign({},E),{type:TokenType.ARRAY_KEYWORD})}return E},prevNonCommentToken=(E,T)=>nextNonCommentToken(E,T,-1),nextNonCommentToken=(E,T,e=1)=>{let R=1;for(;E[T+R*e]&&isComment(E[T+R*e]);)R++;return E[T+R*e]},isOpenParen=E=>E.type===TokenType.OPEN_PAREN&&E.text==="(",isOpenBracket=E=>E.type===TokenType.OPEN_PAREN&&E.text==="[",isComment=E=>E.type===TokenType.BLOCK_COMMENT||E.type===TokenType.LINE_COMMENT;class LexerAdapter{constructor(T){this.tokenize=T,this.index=0,this.tokens=[],this.input=""}reset(T,e){this.input=T,this.index=0,this.tokens=this.tokenize(T)}next(){return this.tokens[this.index++]}save(){}formatError(T){const{line:e,col:R}=lineColFromIndex(this.input,T.start);return`Parse error at token: ${T.text} at line ${e} column ${R}`}has(T){return T in TokenType}}var NodeType;(function(E){E.statement="statement",E.clause="clause",E.set_operation="set_operation",E.function_call="function_call",E.parameterized_data_type="parameterized_data_type",E.array_subscript="array_subscript",E.property_access="property_access",E.parenthesis="parenthesis",E.between_predicate="between_predicate",E.case_expression="case_expression",E.case_when="case_when",E.case_else="case_else",E.limit_clause="limit_clause",E.all_columns_asterisk="all_columns_asterisk",E.literal="literal",E.identifier="identifier",E.keyword="keyword",E.data_type="data_type",E.parameter="parameter",E.operator="operator",E.comma="comma",E.line_comment="line_comment",E.block_comment="block_comment",E.disable_comment="disable_comment"})(NodeType=NodeType||(NodeType={}));function id(E){return E[0]}const lexer=new LexerAdapter(E=>[]),unwrap=([[E]])=>E,toKeywordNode=E=>({type:NodeType.keyword,tokenType:E.type,text:E.text,raw:E.raw}),toDataTypeNode=E=>({type:NodeType.data_type,text:E.text,raw:E.raw}),addComments=(E,{leading:T,trailing:e})=>(T!=null&&T.length&&(E=Object.assign(Object.assign({},E),{leadingComments:T})),e!=null&&e.length&&(E=Object.assign(Object.assign({},E),{trailingComments:e})),E),addCommentsToArray=(E,{leading:T,trailing:e})=>{if(T!=null&&T.length){const[R,...A]=E;E=[addComments(R,{leading:T}),...A]}if(e!=null&&e.length){const R=E.slice(0,-1),A=E[E.length-1];E=[...R,addComments(A,{trailing:e})]}return E},grammar={Lexer:lexer,ParserRules:[{name:"main$ebnf$1",symbols:[]},{name:"main$ebnf$1",symbols:["main$ebnf$1","statement"],postprocess:E=>E[0].concat([E[1]])},{name:"main",symbols:["main$ebnf$1"],postprocess:([E])=>{const T=E[E.length-1];return T&&!T.hasSemicolon?T.children.length>0?E:E.slice(0,-1):E}},{name:"statement$subexpression$1",symbols:[lexer.has("DELIMITER")?{type:"DELIMITER"}:DELIMITER]},{name:"statement$subexpression$1",symbols:[lexer.has("EOF")?{type:"EOF"}:EOF]},{name:"statement",symbols:["expressions_or_clauses","statement$subexpression$1"],postprocess:([E,[T]])=>({type:NodeType.statement,children:E,hasSemicolon:T.type===TokenType.DELIMITER})},{name:"expressions_or_clauses$ebnf$1",symbols:[]},{name:"expressions_or_clauses$ebnf$1",symbols:["expressions_or_clauses$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"expressions_or_clauses$ebnf$2",symbols:[]},{name:"expressions_or_clauses$ebnf$2",symbols:["expressions_or_clauses$ebnf$2","clause"],postprocess:E=>E[0].concat([E[1]])},{name:"expressions_or_clauses",symbols:["expressions_or_clauses$ebnf$1","expressions_or_clauses$ebnf$2"],postprocess:([E,T])=>[...E,...T]},{name:"clause$subexpression$1",symbols:["limit_clause"]},{name:"clause$subexpression$1",symbols:["select_clause"]},{name:"clause$subexpression$1",symbols:["other_clause"]},{name:"clause$subexpression$1",symbols:["set_operation"]},{name:"clause",symbols:["clause$subexpression$1"],postprocess:unwrap},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["free_form_sql"]},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"limit_clause$ebnf$1$subexpression$1",symbols:[lexer.has("COMMA")?{type:"COMMA"}:COMMA,"limit_clause$ebnf$1$subexpression$1$ebnf$1"]},{name:"limit_clause$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1"],postprocess:id},{name:"limit_clause$ebnf$1",symbols:[],postprocess:()=>null},{name:"limit_clause",symbols:[lexer.has("LIMIT")?{type:"LIMIT"}:LIMIT,"_","expression_chain_","limit_clause$ebnf$1"],postprocess:([E,T,e,R])=>{if(R){const[A,O]=R;return{type:NodeType.limit_clause,limitKw:addComments(toKeywordNode(E),{trailing:T}),offset:e,count:O}}else return{type:NodeType.limit_clause,limitKw:addComments(toKeywordNode(E),{trailing:T}),count:e}}},{name:"select_clause$subexpression$1$ebnf$1",symbols:[]},{name:"select_clause$subexpression$1$ebnf$1",symbols:["select_clause$subexpression$1$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"select_clause$subexpression$1",symbols:["all_columns_asterisk","select_clause$subexpression$1$ebnf$1"]},{name:"select_clause$subexpression$1$ebnf$2",symbols:[]},{name:"select_clause$subexpression$1$ebnf$2",symbols:["select_clause$subexpression$1$ebnf$2","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"select_clause$subexpression$1",symbols:["asteriskless_free_form_sql","select_clause$subexpression$1$ebnf$2"]},{name:"select_clause",symbols:[lexer.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT,"select_clause$subexpression$1"],postprocess:([E,[T,e]])=>({type:NodeType.clause,nameKw:toKeywordNode(E),children:[T,...e]})},{name:"select_clause",symbols:[lexer.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT],postprocess:([E])=>({type:NodeType.clause,nameKw:toKeywordNode(E),children:[]})},{name:"all_columns_asterisk",symbols:[lexer.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK],postprocess:()=>({type:NodeType.all_columns_asterisk})},{name:"other_clause$ebnf$1",symbols:[]},{name:"other_clause$ebnf$1",symbols:["other_clause$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"other_clause",symbols:[lexer.has("RESERVED_CLAUSE")?{type:"RESERVED_CLAUSE"}:RESERVED_CLAUSE,"other_clause$ebnf$1"],postprocess:([E,T])=>({type:NodeType.clause,nameKw:toKeywordNode(E),children:T})},{name:"set_operation$ebnf$1",symbols:[]},{name:"set_operation$ebnf$1",symbols:["set_operation$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"set_operation",symbols:[lexer.has("RESERVED_SET_OPERATION")?{type:"RESERVED_SET_OPERATION"}:RESERVED_SET_OPERATION,"set_operation$ebnf$1"],postprocess:([E,T])=>({type:NodeType.set_operation,nameKw:toKeywordNode(E),children:T})},{name:"expression_chain_$ebnf$1",symbols:["expression_with_comments_"]},{name:"expression_chain_$ebnf$1",symbols:["expression_chain_$ebnf$1","expression_with_comments_"],postprocess:E=>E[0].concat([E[1]])},{name:"expression_chain_",symbols:["expression_chain_$ebnf$1"],postprocess:id},{name:"expression_chain$ebnf$1",symbols:[]},{name:"expression_chain$ebnf$1",symbols:["expression_chain$ebnf$1","_expression_with_comments"],postprocess:E=>E[0].concat([E[1]])},{name:"expression_chain",symbols:["expression","expression_chain$ebnf$1"],postprocess:([E,T])=>[E,...T]},{name:"andless_expression_chain$ebnf$1",symbols:[]},{name:"andless_expression_chain$ebnf$1",symbols:["andless_expression_chain$ebnf$1","_andless_expression_with_comments"],postprocess:E=>E[0].concat([E[1]])},{name:"andless_expression_chain",symbols:["andless_expression","andless_expression_chain$ebnf$1"],postprocess:([E,T])=>[E,...T]},{name:"expression_with_comments_",symbols:["expression","_"],postprocess:([E,T])=>addComments(E,{trailing:T})},{name:"_expression_with_comments",symbols:["_","expression"],postprocess:([E,T])=>addComments(T,{leading:E})},{name:"_andless_expression_with_comments",symbols:["_","andless_expression"],postprocess:([E,T])=>addComments(T,{leading:E})},{name:"free_form_sql$subexpression$1",symbols:["asteriskless_free_form_sql"]},{name:"free_form_sql$subexpression$1",symbols:["asterisk"]},{name:"free_form_sql",symbols:["free_form_sql$subexpression$1"],postprocess:unwrap},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["asteriskless_andless_expression"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["logic_operator"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comma"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comment"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["other_keyword"]},{name:"asteriskless_free_form_sql",symbols:["asteriskless_free_form_sql$subexpression$1"],postprocess:unwrap},{name:"expression$subexpression$1",symbols:["andless_expression"]},{name:"expression$subexpression$1",symbols:["logic_operator"]},{name:"expression",symbols:["expression$subexpression$1"],postprocess:unwrap},{name:"andless_expression$subexpression$1",symbols:["asteriskless_andless_expression"]},{name:"andless_expression$subexpression$1",symbols:["asterisk"]},{name:"andless_expression",symbols:["andless_expression$subexpression$1"],postprocess:unwrap},{name:"asteriskless_andless_expression$subexpression$1",symbols:["atomic_expression"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["between_predicate"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["case_expression"]},{name:"asteriskless_andless_expression",symbols:["asteriskless_andless_expression$subexpression$1"],postprocess:unwrap},{name:"atomic_expression$subexpression$1",symbols:["array_subscript"]},{name:"atomic_expression$subexpression$1",symbols:["function_call"]},{name:"atomic_expression$subexpression$1",symbols:["property_access"]},{name:"atomic_expression$subexpression$1",symbols:["parenthesis"]},{name:"atomic_expression$subexpression$1",symbols:["curly_braces"]},{name:"atomic_expression$subexpression$1",symbols:["square_brackets"]},{name:"atomic_expression$subexpression$1",symbols:["operator"]},{name:"atomic_expression$subexpression$1",symbols:["identifier"]},{name:"atomic_expression$subexpression$1",symbols:["parameter"]},{name:"atomic_expression$subexpression$1",symbols:["literal"]},{name:"atomic_expression$subexpression$1",symbols:["data_type"]},{name:"atomic_expression$subexpression$1",symbols:["keyword"]},{name:"atomic_expression",symbols:["atomic_expression$subexpression$1"],postprocess:unwrap},{name:"array_subscript",symbols:[lexer.has("ARRAY_IDENTIFIER")?{type:"ARRAY_IDENTIFIER"}:ARRAY_IDENTIFIER,"_","square_brackets"],postprocess:([E,T,e])=>({type:NodeType.array_subscript,array:addComments({type:NodeType.identifier,quoted:!1,text:E.text},{trailing:T}),parenthesis:e})},{name:"array_subscript",symbols:[lexer.has("ARRAY_KEYWORD")?{type:"ARRAY_KEYWORD"}:ARRAY_KEYWORD,"_","square_brackets"],postprocess:([E,T,e])=>({type:NodeType.array_subscript,array:addComments(toKeywordNode(E),{trailing:T}),parenthesis:e})},{name:"function_call",symbols:[lexer.has("RESERVED_FUNCTION_NAME")?{type:"RESERVED_FUNCTION_NAME"}:RESERVED_FUNCTION_NAME,"_","parenthesis"],postprocess:([E,T,e])=>({type:NodeType.function_call,nameKw:addComments(toKeywordNode(E),{trailing:T}),parenthesis:e})},{name:"parenthesis",symbols:[{literal:"("},"expressions_or_clauses",{literal:")"}],postprocess:([E,T,e])=>({type:NodeType.parenthesis,children:T,openParen:"(",closeParen:")"})},{name:"curly_braces$ebnf$1",symbols:[]},{name:"curly_braces$ebnf$1",symbols:["curly_braces$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"curly_braces",symbols:[{literal:"{"},"curly_braces$ebnf$1",{literal:"}"}],postprocess:([E,T,e])=>({type:NodeType.parenthesis,children:T,openParen:"{",closeParen:"}"})},{name:"square_brackets$ebnf$1",symbols:[]},{name:"square_brackets$ebnf$1",symbols:["square_brackets$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"square_brackets",symbols:[{literal:"["},"square_brackets$ebnf$1",{literal:"]"}],postprocess:([E,T,e])=>({type:NodeType.parenthesis,children:T,openParen:"[",closeParen:"]"})},{name:"property_access$subexpression$1",symbols:["identifier"]},{name:"property_access$subexpression$1",symbols:["array_subscript"]},{name:"property_access$subexpression$1",symbols:["all_columns_asterisk"]},{name:"property_access$subexpression$1",symbols:["parameter"]},{name:"property_access",symbols:["atomic_expression","_",lexer.has("PROPERTY_ACCESS_OPERATOR")?{type:"PROPERTY_ACCESS_OPERATOR"}:PROPERTY_ACCESS_OPERATOR,"_","property_access$subexpression$1"],postprocess:([E,T,e,R,[A]])=>({type:NodeType.property_access,object:addComments(E,{trailing:T}),operator:e.text,property:addComments(A,{leading:R})})},{name:"between_predicate",symbols:[lexer.has("BETWEEN")?{type:"BETWEEN"}:BETWEEN,"_","andless_expression_chain","_",lexer.has("AND")?{type:"AND"}:AND,"_","andless_expression"],postprocess:([E,T,e,R,A,O,S])=>({type:NodeType.between_predicate,betweenKw:toKeywordNode(E),expr1:addCommentsToArray(e,{leading:T,trailing:R}),andKw:toKeywordNode(A),expr2:[addComments(S,{leading:O})]})},{name:"case_expression$ebnf$1",symbols:["expression_chain_"],postprocess:id},{name:"case_expression$ebnf$1",symbols:[],postprocess:()=>null},{name:"case_expression$ebnf$2",symbols:[]},{name:"case_expression$ebnf$2",symbols:["case_expression$ebnf$2","case_clause"],postprocess:E=>E[0].concat([E[1]])},{name:"case_expression",symbols:[lexer.has("CASE")?{type:"CASE"}:CASE,"_","case_expression$ebnf$1","case_expression$ebnf$2",lexer.has("END")?{type:"END"}:END],postprocess:([E,T,e,R,A])=>({type:NodeType.case_expression,caseKw:addComments(toKeywordNode(E),{trailing:T}),endKw:toKeywordNode(A),expr:e||[],clauses:R})},{name:"case_clause",symbols:[lexer.has("WHEN")?{type:"WHEN"}:WHEN,"_","expression_chain_",lexer.has("THEN")?{type:"THEN"}:THEN,"_","expression_chain_"],postprocess:([E,T,e,R,A,O])=>({type:NodeType.case_when,whenKw:addComments(toKeywordNode(E),{trailing:T}),thenKw:addComments(toKeywordNode(R),{trailing:A}),condition:e,result:O})},{name:"case_clause",symbols:[lexer.has("ELSE")?{type:"ELSE"}:ELSE,"_","expression_chain_"],postprocess:([E,T,e])=>({type:NodeType.case_else,elseKw:addComments(toKeywordNode(E),{trailing:T}),result:e})},{name:"comma$subexpression$1",symbols:[lexer.has("COMMA")?{type:"COMMA"}:COMMA]},{name:"comma",symbols:["comma$subexpression$1"],postprocess:([[E]])=>({type:NodeType.comma})},{name:"asterisk$subexpression$1",symbols:[lexer.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK]},{name:"asterisk",symbols:["asterisk$subexpression$1"],postprocess:([[E]])=>({type:NodeType.operator,text:E.text})},{name:"operator$subexpression$1",symbols:[lexer.has("OPERATOR")?{type:"OPERATOR"}:OPERATOR]},{name:"operator",symbols:["operator$subexpression$1"],postprocess:([[E]])=>({type:NodeType.operator,text:E.text})},{name:"identifier$subexpression$1",symbols:[lexer.has("IDENTIFIER")?{type:"IDENTIFIER"}:IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[lexer.has("QUOTED_IDENTIFIER")?{type:"QUOTED_IDENTIFIER"}:QUOTED_IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[lexer.has("VARIABLE")?{type:"VARIABLE"}:VARIABLE]},{name:"identifier",symbols:["identifier$subexpression$1"],postprocess:([[E]])=>({type:NodeType.identifier,quoted:E.type!=="IDENTIFIER",text:E.text})},{name:"parameter$subexpression$1",symbols:[lexer.has("NAMED_PARAMETER")?{type:"NAMED_PARAMETER"}:NAMED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[lexer.has("QUOTED_PARAMETER")?{type:"QUOTED_PARAMETER"}:QUOTED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[lexer.has("NUMBERED_PARAMETER")?{type:"NUMBERED_PARAMETER"}:NUMBERED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[lexer.has("POSITIONAL_PARAMETER")?{type:"POSITIONAL_PARAMETER"}:POSITIONAL_PARAMETER]},{name:"parameter$subexpression$1",symbols:[lexer.has("CUSTOM_PARAMETER")?{type:"CUSTOM_PARAMETER"}:CUSTOM_PARAMETER]},{name:"parameter",symbols:["parameter$subexpression$1"],postprocess:([[E]])=>({type:NodeType.parameter,key:E.key,text:E.text})},{name:"literal$subexpression$1",symbols:[lexer.has("NUMBER")?{type:"NUMBER"}:NUMBER]},{name:"literal$subexpression$1",symbols:[lexer.has("STRING")?{type:"STRING"}:STRING]},{name:"literal",symbols:["literal$subexpression$1"],postprocess:([[E]])=>({type:NodeType.literal,text:E.text})},{name:"keyword$subexpression$1",symbols:[lexer.has("RESERVED_KEYWORD")?{type:"RESERVED_KEYWORD"}:RESERVED_KEYWORD]},{name:"keyword$subexpression$1",symbols:[lexer.has("RESERVED_KEYWORD_PHRASE")?{type:"RESERVED_KEYWORD_PHRASE"}:RESERVED_KEYWORD_PHRASE]},{name:"keyword$subexpression$1",symbols:[lexer.has("RESERVED_JOIN")?{type:"RESERVED_JOIN"}:RESERVED_JOIN]},{name:"keyword",symbols:["keyword$subexpression$1"],postprocess:([[E]])=>toKeywordNode(E)},{name:"data_type$subexpression$1",symbols:[lexer.has("RESERVED_DATA_TYPE")?{type:"RESERVED_DATA_TYPE"}:RESERVED_DATA_TYPE]},{name:"data_type$subexpression$1",symbols:[lexer.has("RESERVED_DATA_TYPE_PHRASE")?{type:"RESERVED_DATA_TYPE_PHRASE"}:RESERVED_DATA_TYPE_PHRASE]},{name:"data_type",symbols:["data_type$subexpression$1"],postprocess:([[E]])=>toDataTypeNode(E)},{name:"data_type",symbols:[lexer.has("RESERVED_PARAMETERIZED_DATA_TYPE")?{type:"RESERVED_PARAMETERIZED_DATA_TYPE"}:RESERVED_PARAMETERIZED_DATA_TYPE,"_","parenthesis"],postprocess:([E,T,e])=>({type:NodeType.parameterized_data_type,dataType:addComments(toDataTypeNode(E),{trailing:T}),parenthesis:e})},{name:"logic_operator$subexpression$1",symbols:[lexer.has("AND")?{type:"AND"}:AND]},{name:"logic_operator$subexpression$1",symbols:[lexer.has("OR")?{type:"OR"}:OR]},{name:"logic_operator$subexpression$1",symbols:[lexer.has("XOR")?{type:"XOR"}:XOR]},{name:"logic_operator",symbols:["logic_operator$subexpression$1"],postprocess:([[E]])=>toKeywordNode(E)},{name:"other_keyword$subexpression$1",symbols:[lexer.has("WHEN")?{type:"WHEN"}:WHEN]},{name:"other_keyword$subexpression$1",symbols:[lexer.has("THEN")?{type:"THEN"}:THEN]},{name:"other_keyword$subexpression$1",symbols:[lexer.has("ELSE")?{type:"ELSE"}:ELSE]},{name:"other_keyword$subexpression$1",symbols:[lexer.has("END")?{type:"END"}:END]},{name:"other_keyword",symbols:["other_keyword$subexpression$1"],postprocess:([[E]])=>toKeywordNode(E)},{name:"_$ebnf$1",symbols:[]},{name:"_$ebnf$1",symbols:["_$ebnf$1","comment"],postprocess:E=>E[0].concat([E[1]])},{name:"_",symbols:["_$ebnf$1"],postprocess:([E])=>E},{name:"comment",symbols:[lexer.has("LINE_COMMENT")?{type:"LINE_COMMENT"}:LINE_COMMENT],postprocess:([E])=>({type:NodeType.line_comment,text:E.text,precedingWhitespace:E.precedingWhitespace})},{name:"comment",symbols:[lexer.has("BLOCK_COMMENT")?{type:"BLOCK_COMMENT"}:BLOCK_COMMENT],postprocess:([E])=>({type:NodeType.block_comment,text:E.text,precedingWhitespace:E.precedingWhitespace})},{name:"comment",symbols:[lexer.has("DISABLE_COMMENT")?{type:"DISABLE_COMMENT"}:DISABLE_COMMENT],postprocess:([E])=>({type:NodeType.disable_comment,text:E.text,precedingWhitespace:E.precedingWhitespace})}],ParserStart:"main"},{Parser:NearleyParser,Grammar}=nearley;function createParser(E){let T={};const e=new LexerAdapter(A=>[...disambiguateTokens(E.tokenize(A,T)),createEofToken(A.length)]),R=new NearleyParser(Grammar.fromCompiled(grammar),{lexer:e});return{parse:(A,O)=>{T=O;const{results:S}=R.feed(A);if(S.length===1)return S[0];throw S.length===0?new Error("Parse error: Invalid SQL"):new Error(`Parse error: Ambiguous grammar
${JSON.stringify(S,void 0,2)}`)}}}var WS;(function(E){E[E.SPACE=0]="SPACE",E[E.NO_SPACE=1]="NO_SPACE",E[E.NO_NEWLINE=2]="NO_NEWLINE",E[E.NEWLINE=3]="NEWLINE",E[E.MANDATORY_NEWLINE=4]="MANDATORY_NEWLINE",E[E.INDENT=5]="INDENT",E[E.SINGLE_INDENT=6]="SINGLE_INDENT"})(WS=WS||(WS={}));class Layout{constructor(T){this.indentation=T,this.items=[]}add(...T){for(const e of T)switch(e){case WS.SPACE:this.items.push(WS.SPACE);break;case WS.NO_SPACE:this.trimHorizontalWhitespace();break;case WS.NO_NEWLINE:this.trimWhitespace();break;case WS.NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(WS.NEWLINE);break;case WS.MANDATORY_NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(WS.MANDATORY_NEWLINE);break;case WS.INDENT:this.addIndentation();break;case WS.SINGLE_INDENT:this.items.push(WS.SINGLE_INDENT);break;default:this.items.push(e)}}trimHorizontalWhitespace(){for(;isHorizontalWhitespace(last(this.items));)this.items.pop()}trimWhitespace(){for(;isRemovableWhitespace(last(this.items));)this.items.pop()}addNewline(T){if(this.items.length>0)switch(last(this.items)){case WS.NEWLINE:this.items.pop(),this.items.push(T);break;case WS.MANDATORY_NEWLINE:break;default:this.items.push(T);break}}addIndentation(){for(let T=0;T<this.indentation.getLevel();T++)this.items.push(WS.SINGLE_INDENT)}toString(){return this.items.map(T=>this.itemToString(T)).join("")}getLayoutItems(){return this.items}itemToString(T){switch(T){case WS.SPACE:return" ";case WS.NEWLINE:case WS.MANDATORY_NEWLINE:return`
`;case WS.SINGLE_INDENT:return this.indentation.getSingleIndent();default:return T}}}const isHorizontalWhitespace=E=>E===WS.SPACE||E===WS.SINGLE_INDENT,isRemovableWhitespace=E=>E===WS.SPACE||E===WS.SINGLE_INDENT||E===WS.NEWLINE;function toTabularFormat(E,T){if(T==="standard")return E;let e=[];return E.length>=10&&E.includes(" ")&&([E,...e]=E.split(" ")),T==="tabularLeft"?E=E.padEnd(9," "):E=E.padStart(9," "),E+["",...e].join(" ")}function isTabularToken(E){return isLogicalOperator(E)||E===TokenType.RESERVED_CLAUSE||E===TokenType.RESERVED_SELECT||E===TokenType.RESERVED_SET_OPERATION||E===TokenType.RESERVED_JOIN||E===TokenType.LIMIT}const INDENT_TYPE_TOP_LEVEL="top-level",INDENT_TYPE_BLOCK_LEVEL="block-level";class Indentation{constructor(T){this.indent=T,this.indentTypes=[]}getSingleIndent(){return this.indent}getLevel(){return this.indentTypes.length}increaseTopLevel(){this.indentTypes.push(INDENT_TYPE_TOP_LEVEL)}increaseBlockLevel(){this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL)}decreaseTopLevel(){this.indentTypes.length>0&&last(this.indentTypes)===INDENT_TYPE_TOP_LEVEL&&this.indentTypes.pop()}decreaseBlockLevel(){for(;this.indentTypes.length>0&&this.indentTypes.pop()===INDENT_TYPE_TOP_LEVEL;);}}class InlineLayout extends Layout{constructor(T){super(new Indentation("")),this.expressionWidth=T,this.length=0,this.trailingSpace=!1}add(...T){if(T.forEach(e=>this.addToLength(e)),this.length>this.expressionWidth)throw new InlineLayoutError;super.add(...T)}addToLength(T){if(typeof T=="string")this.length+=T.length,this.trailingSpace=!1;else{if(T===WS.MANDATORY_NEWLINE||T===WS.NEWLINE)throw new InlineLayoutError;T===WS.INDENT||T===WS.SINGLE_INDENT||T===WS.SPACE?this.trailingSpace||(this.length++,this.trailingSpace=!0):(T===WS.NO_NEWLINE||T===WS.NO_SPACE)&&this.trailingSpace&&(this.trailingSpace=!1,this.length--)}}}class InlineLayoutError extends Error{}class ExpressionFormatter{constructor({cfg:T,dialectCfg:e,params:R,layout:A,inline:O=!1}){this.inline=!1,this.nodes=[],this.index=-1,this.cfg=T,this.dialectCfg=e,this.inline=O,this.params=R,this.layout=A}format(T){for(this.nodes=T,this.index=0;this.index<this.nodes.length;this.index++)this.formatNode(this.nodes[this.index]);return this.layout}formatNode(T){this.formatComments(T.leadingComments),this.formatNodeWithoutComments(T),this.formatComments(T.trailingComments)}formatNodeWithoutComments(T){switch(T.type){case NodeType.function_call:return this.formatFunctionCall(T);case NodeType.parameterized_data_type:return this.formatParameterizedDataType(T);case NodeType.array_subscript:return this.formatArraySubscript(T);case NodeType.property_access:return this.formatPropertyAccess(T);case NodeType.parenthesis:return this.formatParenthesis(T);case NodeType.between_predicate:return this.formatBetweenPredicate(T);case NodeType.case_expression:return this.formatCaseExpression(T);case NodeType.case_when:return this.formatCaseWhen(T);case NodeType.case_else:return this.formatCaseElse(T);case NodeType.clause:return this.formatClause(T);case NodeType.set_operation:return this.formatSetOperation(T);case NodeType.limit_clause:return this.formatLimitClause(T);case NodeType.all_columns_asterisk:return this.formatAllColumnsAsterisk(T);case NodeType.literal:return this.formatLiteral(T);case NodeType.identifier:return this.formatIdentifier(T);case NodeType.parameter:return this.formatParameter(T);case NodeType.operator:return this.formatOperator(T);case NodeType.comma:return this.formatComma(T);case NodeType.line_comment:return this.formatLineComment(T);case NodeType.block_comment:return this.formatBlockComment(T);case NodeType.disable_comment:return this.formatBlockComment(T);case NodeType.data_type:return this.formatDataType(T);case NodeType.keyword:return this.formatKeywordNode(T)}}formatFunctionCall(T){this.withComments(T.nameKw,()=>{this.layout.add(this.showFunctionKw(T.nameKw))}),this.formatNode(T.parenthesis)}formatParameterizedDataType(T){this.withComments(T.dataType,()=>{this.layout.add(this.showDataType(T.dataType))}),this.formatNode(T.parenthesis)}formatArraySubscript(T){let e;switch(T.array.type){case NodeType.data_type:e=this.showDataType(T.array);break;case NodeType.keyword:e=this.showKw(T.array);break;default:e=this.showIdentifier(T.array);break}this.withComments(T.array,()=>{this.layout.add(e)}),this.formatNode(T.parenthesis)}formatPropertyAccess(T){this.formatNode(T.object),this.layout.add(WS.NO_SPACE,T.operator),this.formatNode(T.property)}formatParenthesis(T){const e=this.formatInlineExpression(T.children);e?(this.layout.add(T.openParen),this.layout.add(...e.getLayoutItems()),this.layout.add(WS.NO_SPACE,T.closeParen,WS.SPACE)):(this.layout.add(T.openParen,WS.NEWLINE),isTabularStyle(this.cfg)?(this.layout.add(WS.INDENT),this.layout=this.formatSubExpression(T.children)):(this.layout.indentation.increaseBlockLevel(),this.layout.add(WS.INDENT),this.layout=this.formatSubExpression(T.children),this.layout.indentation.decreaseBlockLevel()),this.layout.add(WS.NEWLINE,WS.INDENT,T.closeParen,WS.SPACE))}formatBetweenPredicate(T){this.layout.add(this.showKw(T.betweenKw),WS.SPACE),this.layout=this.formatSubExpression(T.expr1),this.layout.add(WS.NO_SPACE,WS.SPACE,this.showNonTabularKw(T.andKw),WS.SPACE),this.layout=this.formatSubExpression(T.expr2),this.layout.add(WS.SPACE)}formatCaseExpression(T){this.formatNode(T.caseKw),this.layout.indentation.increaseBlockLevel(),this.layout=this.formatSubExpression(T.expr),this.layout=this.formatSubExpression(T.clauses),this.layout.indentation.decreaseBlockLevel(),this.layout.add(WS.NEWLINE,WS.INDENT),this.formatNode(T.endKw)}formatCaseWhen(T){this.layout.add(WS.NEWLINE,WS.INDENT),this.formatNode(T.whenKw),this.layout=this.formatSubExpression(T.condition),this.formatNode(T.thenKw),this.layout=this.formatSubExpression(T.result)}formatCaseElse(T){this.layout.add(WS.NEWLINE,WS.INDENT),this.formatNode(T.elseKw),this.layout=this.formatSubExpression(T.result)}formatClause(T){this.isOnelineClause(T)?this.formatClauseInOnelineStyle(T):isTabularStyle(this.cfg)?this.formatClauseInTabularStyle(T):this.formatClauseInIndentedStyle(T)}isOnelineClause(T){return isTabularStyle(this.cfg)?this.dialectCfg.tabularOnelineClauses[T.nameKw.text]:this.dialectCfg.onelineClauses[T.nameKw.text]}formatClauseInIndentedStyle(T){this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T.nameKw),WS.NEWLINE),this.layout.indentation.increaseTopLevel(),this.layout.add(WS.INDENT),this.layout=this.formatSubExpression(T.children),this.layout.indentation.decreaseTopLevel()}formatClauseInOnelineStyle(T){this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T.nameKw),WS.SPACE),this.layout=this.formatSubExpression(T.children)}formatClauseInTabularStyle(T){this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T.nameKw),WS.SPACE),this.layout.indentation.increaseTopLevel(),this.layout=this.formatSubExpression(T.children),this.layout.indentation.decreaseTopLevel()}formatSetOperation(T){this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T.nameKw),WS.NEWLINE),this.layout.add(WS.INDENT),this.layout=this.formatSubExpression(T.children)}formatLimitClause(T){this.withComments(T.limitKw,()=>{this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T.limitKw))}),this.layout.indentation.increaseTopLevel(),isTabularStyle(this.cfg)?this.layout.add(WS.SPACE):this.layout.add(WS.NEWLINE,WS.INDENT),T.offset?(this.layout=this.formatSubExpression(T.offset),this.layout.add(WS.NO_SPACE,",",WS.SPACE),this.layout=this.formatSubExpression(T.count)):this.layout=this.formatSubExpression(T.count),this.layout.indentation.decreaseTopLevel()}formatAllColumnsAsterisk(T){this.layout.add("*",WS.SPACE)}formatLiteral(T){this.layout.add(T.text,WS.SPACE)}formatIdentifier(T){this.layout.add(this.showIdentifier(T),WS.SPACE)}formatParameter(T){this.layout.add(this.params.get(T),WS.SPACE)}formatOperator({text:T}){this.cfg.denseOperators||this.dialectCfg.alwaysDenseOperators.includes(T)?this.layout.add(WS.NO_SPACE,T):T===":"?this.layout.add(WS.NO_SPACE,T,WS.SPACE):this.layout.add(T,WS.SPACE)}formatComma(T){this.inline?this.layout.add(WS.NO_SPACE,",",WS.SPACE):this.layout.add(WS.NO_SPACE,",",WS.NEWLINE,WS.INDENT)}withComments(T,e){this.formatComments(T.leadingComments),e(),this.formatComments(T.trailingComments)}formatComments(T){T&&T.forEach(e=>{e.type===NodeType.line_comment?this.formatLineComment(e):this.formatBlockComment(e)})}formatLineComment(T){isMultiline(T.precedingWhitespace||"")?this.layout.add(WS.NEWLINE,WS.INDENT,T.text,WS.MANDATORY_NEWLINE,WS.INDENT):this.layout.getLayoutItems().length>0?this.layout.add(WS.NO_NEWLINE,WS.SPACE,T.text,WS.MANDATORY_NEWLINE,WS.INDENT):this.layout.add(T.text,WS.MANDATORY_NEWLINE,WS.INDENT)}formatBlockComment(T){T.type===NodeType.block_comment&&this.isMultilineBlockComment(T)?(this.splitBlockComment(T.text).forEach(e=>{this.layout.add(WS.NEWLINE,WS.INDENT,e)}),this.layout.add(WS.NEWLINE,WS.INDENT)):this.layout.add(T.text,WS.SPACE)}isMultilineBlockComment(T){return isMultiline(T.text)||isMultiline(T.precedingWhitespace||"")}isDocComment(T){const e=T.split(/\n/);return/^\/\*\*?$/.test(e[0])&&e.slice(1,e.length-1).every(R=>/^\s*\*/.test(R))&&/^\s*\*\/$/.test(last(e))}splitBlockComment(T){return this.isDocComment(T)?T.split(/\n/).map(e=>/^\s*\*/.test(e)?" "+e.replace(/^\s*/,""):e):T.split(/\n/).map(e=>e.replace(/^\s*/,""))}formatSubExpression(T){return new ExpressionFormatter({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:this.layout,inline:this.inline}).format(T)}formatInlineExpression(T){const e=this.params.getPositionalParameterIndex();try{return new ExpressionFormatter({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:new InlineLayout(this.cfg.expressionWidth),inline:!0}).format(T)}catch(R){if(R instanceof InlineLayoutError){this.params.setPositionalParameterIndex(e);return}else throw R}}formatKeywordNode(T){switch(T.tokenType){case TokenType.RESERVED_JOIN:return this.formatJoin(T);case TokenType.AND:case TokenType.OR:case TokenType.XOR:return this.formatLogicalOperator(T);default:return this.formatKeyword(T)}}formatJoin(T){isTabularStyle(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T),WS.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T),WS.SPACE)}formatKeyword(T){this.layout.add(this.showKw(T),WS.SPACE)}formatLogicalOperator(T){this.cfg.logicalOperatorNewline==="before"?isTabularStyle(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T),WS.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(WS.NEWLINE,WS.INDENT,this.showKw(T),WS.SPACE):this.layout.add(this.showKw(T),WS.NEWLINE,WS.INDENT)}formatDataType(T){this.layout.add(this.showDataType(T),WS.SPACE)}showKw(T){return isTabularToken(T.tokenType)?toTabularFormat(this.showNonTabularKw(T),this.cfg.indentStyle):this.showNonTabularKw(T)}showNonTabularKw(T){switch(this.cfg.keywordCase){case"preserve":return equalizeWhitespace(T.raw);case"upper":return T.text;case"lower":return T.text.toLowerCase()}}showFunctionKw(T){return isTabularToken(T.tokenType)?toTabularFormat(this.showNonTabularFunctionKw(T),this.cfg.indentStyle):this.showNonTabularFunctionKw(T)}showNonTabularFunctionKw(T){switch(this.cfg.functionCase){case"preserve":return equalizeWhitespace(T.raw);case"upper":return T.text;case"lower":return T.text.toLowerCase()}}showIdentifier(T){if(T.quoted)return T.text;switch(this.cfg.identifierCase){case"preserve":return T.text;case"upper":return T.text.toUpperCase();case"lower":return T.text.toLowerCase()}}showDataType(T){switch(this.cfg.dataTypeCase){case"preserve":return equalizeWhitespace(T.raw);case"upper":return T.text;case"lower":return T.text.toLowerCase()}}}class Formatter{constructor(T,e){this.dialect=T,this.cfg=e,this.params=new Params(this.cfg.params)}format(T){const e=this.parse(T);return this.formatAst(e).trimEnd()}parse(T){return createParser(this.dialect.tokenizer).parse(T,this.cfg.paramTypes||{})}formatAst(T){return T.map(e=>this.formatStatement(e)).join(`
`.repeat(this.cfg.linesBetweenQueries+1))}formatStatement(T){const e=new ExpressionFormatter({cfg:this.cfg,dialectCfg:this.dialect.formatOptions,params:this.params,layout:new Layout(new Indentation(indentString(this.cfg)))}).format(T.children);return T.hasSemicolon&&(this.cfg.newlineBeforeSemicolon?e.add(WS.NEWLINE,";"):e.add(WS.NO_NEWLINE,";")),e.toString()}}class ConfigError extends Error{}function validateConfig(E){const T=["multilineLists","newlineBeforeOpenParen","newlineBeforeCloseParen","aliasAs","commaPosition","tabulateAlias"];for(const e of T)if(e in E)throw new ConfigError(`${e} config is no more supported.`);if(E.expressionWidth<=0)throw new ConfigError(`expressionWidth config must be positive number. Received ${E.expressionWidth} instead.`);if(E.params&&!validateParams(E.params)&&console.warn('WARNING: All "params" option values should be strings.'),E.paramTypes&&!validateParamTypes(E.paramTypes))throw new ConfigError("Empty regex given in custom paramTypes. That would result in matching infinite amount of parameters.");return E}function validateParams(E){return(E instanceof Array?E:Object.values(E)).every(e=>typeof e=="string")}function validateParamTypes(E){return E.custom&&Array.isArray(E.custom)?E.custom.every(T=>T.regex!==""):!0}var __rest=function(E,T){var e={};for(var R in E)Object.prototype.hasOwnProperty.call(E,R)&&T.indexOf(R)<0&&(e[R]=E[R]);if(E!=null&&typeof Object.getOwnPropertySymbols=="function")for(var A=0,R=Object.getOwnPropertySymbols(E);A<R.length;A++)T.indexOf(R[A])<0&&Object.prototype.propertyIsEnumerable.call(E,R[A])&&(e[R[A]]=E[R[A]]);return e};const dialectNameMap={bigquery:"bigquery",db2:"db2",db2i:"db2i",duckdb:"duckdb",hive:"hive",mariadb:"mariadb",mysql:"mysql",n1ql:"n1ql",plsql:"plsql",postgresql:"postgresql",redshift:"redshift",spark:"spark",sqlite:"sqlite",sql:"sql",tidb:"tidb",trino:"trino",transactsql:"transactsql",tsql:"transactsql",singlestoredb:"singlestoredb",snowflake:"snowflake"},supportedDialects=Object.keys(dialectNameMap),defaultOptions={tabWidth:2,useTabs:!1,keywordCase:"preserve",identifierCase:"preserve",dataTypeCase:"preserve",functionCase:"preserve",indentStyle:"standard",logicalOperatorNewline:"before",expressionWidth:50,linesBetweenQueries:1,denseOperators:!1,newlineBeforeSemicolon:!1},format=(E,T={})=>{if(typeof T.language=="string"&&!supportedDialects.includes(T.language))throw new ConfigError(`Unsupported SQL dialect: ${T.language}`);const e=dialectNameMap[T.language||"sql"];return formatDialect(E,Object.assign(Object.assign({},T),{dialect:allDialects[e]}))},formatDialect=(E,T)=>{var{dialect:e}=T,R=__rest(T,["dialect"]);if(typeof E!="string")throw new Error("Invalid query argument. Expected string, instead got "+typeof E);const A=validateConfig(Object.assign(Object.assign({},defaultOptions),R));return new Formatter(createDialect(e),A).format(E)};function sqlFormat(E){try{return format(E,{language:"sql",tabWidth:2,keywordCase:"upper",dataTypeCase:"upper",functionCase:"lower",logicalOperatorNewline:"after",expressionWidth:120,linesBetweenQueries:1})}catch(T){throw console.error("SQL格式化失败:",T),new Error(`SQL格式化失败: ${T instanceof Error?T.message:"未知错误"}`)}}function sqlCompress(E){try{if(!E||E.trim()==="")return"";let T=sqlFormat(E);T=T.replace(/\/\*[\s\S]*?\*\//g,""),T=T.replace(/--.*$/gm,"");const e=[];return T=T.replace(/'(?:[^'\\]|\\.)*'/g,R=>{const A=`__STRING_PLACEHOLDER_${e.length}__`;return e.push(R),A}),T=T.replace(/[\n\t\r]+/g," "),T=T.replace(/\s+/g," "),T=T.trim(),e.forEach((R,A)=>{T=T.replace(`__STRING_PLACEHOLDER_${A}__`,R)}),T}catch(T){throw console.error("SQL压缩失败:",T),new Error(`SQL压缩失败: ${T instanceof Error?T.message:"未知错误"}`)}}function urlEncode(E){try{return encodeURIComponent(E)}catch(T){throw new Error(`URL编码失败: ${T instanceof Error?T.message:"未知错误"}`)}}function urlDecode(E){try{return decodeURIComponent(E)}catch(T){throw new Error(`URL解码失败: ${T instanceof Error?T.message:"未知错误"}`)}}function cspParse(E){try{let T=E.trim();T.startsWith("Content-Security-Policy:")&&(T=T.replace("Content-Security-Policy:","").trim());const e={},R=T.split(";");for(const A of R){const O=A.trim();if(!O)continue;const S=O.split(/\s+/);if(S.length<1)continue;const N=S[0],n=S.slice(1),I=[];let r=null,t=null;for(const s of n)!r&&(s.startsWith("'")||s.startsWith('"'))?(t=s[0],s.endsWith(t)?I.push(s):r=s):r?s.endsWith(t)?(r+=" "+s,I.push(r),r=null,t=null):r+=" "+s:I.push(s);I.length>0&&(e[N]=I)}return JSON.stringify(e,null,2)}catch(T){throw new Error(`CSP解析失败: ${T instanceof Error?T.message:"未知错误"}`)}}function cspUnparse(E){try{const T=JSON.parse(E),e=[];for(const[A,O]of Object.entries(T))if(Array.isArray(O)&&O.length>0){const S=`${A} ${O.join(" ")}`;e.push(S)}return`Content-Security-Policy: ${e.join("; ")}`}catch(T){throw new Error(`CSP逆解析失败: ${T instanceof Error?T.message:"未知错误"}`)}}function httpCacheAnalyze(E){try{const T={summary:"",details:[],headers:{}},e={},R=E.trim().split(`
`);for(const s of R){const L=s.match(/^([^:]+):\s*(.*)$/);if(L){const[,o,P]=L;e[o.toLowerCase()]=P}}const A=e["cache-control"]||"",O=e.expires||"",S=e["last-modified"]||"",N=e.etag||"";T.headers={"Cache-Control":A,Expires:O,"Last-Modified":S,ETag:N};const n=[];let I="无缓存",r="";if(A){const s=A.split(",").map(L=>L.trim());if(s.includes("no-store"))n.push("设置了 no-store: 不允许缓存任何响应内容"),I="禁止缓存";else if(s.includes("no-cache"))n.push("设置了 no-cache: 可以缓存，但使用前必须验证有效性"),I="验证缓存";else{const L=s.find(P=>P.startsWith("max-age="));if(L){const P=parseInt(L.split("=")[1]);r=formatDuration$1(P),n.push(`设置了 Cache-Control: Max-Age=${P} - 响应可以缓存 ${r}`),I="强缓存"}const o=s.find(P=>P.startsWith("s-maxage="));if(o){const P=parseInt(o.split("=")[1]);n.push(`设置了 s-maxage=${P}: 共享缓存可以缓存 ${formatDuration$1(P)}`)}s.includes("public")?n.push("设置了 public: 响应可以被任何缓存存储"):s.includes("private")&&n.push("设置了 private: 响应只能被单个用户的浏览器缓存")}}if(O&&I!=="禁止缓存")try{const s=new Date(O),L=new Date,o=Math.floor((s.getTime()-L.getTime())/1e3);o>0?(n.push(`设置了 Expires: 响应将在 ${O} 过期（${formatDuration$1(o)}后）`),I==="无缓存"&&(I="强缓存",r=formatDuration$1(o))):n.push(`设置了 Expires: 响应已过期（过期时间：${O}）`)}catch(s){n.push(`Expires 日期格式无效: ${O} ${s instanceof Error?s.message:"未知错误"}`)}(S||N)&&I!=="禁止缓存"&&(I==="无缓存"&&(I="验证缓存"),S&&n.push(`设置了 Last-Modified: 服务器资源最后修改时间为 ${S}`),N&&n.push(`设置了 ETag: 资源标识为 ${N}`));let t=`缓存策略: ${I}`;return r&&(t+=`，有效期: ${r}`),I==="验证缓存"&&(t+="。使用前需要向服务器验证资源是否发生变化。"),T.summary=t,T.details=n,JSON.stringify(T,null,2)}catch(T){throw new Error(`HTTP缓存解读失败: ${T instanceof Error?T.message:"未知错误"}`)}}function formatDuration$1(E){if(E<60)return`${E} 秒`;if(E<3600){const T=Math.floor(E/60),e=E%60;return e>0?`${T} 分 ${e} 秒`:`${T} 分`}else if(E<86400){const T=Math.floor(E/3600),e=Math.floor(E%3600/60);return e>0?`${T} 小时 ${e} 分`:`${T} 小时`}else{const T=Math.floor(E/86400),e=Math.floor(E%86400/3600);return e>0?`${T} 天 ${e} 小时`:`${T} 天`}}function httpCorsAnalyze(E){try{const T={summary:"",details:[],headers:{}},e={},R=E.trim().split(`
`);for(const s of R){const L=s.match(/^([^:]+):\s*(.*)$/);if(L){const[,o,P]=L;e[o.toLowerCase()]=P}}const A=e["access-control-allow-origin"]||"",O=e["access-control-allow-methods"]||"",S=e["access-control-allow-headers"]||"",N=e["access-control-allow-credentials"]||"",n=e["access-control-expose-headers"]||"",I=e["access-control-max-age"]||"";T.headers={"Access-Control-Allow-Origin":A,"Access-Control-Allow-Methods":O,"Access-Control-Allow-Headers":S,"Access-Control-Allow-Credentials":N,"Access-Control-Expose-Headers":n,"Access-Control-Max-Age":I};const r=[];let t="未设置CORS";if(A?(t="允许跨域",A==="*"?r.push("设置了 Access-Control-Allow-Origin: * - 允许所有域名跨域访问"):r.push(`设置了 Access-Control-Allow-Origin: ${A} - 仅允许指定域名跨域访问`)):r.push("未设置 Access-Control-Allow-Origin - 不允许跨域访问"),O){const s=O.split(",").map(L=>L.trim());r.push(`设置了 Access-Control-Allow-Methods: ${s.join(", ")} - 允许的HTTP方法`)}if(S){const s=S.split(",").map(L=>L.trim());r.push(`设置了 Access-Control-Allow-Headers: ${s.join(", ")} - 允许的自定义请求头`)}if(N==="true"&&(r.push("设置了 Access-Control-Allow-Credentials: true - 允许携带凭证（如Cookie）跨域"),A==="*"&&r.push("⚠️ 警告: 当设置了credentials=true时，Access-Control-Allow-Origin不能为*，这会导致跨域失败")),n){const s=n.split(",").map(L=>L.trim());r.push(`设置了 Access-Control-Expose-Headers: ${s.join(", ")} - 允许前端获取的响应头`)}if(I){const s=parseInt(I);r.push(`设置了 Access-Control-Max-Age: ${s} - 预检请求结果的缓存时间为${formatDuration(s)}`)}return T.summary=`跨域状态: ${t}`,t==="允许跨域"&&N==="true"&&(T.summary+="，允许携带凭证"),T.details=r,JSON.stringify(T,null,2)}catch(T){throw new Error(`HTTP跨域解读失败: ${T instanceof Error?T.message:"未知错误"}`)}}function formatDuration(E){if(E<60)return`${E}秒`;if(E<3600){const T=Math.floor(E/60),e=E%60;return e>0?`${T}分${e}秒`:`${T}分`}else if(E<86400){const T=Math.floor(E/3600),e=Math.floor(E%3600/60);return e>0?`${T}小时${e}分`:`${T}小时`}else{const T=Math.floor(E/86400),e=Math.floor(E%86400/3600);return e>0?`${T}天${e}小时`:`${T}天`}}const json2tsLoad=()=>__vitePreload(()=>import("./index-xBv89qyh.js").then(E=>E.i),__vite__mapDeps([0,1,2,3,4,5,6])),methodMap={[EnumTools.TEXT_DIFF]:E=>E,[EnumTools.TEXT_SIZE]:sizeofByte,[EnumTools.URL_PARSE]:urlParse,[EnumTools.URL_ENCODE]:urlEncode,[EnumTools.URL_DECODE]:urlDecode,[EnumTools.CSP_PARSE]:cspParse,[EnumTools.CSP_UNPARSE]:cspUnparse,[EnumTools.HTTP_CACHE_ANALYZE]:httpCacheAnalyze,[EnumTools.HTTP_CORS_ANALYZE]:httpCorsAnalyze,[EnumTools.JSON_COMPRESS]:jsonCompress,[EnumTools.JSON_FORMAT]:jsonFormat,[EnumTools.JSON_PARSE_DEEP]:jsonParseDeep,[EnumTools.JSON_SORT]:jsonSort,[EnumTools.JSON_FLAT]:jsonFlat,[EnumTools.JSON_NESTING]:jsonNesting,[EnumTools.JSON_TO_CSV]:json2csv,[EnumTools.CSV_TO_JSON]:csv2json,[EnumTools.JSON_TO_TS]:async E=>{const{json2ts:T}=await json2tsLoad();return T(E)},[EnumTools.JSON_TO_YAML]:json2yaml,[EnumTools.YAML_TO_JSON]:yaml2json,[EnumTools.OBJ_TO_JSON]:object2Json,[EnumTools.JSON_TO_OBJ]:json2Object,[EnumTools.BASE64_ENCODE]:encodeBase64,[EnumTools.BASE64_DECODE]:decodeBase64,[EnumTools.SQL_FORMAT]:sqlFormat,[EnumTools.SQL_COMPRESS]:sqlCompress};async function processContent(E,T){if(!methodMap[T])throw new Error(`Unsupported type: ${T}`);console.log("processContent",T);let e="",R="success";try{const A=methodMap[T](E);A instanceof Promise?e=await A:e=A}catch(A){R="failure",e=A instanceof Error?A.message:"处理失败"}return[e,R]}const _hoisted_1={class:"page-editor-double",id:"editor-double"},codeSize=`计算字符串所占的内存字节数，
使用 UTF-8 和 UTF-16 的编码方式计算。
UTF-8 和 UTF-16 都是 Unicode 标准的字符编码方案，
但它们的设计选择导致了截然不同的特性和适用场景。
  - UTF-8 使用 1 到 4 个字节 的变长编码来表示一个字符。核心特点：向后兼容 ASCII。
  - UTF-16 使用 2 或 4 个字节 的变长编码来表示一个字符。核心特点：表示非 ASCII 字符通常只需要 2 个字节。
对于 CJK 文本（中文/日文/韩文），UTF-8 通常需要 3 个字节来表示一个字符，而 UTF-16 通常只需要 2 个字节。
对于英文文本，UTF-8 通常需要只需要 1 个字节，而 UTF-16 通常需要 2 个字节来表示一个字符。
因此，在英文文本中，UTF-8 通常是更节省空间的选择，而在 CJK 文本中，UTF-16 通常是更节省空间的选择。
由于 UTF-8 兼容 ASCII，因此在绝大多数现代应用中，UTF-8 是默认选择。`,codeJsonCompress=`{
  "foo": "bar",
  "hello": "world"
}`,codeJsonFormat='{"foo":"bar","hello":"world"}',codeJsonParser='{"d":"{\\"c\\":\\"{\\\\\\"b\\\\\\":\\\\\\"{\\\\\\\\\\\\\\"a\\\\\\\\\\\\\\":1}\\\\\\"}\\"}"}',codeJsonSort=`{
  "foo": "bar",
  "hello": "world",
  "a": 1,
  "d": 2,
  "c": 1,
  "b": {
    "c": 3,
    "b": 2,
    "a": 1
  }
}`,codeJson2Ts=`{
  "foo":"bar",
  "hello":"world",
  "test": {
    "a": 1
  }
}`,codeJsonFlat=`{
  "a1": {
    "a2": 1
  },
  "b1": {
    "a2": 2
  },
  "c1": {
    "a2": 3
  }
}`,codeJsonNesting=`{
  "a1.a2": 1,
  "b1.a2": 2,
  "c1.a2": 3
}`,codeJsonYaml=`{
  "name": "张三",
  "age": 30,
  "address": {
    "street": "人民路",
    "city": "北京"
  },
  "hobbies": ["阅读", "游泳"]
}`,codeYamlJson=`name: 张三
age: 30
address:
  street: 人民路
  city: 北京
hobbies:
  - 阅读
  - 游泳
`,codeJsonCsv=`[{
  "a1": 1,
  "a2": 2,
  "a3": 3
}]`,codeCsvJson=`Column 1,Column 2,Column 3,Column 4
1-1,1-2,1-3,1-4
2-1,2-2,2-3,2-4
3-1,3-2,3-3,3-4
4,5,6,7`,codeObjectJson=`{
  a: 1,
  b: 2,
  c: 3
}`,codeJson2Obj=`{
  "a": 1,
  "b": 2,
  "c": 3
}`,codeBase64Encode="你好世界",codeBase64Decode="5L2g5aW95LiW55WM",codeUrlEncode="你好世界",codeUrlDecode="%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C",codeCspParse="Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' cdn.example.com; style-src 'self' fonts.example.com; img-src 'self' data: example.com; font-src 'self' data: fonts.example.com; form-action 'self'",codeCspUnparse=`{
  "default-src": ["'self'"],
  "script-src": ["'self'","'unsafe-inline'", "'unsafe-eval'", "cdn.example.com"],
  "style-src": ["'self'", "fonts.example.com"],
  "img-src": ["'self'", "data:", "example.com"],
  "font-src": ["'self'", "data:", "fonts.example.com"],
  "form-action": ["'self'"]
}`,codeHttpCacheAnalyze=`Content-Type: text/html
Content-Length: 1024
Date: Tue, 22 Feb 2022 22:22:22 GMT
Cache-Control: max-age=604800`,codeHttpCorsAnalyze=`Content-Type: application/json
Content-Length: 123
Access-Control-Allow-Origin: https://example.com
Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With
Access-Control-Allow-Credentials: true
Access-Control-Expose-Headers: X-Custom-Header, X-Another-Header
Access-Control-Max-Age: 86400`,codeSqlFormat="SELECT id, name, email, created_at FROM users WHERE status = 'active' AND created_at > '2023-01-01' ORDER BY created_at DESC LIMIT 10;",codeSqlCompress=`SELECT 
  id, 
  name, 
  email, 
  created_at 
FROM 
  users 
WHERE 
  status = 'active' 
  AND created_at > '2023-01-01' 
ORDER BY 
  created_at DESC 
LIMIT 10;`,_sfc_main=defineComponent({__name:"PageEditorDouble",setup(E){let T=createEditorModel("","javascript"),e=createEditorModel("","javascript");const R=createEditorContainer(),A=createEditorContainer(),O=createEditorInstance(R,T),S=createEditorInstance(A,e,{readOnly:!0}),N=useRoute();async function n(){const t=T.getValue(),s=`code-tools-${String(N.name)}`;await localforage.setItem(s,t),editorConsole.addConsole("	[INFO]	Save Success")}async function I(){const t=`code-tools-${String(N.name)}`;await localforage.getItem(t).then(s=>{N.name==EnumTools.YAML_TO_JSON?(T=createEditorModel("","yaml"),O.setModel(T),e=createEditorModel("","javascript"),S.setModel(e)):N.name==EnumTools.JSON_TO_YAML?(T=createEditorModel("","javascript"),O.setModel(T),e=createEditorModel("","yaml"),S.setModel(e)):N.name==EnumTools.SQL_FORMAT||N.name==EnumTools.SQL_COMPRESS?(T=createEditorModel("","sql"),O.setModel(T),e=createEditorModel("","sql"),S.setModel(e)):N.name==EnumTools.TEXT_SIZE?(T=createEditorModel("","text"),O.setModel(T),e=createEditorModel("","javascript"),S.setModel(e)):(T=createEditorModel("","javascript"),O.setModel(T),e=createEditorModel("","javascript"),S.setModel(e)),N.name==EnumTools.YAML_TO_JSON&&T.setValue(s||codeYamlJson),N.name==EnumTools.JSON_TO_YAML&&T.setValue(s||codeJsonYaml),N.name=="text-size"&&T.setValue(s||codeSize),N.name=="url-parse"&&T.setValue(s||window.location.href),N.name=="base64-encode"&&T.setValue(s||codeBase64Encode),N.name=="base64-decode"&&T.setValue(s||codeBase64Decode),N.name=="url-encode"&&T.setValue(s||codeUrlEncode),N.name=="url-decode"&&T.setValue(s||codeUrlDecode),N.name=="csp-parse"&&T.setValue(s||codeCspParse),N.name=="csp-unparse"&&T.setValue(s||codeCspUnparse),N.name=="http-cache-analyze"&&T.setValue(s||codeHttpCacheAnalyze),N.name=="http-cors-analyze"&&T.setValue(s||codeHttpCorsAnalyze),N.name=="json-compress"&&T.setValue(s||codeJsonCompress),N.name=="json-format"&&T.setValue(s||codeJsonFormat),N.name=="json-parse-deep"&&T.setValue(s||codeJsonParser),N.name=="json-sort"&&T.setValue(s||codeJsonSort),N.name=="json-to-ts"&&T.setValue(s||codeJson2Ts),N.name=="json-flat"&&T.setValue(s||codeJsonFlat),N.name=="json-nesting"&&T.setValue(s||codeJsonNesting),N.name=="json-to-csv"&&T.setValue(s||codeJsonCsv),N.name=="csv-to-json"&&T.setValue(s||codeCsvJson),N.name=="obj-to-json"&&T.setValue(s||codeObjectJson),N.name=="json-to-obj"&&T.setValue(s||codeJson2Obj),N.name=="sql-format"&&T.setValue(s||codeSqlFormat),N.name=="sql-compress"&&T.setValue(s||codeSqlCompress)}),editorConsole.addConsole("	[INFO]	Fetch Success")}addCommandSave(O,async()=>{n()}),onMounted(async()=>{addEditorIntoManageList(O),addEditorIntoManageList(S),addContainer(document.getElementById("editor-double"),R),addContainer(document.getElementById("editor-double"),A),await I()}),watch(N,async()=>{await I()}),onUnmounted(()=>{disposeEditorList()});async function r(){const t=O.getValue(),s=N.name;try{const[L,o]=await processContent(t,s);e.setValue(L),o==="unrealized"&&editorConsole.addConsole("	[WARN]	Format Unrealized"),o==="success"&&editorConsole.addConsole("	[INFO]	Format Success")}catch(L){S.setValue(""),editorConsole.addConsole("	[Error]	"+L.message)}}return O.onDidChangeModelContent(()=>{r()}),(t,s)=>(openBlock(),createElementBlock("div",_hoisted_1))}});export{_sfc_main as default};
